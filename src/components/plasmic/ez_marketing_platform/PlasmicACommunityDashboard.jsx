/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6Q26EfqfPNQuydumhAEs1S
// Component: LslvpoBcocfo
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicInvalidate } from "@plasmicapp/react-web/lib/data-sources";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Video } from "@plasmicpkgs/plasmic-basic-components";
import LoginButton from "../../LoginButton"; // plasmic-import: sda60oPQ2thQ/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import { Dialog } from "@plasmicpkgs/radix-ui";
import { AntdRate } from "@plasmicpkgs/antd5/skinny/registerRate";
import { DialogContent } from "@plasmicpkgs/radix-ui";
import { DialogClose } from "@plasmicpkgs/radix-ui";
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import YouTube from "@plasmicpkgs/react-youtube";
import { useScreenVariants as useScreenVariantsnnPusS1DHa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nnPus_s1dHa_/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6Q26EfqfPNQuydumhAEs1S/projectcss
import sty from "./PlasmicACommunityDashboard.module.css"; // plasmic-import: LslvpoBcocfo/css
import YoutubeIconLogoSvgrepoComSvgIcon from "./icons/PlasmicIcon__YoutubeIconLogoSvgrepoComSvg"; // plasmic-import: wyl8qP8ULAx-/icon
import IlustrgatuSvgIcon from "./icons/PlasmicIcon__IlustrgatuSvg"; // plasmic-import: ogpmBO-sGuua/icon
import IlustrgatuSvg2Icon from "./icons/PlasmicIcon__IlustrgatuSvg2"; // plasmic-import: uIBp4qzGRMqi/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: -tYB_tag2lQq/icon
import SemTitulo1SvgIcon from "./icons/PlasmicIcon__SemTitulo1Svg"; // plasmic-import: r8NAz6flIS-M/icon
import ReportSvgrepoComSvgIcon from "./icons/PlasmicIcon__ReportSvgrepoComSvg"; // plasmic-import: a-8qUDv5D2bw/icon
import logoPng2S9Gcm9LGTbT6 from "./images/logoPng2.png"; // plasmic-import: s9GCM9lGTbT6/picture
import semTitulo2Jpg31LNEr9NkcLru from "./images/semTitulo2Jpg3.jpg"; // plasmic-import: 1lNEr9NkcLRU/picture
import vecteezyUserAccountIconForYourDesignOnly21079672PngBO6VkmKkINB from "./images/vecteezyUserAccountIconForYourDesignOnly21079672Png.png"; // plasmic-import: bO6vkmKkI-nB/picture
import zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y from "./images/zqLeeVbDjv88IbcUnsplashJpg.jpg"; // plasmic-import: xtkCNXECXa1Y/picture

createPlasmicElementProxy;

export const PlasmicACommunityDashboard__VariantProps = new Array();

export const PlasmicACommunityDashboard__ArgProps = new Array();

const $$ = {};

function PlasmicACommunityDashboard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "sliderCarousel3.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel3",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "sliderCarousel4.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel4",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "sliderCarousel5.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel5",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "sliderCarousel2.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel2",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover4.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover5.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover6.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialogGrid.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate11.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "rate9.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialogGrid2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate10.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate12.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate13.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate14.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate3.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid4.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate15.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate16.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate4.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid5.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate18.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate5.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "rate17.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialogGrid6.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate19.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate20.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate6.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid7.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate21.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate22.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate7.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid8.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate23.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate24.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate8.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnnPusS1DHa()
  });
  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"topBar"}
          data-plasmic-override={overrides.topBar}
          hasGap={true}
          className={classNames(projectcss.all, sty.topBar)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__yLdgR)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sRnrY)}
            >
              <NavigationBar
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                brand={
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__mrgew
                    )}
                    href={`/affiliate-homepage`}
                    onClick={async event => {
                      const $steps = {};
                      $steps["refreshData"] = true
                        ? (() => {
                            const actionArgs = {
                              queryInvalidation: ["plasmic_refresh_all"]
                            };
                            return (async ({ queryInvalidation }) => {
                              if (!queryInvalidation) {
                                return;
                              }
                              await plasmicInvalidate(queryInvalidation);
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["refreshData"] != null &&
                        typeof $steps["refreshData"] === "object" &&
                        typeof $steps["refreshData"].then === "function"
                      ) {
                        $steps["refreshData"] = await $steps["refreshData"];
                      }
                    }}
                    platform={"react"}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__qd7Cm)}
                      displayHeight={"30px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: logoPng2S9Gcm9LGTbT6,
                        fullWidth: 190,
                        fullHeight: 100,
                        aspectRatio: undefined
                      }}
                    />
                  </PlasmicLink__>
                }
                className={classNames("__wab_instance", sty.navigationBar)}
                closeButton={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__t9TTz)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={"https://static1.plasmic.app/close.svg"}
                  />
                }
                itemsGap={8}
                menuItems={
                  <React.Fragment>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link___5Mqo4
                      )}
                      href={`/community-dashboard`}
                      platform={"react"}
                    >
                      {"Community Dashboard"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__fk70Q
                      )}
                      href={`/service-dashboard`}
                      platform={"react"}
                    >
                      {"Service\nDashboard"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link___2Buk1
                      )}
                      platform={"react"}
                    >
                      {"Market\nTrends"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__syqpz
                      )}
                      href={`/find-a-business`}
                      platform={"react"}
                    >
                      {"Find a \nbusiness"}
                    </PlasmicLink__>
                  </React.Fragment>
                }
                openButton={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__jdCOz)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={``}
                    src={"https://static1.plasmic.app/menu.svg"}
                    width={``}
                  />
                }
                responsiveBreakpoint={768}
              />

              <AntdDropdown
                data-plasmic-name={"account"}
                data-plasmic-override={overrides.account}
                className={classNames("__wab_instance", sty.account)}
                dropdownMenuScopeClassName={sty["account__dropdownMenu"]}
                menuClassName={classNames({ [sty["pcls_sIJz5jEWe2SL"]]: true })}
                menuItemClassName={classNames({
                  [sty["pcls_DpO3fBZCaRjb"]]: true
                })}
                menuItems={() => (
                  <React.Fragment>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__tbTaj
                      )}
                      key={"menu-item-1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aRsDd
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__vP4Ei
                      )}
                      key={"menu-item-2"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1L2X8
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                  </React.Fragment>
                )}
                menuItemsJson={(() => {
                  const __composite = [
                    { type: null, label: null, children: null },
                    {
                      type: null,
                      value: "action1",
                      label: null,
                      children: null
                    },
                    {
                      type: null,
                      value: "action2",
                      label: null,
                      onClick: null
                    }
                  ];

                  __composite["0"]["type"] = "group";
                  __composite["0"]["label"] = "User";
                  __composite["0"]["children"] = (() => {
                    const __composite = [
                      { type: "item", label: null, onClick: null },
                      { type: "item", label: null, onClick: null },
                      { type: null }
                    ];

                    __composite["0"]["label"] = "Profile";
                    __composite["0"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToAProfile"] = true
                        ? (() => {
                            const actionArgs = { destination: `/profile` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToAProfile"] != null &&
                        typeof $steps["goToAProfile"] === "object" &&
                        typeof $steps["goToAProfile"].then === "function"
                      ) {
                        $steps["goToAProfile"] = await $steps["goToAProfile"];
                      }
                    };
                    __composite["1"]["label"] = "Edit profile";
                    __composite["1"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToACreateAccount"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/a-create account`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToACreateAccount"] != null &&
                        typeof $steps["goToACreateAccount"] === "object" &&
                        typeof $steps["goToACreateAccount"].then === "function"
                      ) {
                        $steps["goToACreateAccount"] = await $steps[
                          "goToACreateAccount"
                        ];
                      }
                    };
                    __composite["2"]["type"] = "divider";
                    return __composite;
                  })();
                  __composite["1"]["type"] = "group";
                  __composite["1"]["label"] = "Account";
                  __composite["1"]["children"] = (() => {
                    const __composite = [
                      { type: "item", label: null, onClick: null },
                      { type: "item", label: null, onClick: null },
                      { type: null }
                    ];

                    __composite["0"]["label"] = "Settings & Privacy";
                    __composite["0"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToALogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/a-login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToALogin"] != null &&
                        typeof $steps["goToALogin"] === "object" &&
                        typeof $steps["goToALogin"].then === "function"
                      ) {
                        $steps["goToALogin"] = await $steps["goToALogin"];
                      }
                    };
                    __composite["1"]["label"] = "Help";
                    __composite["1"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToALogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/a-login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToALogin"] != null &&
                        typeof $steps["goToALogin"] === "object" &&
                        typeof $steps["goToALogin"].then === "function"
                      ) {
                        $steps["goToALogin"] = await $steps["goToALogin"];
                      }
                    };
                    __composite["2"]["type"] = "divider";
                    return __composite;
                  })();
                  __composite["2"]["type"] = "item";
                  __composite["2"]["label"] = "Sign out";
                  __composite["2"]["onClick"] = async info => {
                    const $steps = {};
                    $steps["goToALogin"] = true
                      ? (() => {
                          const actionArgs = { destination: `/a-login` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              location.assign(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToALogin"] != null &&
                      typeof $steps["goToALogin"] === "object" &&
                      typeof $steps["goToALogin"].then === "function"
                    ) {
                      $steps["goToALogin"] = await $steps["goToALogin"];
                    }
                  };
                  return __composite;
                })()}
                trigger={"hover"}
                useMenuItemsSlot={false}
              >
                <AntdButton
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  href={`/a-login`}
                  target={true}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__gu2Mb)}
                    displayHeight={"30px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"30px"}
                    loading={"lazy"}
                  />
                </AntdButton>
              </AntdDropdown>
            </Stack__>
          </Stack__>
        </Stack__>
        <div
          data-plasmic-name={"container1"}
          data-plasmic-override={overrides.container1}
          className={classNames(projectcss.all, sty.container1)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__l4Qc9)}>
            <Video
              data-plasmic-name={"htmlVideo"}
              data-plasmic-override={overrides.htmlVideo}
              autoPlay={true}
              className={classNames("__wab_instance", sty.htmlVideo)}
              controls={false}
              loop={true}
              muted={true}
              src={
                "https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm"
              }
            />

            <div className={classNames(projectcss.all, sty.freeBox__faj8M)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__so6DL
                )}
              >
                {"Bacharel"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8FGjd
                )}
              >
                {"Gold"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__txRxz)}>
                <div className={classNames(projectcss.all, sty.freeBox__uWx5C)}>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__gp5SW
                    )}
                    platform={"react"}
                  >
                    <YoutubeIconLogoSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg___3NdY)}
                      role={"img"}
                    />
                  </PlasmicLink__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9UqDh
                    )}
                  >
                    {"10000"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rm00)}>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__demKf
                    )}
                    platform={"react"}
                  >
                    <IlustrgatuSvgIcon
                      className={classNames(projectcss.all, sty.svg__jb6QN)}
                      role={"img"}
                    />
                  </PlasmicLink__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sFjQp
                    )}
                  >
                    {"10000"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__pIrgL)}>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__ng9S
                    )}
                    platform={"react"}
                  >
                    <IlustrgatuSvg2Icon
                      className={classNames(projectcss.all, sty.svg__iNeX)}
                      role={"img"}
                    />
                  </PlasmicLink__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lxq7
                    )}
                  >
                    {"10000"}
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___5Suxd)}
                >
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__ypywG
                    )}
                    platform={"react"}
                  >
                    <Icon6Icon
                      className={classNames(projectcss.all, sty.svg__zwEm0)}
                      onClick={async event => {
                        const $steps = {};
                        $steps["updateStateVariable"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateVariable"] != null &&
                          typeof $steps["updateStateVariable"] === "object" &&
                          typeof $steps["updateStateVariable"].then ===
                            "function"
                        ) {
                          $steps["updateStateVariable"] = await $steps[
                            "updateStateVariable"
                          ];
                        }
                      }}
                      role={"img"}
                    />
                  </PlasmicLink__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cT8K
                    )}
                  >
                    {"10000"}
                  </div>
                </div>
              </div>
              <LoginButton
                className={classNames(
                  "__wab_instance",
                  sty.loginButton___5T8Ns
                )}
                color={"softSand"}
                link={`/create-community`}
                shape={"sharp"}
                size={"minimal"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iZfdo
                  )}
                >
                  {"Edit community"}
                </div>
              </LoginButton>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__nKuNr)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__yfOjg)}
              displayHeight={"170px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"170px"}
              loading={"lazy"}
              src={{
                src: semTitulo2Jpg31LNEr9NkcLru,
                fullWidth: 1014,
                fullHeight: 1014,
                aspectRatio: undefined
              }}
            />

            <SemTitulo1SvgIcon
              className={classNames(projectcss.all, sty.svg__xcvbk)}
              role={"img"}
            />
          </div>
        </div>
        <div
          data-plasmic-name={"container3"}
          data-plasmic-override={overrides.container3}
          className={classNames(projectcss.all, sty.container3)}
        >
          {(() => {
            const child$Props = {
              beforeChange: async (...eventArgs) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel", "currentSlide"],
                  SliderWrapper_Helpers
                ).apply(null, eventArgs);
              },
              centerMode: true,
              className: classNames("__wab_instance", sty.sliderCarousel),
              dots: true,
              focusOnSelect: true,
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel",
                "currentSlide"
              ]),
              ref: ref => {
                $refs["sliderCarousel"] = ref;
              },
              sliderScopeClassName: sty["sliderCarousel__slider"],
              slidesPerRow: 3
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel.currentSlide"
                }
              ],

              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );
            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel"}
                data-plasmic-override={overrides.sliderCarousel}
                {...child$Props}
              >
                <div className={classNames(projectcss.all, sty.freeBox__wbRtl)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iW7Gd)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bZ1BH
                      )}
                    >
                      {"Bacharel"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1NgNd
                      )}
                    >
                      {"Gold"}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__q5QxI)}
                      displayHeight={"250px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"200px"}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                      src={{
                        src: vecteezyUserAccountIconForYourDesignOnly21079672PngBO6VkmKkINB,
                        fullWidth: 2551,
                        fullHeight: 2551,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oz54
                    )}
                  >
                    {"Market Mananger"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__aZqP)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cXwf0)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nJuCz
                      )}
                    >
                      {"Bacharel"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yxAhe
                      )}
                    >
                      {"Gold"}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__q21Vt)}
                      displayHeight={"250px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"200px"}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                      src={{
                        src: vecteezyUserAccountIconForYourDesignOnly21079672PngBO6VkmKkINB,
                        fullWidth: 2551,
                        fullHeight: 2551,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uHoY
                    )}
                  >
                    {"Market Mananger"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__zAqMd)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__whMG)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zcYi1
                      )}
                    >
                      {"Bacharel"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0E8YM
                      )}
                    >
                      {"Gold"}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__lTvAi)}
                      displayHeight={"250px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"200px"}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                      src={{
                        src: vecteezyUserAccountIconForYourDesignOnly21079672PngBO6VkmKkINB,
                        fullWidth: 2551,
                        fullHeight: 2551,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bS8Kj
                    )}
                  >
                    {"Market Mananger"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__wh3Cg)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__efoMt)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uItIp
                      )}
                    >
                      {"Bacharel"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oYeI
                      )}
                    >
                      {"Gold"}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ar2Yw)}
                      displayHeight={"250px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"200px"}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                      src={{
                        src: vecteezyUserAccountIconForYourDesignOnly21079672PngBO6VkmKkINB,
                        fullWidth: 2551,
                        fullHeight: 2551,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o2Zu0
                    )}
                  >
                    {"Market Mananger"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__omiIt)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__l2Vkx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lvg6H
                      )}
                    >
                      {"Bacharel"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sY57D
                      )}
                    >
                      {"Gold"}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___3LrUb)}
                      displayHeight={"250px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"200px"}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                      src={{
                        src: vecteezyUserAccountIconForYourDesignOnly21079672PngBO6VkmKkINB,
                        fullWidth: 2551,
                        fullHeight: 2551,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j3ZWz
                    )}
                  >
                    {"Market Mananger"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__qR8D)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qle7F)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wiEk5
                      )}
                    >
                      {"Bacharel"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zQEt3
                      )}
                    >
                      {"Gold"}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__bN6KJ)}
                      displayHeight={"250px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"200px"}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                      src={{
                        src: vecteezyUserAccountIconForYourDesignOnly21079672PngBO6VkmKkINB,
                        fullWidth: 2551,
                        fullHeight: 2551,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a6Qz9
                    )}
                  >
                    {"Market Mananger"}
                  </div>
                </div>
              </SliderWrapper>
            );
          })()}
          <LoginButton
            className={classNames("__wab_instance", sty.loginButton__p3U7S)}
            color={"white"}
            shape={"sharp"}
            size={"minimal"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xVgh1
              )}
            >
              {"Find members"}
            </div>
          </LoginButton>
        </div>
        <div
          data-plasmic-name={"container5"}
          data-plasmic-override={overrides.container5}
          className={classNames(projectcss.all, sty.container5)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__s8Gn
            )}
          >
            {"Agency Reviews"}
          </div>
          {(() => {
            const child$Props = {
              arrows: true,
              beforeChange: async (...eventArgs) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel4", "currentSlide"],
                  SliderWrapper_Helpers
                ).apply(null, eventArgs);
              },
              centerMode: false,
              className: classNames("__wab_instance", sty.sliderCarousel4),
              infinite: false,
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel4",
                "currentSlide"
              ]),
              ref: ref => {
                $refs["sliderCarousel4"] = ref;
              },
              rows: 2,
              sliderScopeClassName: sty["sliderCarousel4__slider"],
              slidesPerRow: 1,
              slidesToScroll: 1,
              swipeToSlide: true,
              vertical: true
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel4.currentSlide"
                }
              ],

              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );
            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel4"}
                data-plasmic-override={overrides.sliderCarousel4}
                {...child$Props}
              >
                <div className={classNames(projectcss.all, sty.freeBox__wZmZa)}>
                  <Dialog
                    data-plasmic-name={"dialogGrid"}
                    data-plasmic-override={overrides.dialogGrid}
                    className={classNames("__wab_instance", sty.dialogGrid)}
                    defaultOpen={false}
                    onOpenChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "dialogGrid",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "dialogGrid",
                      "open"
                    ])}
                    themeResetClass={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    triggerSlot={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__k5Eiy
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2NDdx
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img___657Mq)}
                            displayHeight={"30px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"30px"}
                            loading={"lazy"}
                          />

                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__dcBw9
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Company//Member//customer"}
                          </PlasmicLink__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nMrY8
                            )}
                          >
                            {"comment about"}
                          </div>
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__yL36H
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Community"}
                          </PlasmicLink__>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__j30SN
                          )}
                        >
                          {
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                          }
                        </div>
                        <AntdRate
                          data-plasmic-name={"rate9"}
                          data-plasmic-override={overrides.rate9}
                          allowHalf={true}
                          className={classNames("__wab_instance", sty.rate9)}
                          disabled={true}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "rate9",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          symbols={
                            <React.Fragment>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ndtCt
                                )}
                              >
                                {"1"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__oPwPm
                                )}
                              >
                                {"2"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__o7Qq
                                )}
                              >
                                {"3"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7TAd8
                                )}
                              >
                                {"4"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__o86Cz
                                )}
                              >
                                {"5"}
                              </div>
                            </React.Fragment>
                          }
                          value={generateStateValueProp($state, [
                            "rate9",
                            "value"
                          ])}
                        />
                      </div>
                    }
                  >
                    <DialogContent
                      className={classNames(
                        "__wab_instance",
                        sty.dialogContent__brQeV
                      )}
                      themeResetClass={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"containerPost"}
                        data-plasmic-override={overrides.containerPost}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.containerPost
                        )}
                      >
                        <div
                          data-plasmic-name={"commentsSide"}
                          data-plasmic-override={overrides.commentsSide}
                          className={classNames(
                            projectcss.all,
                            sty.commentsSide
                          )}
                        >
                          <div
                            data-plasmic-name={"comments"}
                            data-plasmic-override={overrides.comments}
                            className={classNames(projectcss.all, sty.comments)}
                          >
                            <div
                              data-plasmic-name={"commentContainer"}
                              data-plasmic-override={overrides.commentContainer}
                              className={classNames(
                                projectcss.all,
                                sty.commentContainer
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__adhmX)}
                                displayHeight={"30px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"none"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"30px"}
                                loading={"lazy"}
                              />

                              <div
                                data-plasmic-name={"userAndComment"}
                                data-plasmic-override={overrides.userAndComment}
                                className={classNames(
                                  projectcss.all,
                                  sty.userAndComment
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__i2Nws
                                  )}
                                >
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      sty.link__oMoup
                                    )}
                                    platform={"react"}
                                  >
                                    {"Cool  User"}
                                  </PlasmicLink__>
                                  <AntdRate
                                    data-plasmic-name={"rate11"}
                                    data-plasmic-override={overrides.rate11}
                                    allowHalf={true}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.rate11
                                    )}
                                    disabled={true}
                                    onChange={async (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "rate11",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    symbols={
                                      <React.Fragment>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__vs2Zf
                                          )}
                                        >
                                          {"1"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___9LyOl
                                          )}
                                        >
                                          {"2"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___0Z3LG
                                          )}
                                        >
                                          {"3"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__jbdkS
                                          )}
                                        >
                                          {"4"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__rAkp4
                                          )}
                                        >
                                          {"5"}
                                        </div>
                                      </React.Fragment>
                                    }
                                    value={generateStateValueProp($state, [
                                      "rate11",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__yZo27
                                  )}
                                >
                                  {"Cool great comment"}
                                </div>
                              </div>
                            </div>
                          </div>
                          <AntdRate
                            data-plasmic-name={"rate"}
                            data-plasmic-override={overrides.rate}
                            allowHalf={true}
                            className={classNames("__wab_instance", sty.rate)}
                            onChange={async (...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "rate",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            symbols={
                              <React.Fragment>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__drNmZ
                                  )}
                                >
                                  {"1"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___1AQrp
                                  )}
                                >
                                  {"2"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__uslw3
                                  )}
                                >
                                  {"3"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__yPwpo
                                  )}
                                >
                                  {"4"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__s3YbQ
                                  )}
                                >
                                  {"5"}
                                </div>
                              </React.Fragment>
                            }
                            value={generateStateValueProp($state, [
                              "rate",
                              "value"
                            ])}
                          />

                          <textarea
                            data-plasmic-name={"textarea"}
                            data-plasmic-override={overrides.textarea}
                            className={classNames(
                              projectcss.all,
                              projectcss.textarea,
                              sty.textarea
                            )}
                            onChange={async (...eventArgs) => {
                              (e => {
                                generateStateOnChangeProp($state, [
                                  "textarea",
                                  "value"
                                ])(e.target.value);
                              }).apply(null, eventArgs);
                            }}
                            placeholder={"Add a comment..."}
                            ref={ref => {
                              $refs["textarea"] = ref;
                            }}
                            value={
                              generateStateValueProp($state, [
                                "textarea",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </div>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__tjoSu)}
                          displayHeight={"auto"}
                          displayMaxHeight={"400px"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"539px"}
                          loading={"lazy"}
                          src={{
                            src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                            fullWidth: 3200,
                            fullHeight: 2133,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          data-plasmic-name={"userSide"}
                          data-plasmic-override={overrides.userSide}
                          className={classNames(projectcss.all, sty.userSide)}
                        >
                          <div
                            data-plasmic-name={"userAction"}
                            data-plasmic-override={overrides.userAction}
                            className={classNames(
                              projectcss.all,
                              sty.userAction
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__jzopK)}
                              displayHeight={"40px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"40px"}
                              loading={"lazy"}
                            />

                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__u0Dcs
                              )}
                              platform={"react"}
                            >
                              {"User new"}
                            </PlasmicLink__>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___71SZ
                              )}
                            >
                              {"Commented about"}
                            </div>
                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__xJiJp
                              )}
                              platform={"react"}
                            >
                              {"Community user"}
                            </PlasmicLink__>
                            <ReportSvgrepoComSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__toszW
                              )}
                              role={"img"}
                            />

                            <DialogClose
                              className={classNames(
                                "__wab_instance",
                                sty.dialogClose__af8Zh
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ypGzj
                            )}
                          >
                            {
                              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                            }
                          </div>
                        </div>
                      </Stack__>
                    </DialogContent>
                  </Dialog>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__wmAkY)}>
                  <Dialog
                    data-plasmic-name={"dialogGrid2"}
                    data-plasmic-override={overrides.dialogGrid2}
                    className={classNames("__wab_instance", sty.dialogGrid2)}
                    defaultOpen={false}
                    onOpenChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "dialogGrid2",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "dialogGrid2",
                      "open"
                    ])}
                    themeResetClass={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    triggerSlot={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xuMjv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kkuia
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__f0RaI)}
                            displayHeight={"30px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"30px"}
                            loading={"lazy"}
                          />

                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link___6NFYl
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Company//Member//customer"}
                          </PlasmicLink__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cKYr
                            )}
                          >
                            {"comment about"}
                          </div>
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__uYwyb
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Community"}
                          </PlasmicLink__>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__q0ETd
                          )}
                        >
                          {
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                          }
                        </div>
                        <AntdRate
                          data-plasmic-name={"rate10"}
                          data-plasmic-override={overrides.rate10}
                          allowHalf={true}
                          className={classNames("__wab_instance", sty.rate10)}
                          disabled={true}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "rate10",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          symbols={
                            <React.Fragment>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qKrrz
                                )}
                              >
                                {"1"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dib21
                                )}
                              >
                                {"2"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zChi
                                )}
                              >
                                {"3"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gDstc
                                )}
                              >
                                {"4"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7L6GB
                                )}
                              >
                                {"5"}
                              </div>
                            </React.Fragment>
                          }
                          value={generateStateValueProp($state, [
                            "rate10",
                            "value"
                          ])}
                        />
                      </div>
                    }
                  >
                    <DialogContent
                      className={classNames(
                        "__wab_instance",
                        sty.dialogContent__sIReh
                      )}
                      themeResetClass={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"containerPost2"}
                        data-plasmic-override={overrides.containerPost2}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.containerPost2
                        )}
                      >
                        <div
                          data-plasmic-name={"commentsSide2"}
                          data-plasmic-override={overrides.commentsSide2}
                          className={classNames(
                            projectcss.all,
                            sty.commentsSide2
                          )}
                        >
                          <div
                            data-plasmic-name={"comments2"}
                            data-plasmic-override={overrides.comments2}
                            className={classNames(
                              projectcss.all,
                              sty.comments2
                            )}
                          >
                            <div
                              data-plasmic-name={"commentContainer2"}
                              data-plasmic-override={
                                overrides.commentContainer2
                              }
                              className={classNames(
                                projectcss.all,
                                sty.commentContainer2
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__yCwdW)}
                                displayHeight={"30px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"none"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"30px"}
                                loading={"lazy"}
                              />

                              <div
                                data-plasmic-name={"userAndComment2"}
                                data-plasmic-override={
                                  overrides.userAndComment2
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.userAndComment2
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__z4J3
                                  )}
                                >
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      sty.link__kmCm
                                    )}
                                    platform={"react"}
                                  >
                                    {"Cool  User"}
                                  </PlasmicLink__>
                                  <AntdRate
                                    data-plasmic-name={"rate12"}
                                    data-plasmic-override={overrides.rate12}
                                    allowHalf={true}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.rate12
                                    )}
                                    disabled={true}
                                    onChange={async (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "rate12",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    symbols={
                                      <React.Fragment>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__jq4I
                                          )}
                                        >
                                          {"1"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__bLgQr
                                          )}
                                        >
                                          {"2"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__kxd
                                          )}
                                        >
                                          {"3"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__lnzgT
                                          )}
                                        >
                                          {"4"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__zsOJt
                                          )}
                                        >
                                          {"5"}
                                        </div>
                                      </React.Fragment>
                                    }
                                    value={generateStateValueProp($state, [
                                      "rate12",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3JAr
                                  )}
                                >
                                  {"Cool great comment"}
                                </div>
                              </div>
                            </div>
                          </div>
                          <AntdRate
                            data-plasmic-name={"rate2"}
                            data-plasmic-override={overrides.rate2}
                            allowHalf={true}
                            className={classNames("__wab_instance", sty.rate2)}
                            onChange={async (...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "rate2",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            symbols={
                              <React.Fragment>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___2CkUg
                                  )}
                                >
                                  {"1"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fePy
                                  )}
                                >
                                  {"2"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ss54D
                                  )}
                                >
                                  {"3"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gkVd6
                                  )}
                                >
                                  {"4"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__e1MgC
                                  )}
                                >
                                  {"5"}
                                </div>
                              </React.Fragment>
                            }
                            value={generateStateValueProp($state, [
                              "rate2",
                              "value"
                            ])}
                          />

                          <textarea
                            data-plasmic-name={"textarea2"}
                            data-plasmic-override={overrides.textarea2}
                            className={classNames(
                              projectcss.all,
                              projectcss.textarea,
                              sty.textarea2
                            )}
                            onChange={async (...eventArgs) => {
                              (e => {
                                generateStateOnChangeProp($state, [
                                  "textarea2",
                                  "value"
                                ])(e.target.value);
                              }).apply(null, eventArgs);
                            }}
                            placeholder={"Add a comment..."}
                            ref={ref => {
                              $refs["textarea2"] = ref;
                            }}
                            value={
                              generateStateValueProp($state, [
                                "textarea2",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </div>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__eLt31)}
                          displayHeight={"auto"}
                          displayMaxHeight={"400px"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"539px"}
                          loading={"lazy"}
                          src={{
                            src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                            fullWidth: 3200,
                            fullHeight: 2133,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          data-plasmic-name={"userSide2"}
                          data-plasmic-override={overrides.userSide2}
                          className={classNames(projectcss.all, sty.userSide2)}
                        >
                          <div
                            data-plasmic-name={"userAction2"}
                            data-plasmic-override={overrides.userAction2}
                            className={classNames(
                              projectcss.all,
                              sty.userAction2
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___1Z8Yp)}
                              displayHeight={"40px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"40px"}
                              loading={"lazy"}
                            />

                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__xh5Ko
                              )}
                              platform={"react"}
                            >
                              {"User new"}
                            </PlasmicLink__>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eSt6Z
                              )}
                            >
                              {"Commented about"}
                            </div>
                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__sOtEj
                              )}
                              platform={"react"}
                            >
                              {"Community user"}
                            </PlasmicLink__>
                            <ReportSvgrepoComSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__gDdGt
                              )}
                              role={"img"}
                            />

                            <DialogClose
                              className={classNames(
                                "__wab_instance",
                                sty.dialogClose__jgWjx
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5RwXh
                            )}
                          >
                            {
                              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                            }
                          </div>
                        </div>
                      </Stack__>
                    </DialogContent>
                  </Dialog>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__cnWk)}>
                  <Dialog
                    data-plasmic-name={"dialogGrid3"}
                    data-plasmic-override={overrides.dialogGrid3}
                    className={classNames("__wab_instance", sty.dialogGrid3)}
                    defaultOpen={false}
                    onOpenChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "dialogGrid3",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "dialogGrid3",
                      "open"
                    ])}
                    themeResetClass={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    triggerSlot={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tAZ9
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rxqF
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__fdtGu)}
                            displayHeight={"30px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"30px"}
                            loading={"lazy"}
                          />

                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__lE
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Company//Member//customer"}
                          </PlasmicLink__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vEhWx
                            )}
                          >
                            {"comment about"}
                          </div>
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link___68YNp
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Community"}
                          </PlasmicLink__>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jxCru
                          )}
                        >
                          {
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                          }
                        </div>
                        <AntdRate
                          data-plasmic-name={"rate13"}
                          data-plasmic-override={overrides.rate13}
                          allowHalf={true}
                          className={classNames("__wab_instance", sty.rate13)}
                          disabled={true}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "rate13",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          symbols={
                            <React.Fragment>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__aKceC
                                )}
                              >
                                {"1"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__w9VIw
                                )}
                              >
                                {"2"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gaBWa
                                )}
                              >
                                {"3"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vKddU
                                )}
                              >
                                {"4"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jjW
                                )}
                              >
                                {"5"}
                              </div>
                            </React.Fragment>
                          }
                          value={generateStateValueProp($state, [
                            "rate13",
                            "value"
                          ])}
                        />
                      </div>
                    }
                  >
                    <DialogContent
                      className={classNames(
                        "__wab_instance",
                        sty.dialogContent___60JfF
                      )}
                      themeResetClass={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"containerPost3"}
                        data-plasmic-override={overrides.containerPost3}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.containerPost3
                        )}
                      >
                        <div
                          data-plasmic-name={"commentsSide3"}
                          data-plasmic-override={overrides.commentsSide3}
                          className={classNames(
                            projectcss.all,
                            sty.commentsSide3
                          )}
                        >
                          <div
                            data-plasmic-name={"comments3"}
                            data-plasmic-override={overrides.comments3}
                            className={classNames(
                              projectcss.all,
                              sty.comments3
                            )}
                          >
                            <div
                              data-plasmic-name={"commentContainer3"}
                              data-plasmic-override={
                                overrides.commentContainer3
                              }
                              className={classNames(
                                projectcss.all,
                                sty.commentContainer3
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__m0BkT)}
                                displayHeight={"30px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"none"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"30px"}
                                loading={"lazy"}
                              />

                              <div
                                data-plasmic-name={"userAndComment3"}
                                data-plasmic-override={
                                  overrides.userAndComment3
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.userAndComment3
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___4RlK
                                  )}
                                >
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      sty.link__xc5Zq
                                    )}
                                    platform={"react"}
                                  >
                                    {"Cool  User"}
                                  </PlasmicLink__>
                                  <AntdRate
                                    data-plasmic-name={"rate14"}
                                    data-plasmic-override={overrides.rate14}
                                    allowHalf={true}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.rate14
                                    )}
                                    disabled={true}
                                    onChange={async (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "rate14",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    symbols={
                                      <React.Fragment>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__w5ScX
                                          )}
                                        >
                                          {"1"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__iFtO
                                          )}
                                        >
                                          {"2"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__vBYd
                                          )}
                                        >
                                          {"3"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__gZUsa
                                          )}
                                        >
                                          {"4"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__sqWyA
                                          )}
                                        >
                                          {"5"}
                                        </div>
                                      </React.Fragment>
                                    }
                                    value={generateStateValueProp($state, [
                                      "rate14",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__mCdPv
                                  )}
                                >
                                  {"Cool great comment"}
                                </div>
                              </div>
                            </div>
                          </div>
                          <AntdRate
                            data-plasmic-name={"rate3"}
                            data-plasmic-override={overrides.rate3}
                            allowHalf={true}
                            className={classNames("__wab_instance", sty.rate3)}
                            onChange={async (...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "rate3",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            symbols={
                              <React.Fragment>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zYnnM
                                  )}
                                >
                                  {"1"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__jtSe
                                  )}
                                >
                                  {"2"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___9J1Mh
                                  )}
                                >
                                  {"3"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___368Tc
                                  )}
                                >
                                  {"4"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8CqsS
                                  )}
                                >
                                  {"5"}
                                </div>
                              </React.Fragment>
                            }
                            value={generateStateValueProp($state, [
                              "rate3",
                              "value"
                            ])}
                          />

                          <textarea
                            data-plasmic-name={"textarea3"}
                            data-plasmic-override={overrides.textarea3}
                            className={classNames(
                              projectcss.all,
                              projectcss.textarea,
                              sty.textarea3
                            )}
                            onChange={async (...eventArgs) => {
                              (e => {
                                generateStateOnChangeProp($state, [
                                  "textarea3",
                                  "value"
                                ])(e.target.value);
                              }).apply(null, eventArgs);
                            }}
                            placeholder={"Add a comment..."}
                            ref={ref => {
                              $refs["textarea3"] = ref;
                            }}
                            value={
                              generateStateValueProp($state, [
                                "textarea3",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </div>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__clo0Z)}
                          displayHeight={"auto"}
                          displayMaxHeight={"400px"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"539px"}
                          loading={"lazy"}
                          src={{
                            src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                            fullWidth: 3200,
                            fullHeight: 2133,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          data-plasmic-name={"userSide3"}
                          data-plasmic-override={overrides.userSide3}
                          className={classNames(projectcss.all, sty.userSide3)}
                        >
                          <div
                            data-plasmic-name={"userAction3"}
                            data-plasmic-override={overrides.userAction3}
                            className={classNames(
                              projectcss.all,
                              sty.userAction3
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___3QqLr)}
                              displayHeight={"40px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"40px"}
                              loading={"lazy"}
                            />

                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__waQhR
                              )}
                              platform={"react"}
                            >
                              {"User new"}
                            </PlasmicLink__>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fiyBh
                              )}
                            >
                              {"Commented about"}
                            </div>
                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__n3PUg
                              )}
                              platform={"react"}
                            >
                              {"Community user"}
                            </PlasmicLink__>
                            <ReportSvgrepoComSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jmMsx
                              )}
                              role={"img"}
                            />

                            <DialogClose
                              className={classNames(
                                "__wab_instance",
                                sty.dialogClose__knzlt
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ixxoV
                            )}
                          >
                            {
                              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                            }
                          </div>
                        </div>
                      </Stack__>
                    </DialogContent>
                  </Dialog>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__lzkEj)}>
                  <Dialog
                    data-plasmic-name={"dialogGrid4"}
                    data-plasmic-override={overrides.dialogGrid4}
                    className={classNames("__wab_instance", sty.dialogGrid4)}
                    defaultOpen={false}
                    onOpenChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "dialogGrid4",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "dialogGrid4",
                      "open"
                    ])}
                    themeResetClass={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    triggerSlot={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qoObJ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___5MZe9
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__oKySn)}
                            displayHeight={"30px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"30px"}
                            loading={"lazy"}
                          />

                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__xScim
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Company//Member//customer"}
                          </PlasmicLink__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vT3ET
                            )}
                          >
                            {"comment about"}
                          </div>
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link___8PpDi
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Community"}
                          </PlasmicLink__>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__veMpu
                          )}
                        >
                          {
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                          }
                        </div>
                        <AntdRate
                          data-plasmic-name={"rate15"}
                          data-plasmic-override={overrides.rate15}
                          allowHalf={true}
                          className={classNames("__wab_instance", sty.rate15)}
                          disabled={true}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "rate15",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          symbols={
                            <React.Fragment>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yCxOt
                                )}
                              >
                                {"1"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bJvx4
                                )}
                              >
                                {"2"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__eDrLx
                                )}
                              >
                                {"3"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nlJa
                                )}
                              >
                                {"4"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__f2Boj
                                )}
                              >
                                {"5"}
                              </div>
                            </React.Fragment>
                          }
                          value={generateStateValueProp($state, [
                            "rate15",
                            "value"
                          ])}
                        />
                      </div>
                    }
                  >
                    <DialogContent
                      className={classNames(
                        "__wab_instance",
                        sty.dialogContent__mgt36
                      )}
                      themeResetClass={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"containerPost4"}
                        data-plasmic-override={overrides.containerPost4}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.containerPost4
                        )}
                      >
                        <div
                          data-plasmic-name={"commentsSide4"}
                          data-plasmic-override={overrides.commentsSide4}
                          className={classNames(
                            projectcss.all,
                            sty.commentsSide4
                          )}
                        >
                          <div
                            data-plasmic-name={"comments4"}
                            data-plasmic-override={overrides.comments4}
                            className={classNames(
                              projectcss.all,
                              sty.comments4
                            )}
                          >
                            <div
                              data-plasmic-name={"commentContainer4"}
                              data-plasmic-override={
                                overrides.commentContainer4
                              }
                              className={classNames(
                                projectcss.all,
                                sty.commentContainer4
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__xsXjn)}
                                displayHeight={"30px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"none"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"30px"}
                                loading={"lazy"}
                              />

                              <div
                                data-plasmic-name={"userAndComment4"}
                                data-plasmic-override={
                                  overrides.userAndComment4
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.userAndComment4
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__gLNoK
                                  )}
                                >
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      sty.link__scGj
                                    )}
                                    platform={"react"}
                                  >
                                    {"Cool  User"}
                                  </PlasmicLink__>
                                  <AntdRate
                                    data-plasmic-name={"rate16"}
                                    data-plasmic-override={overrides.rate16}
                                    allowHalf={true}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.rate16
                                    )}
                                    disabled={true}
                                    onChange={async (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "rate16",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    symbols={
                                      <React.Fragment>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__sQamg
                                          )}
                                        >
                                          {"1"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__nSo1T
                                          )}
                                        >
                                          {"2"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___7XpR5
                                          )}
                                        >
                                          {"3"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__tjh9W
                                          )}
                                        >
                                          {"4"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__mJve6
                                          )}
                                        >
                                          {"5"}
                                        </div>
                                      </React.Fragment>
                                    }
                                    value={generateStateValueProp($state, [
                                      "rate16",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hbXLe
                                  )}
                                >
                                  {"Cool great comment"}
                                </div>
                              </div>
                            </div>
                          </div>
                          <AntdRate
                            data-plasmic-name={"rate4"}
                            data-plasmic-override={overrides.rate4}
                            allowHalf={true}
                            className={classNames("__wab_instance", sty.rate4)}
                            onChange={async (...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "rate4",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            symbols={
                              <React.Fragment>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___5FXKy
                                  )}
                                >
                                  {"1"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__b02Ke
                                  )}
                                >
                                  {"2"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xnReX
                                  )}
                                >
                                  {"3"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xdDq8
                                  )}
                                >
                                  {"4"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3L77R
                                  )}
                                >
                                  {"5"}
                                </div>
                              </React.Fragment>
                            }
                            value={generateStateValueProp($state, [
                              "rate4",
                              "value"
                            ])}
                          />

                          <textarea
                            data-plasmic-name={"textarea4"}
                            data-plasmic-override={overrides.textarea4}
                            className={classNames(
                              projectcss.all,
                              projectcss.textarea,
                              sty.textarea4
                            )}
                            onChange={async (...eventArgs) => {
                              (e => {
                                generateStateOnChangeProp($state, [
                                  "textarea4",
                                  "value"
                                ])(e.target.value);
                              }).apply(null, eventArgs);
                            }}
                            placeholder={"Add a comment..."}
                            ref={ref => {
                              $refs["textarea4"] = ref;
                            }}
                            value={
                              generateStateValueProp($state, [
                                "textarea4",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </div>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__zxwMr)}
                          displayHeight={"auto"}
                          displayMaxHeight={"400px"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"539px"}
                          loading={"lazy"}
                          src={{
                            src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                            fullWidth: 3200,
                            fullHeight: 2133,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          data-plasmic-name={"userSide4"}
                          data-plasmic-override={overrides.userSide4}
                          className={classNames(projectcss.all, sty.userSide4)}
                        >
                          <div
                            data-plasmic-name={"userAction4"}
                            data-plasmic-override={overrides.userAction4}
                            className={classNames(
                              projectcss.all,
                              sty.userAction4
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__c1UwJ)}
                              displayHeight={"40px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"40px"}
                              loading={"lazy"}
                            />

                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__rhgB
                              )}
                              platform={"react"}
                            >
                              {"User new"}
                            </PlasmicLink__>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hftL3
                              )}
                            >
                              {"Commented about"}
                            </div>
                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__opFPg
                              )}
                              platform={"react"}
                            >
                              {"Community user"}
                            </PlasmicLink__>
                            <ReportSvgrepoComSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jLuKc
                              )}
                              role={"img"}
                            />

                            <DialogClose
                              className={classNames(
                                "__wab_instance",
                                sty.dialogClose__aEbU5
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__w6Dzu
                            )}
                          >
                            {
                              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                            }
                          </div>
                        </div>
                      </Stack__>
                    </DialogContent>
                  </Dialog>
                </div>
              </SliderWrapper>
            );
          })()}
        </div>
        <div
          data-plasmic-name={"container9"}
          data-plasmic-override={overrides.container9}
          className={classNames(projectcss.all, sty.container9)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mfqMl
            )}
          >
            {"Agency Replies"}
          </div>
          {(() => {
            const child$Props = {
              arrows: true,
              beforeChange: async (...eventArgs) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel5", "currentSlide"],
                  SliderWrapper_Helpers
                ).apply(null, eventArgs);
              },
              centerMode: false,
              className: classNames("__wab_instance", sty.sliderCarousel5),
              infinite: false,
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel5",
                "currentSlide"
              ]),
              ref: ref => {
                $refs["sliderCarousel5"] = ref;
              },
              rows: 2,
              sliderScopeClassName: sty["sliderCarousel5__slider"],
              slidesPerRow: 1,
              slidesToScroll: 1,
              swipeToSlide: true,
              vertical: true
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel5.currentSlide"
                }
              ],

              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );
            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel5"}
                data-plasmic-override={overrides.sliderCarousel5}
                {...child$Props}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ln3OI)}>
                  <Dialog
                    data-plasmic-name={"dialogGrid5"}
                    data-plasmic-override={overrides.dialogGrid5}
                    className={classNames("__wab_instance", sty.dialogGrid5)}
                    defaultOpen={false}
                    onOpenChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "dialogGrid5",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "dialogGrid5",
                      "open"
                    ])}
                    themeResetClass={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    triggerSlot={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jjab
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__j0Ynj
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img___9FdwR)}
                            displayHeight={"30px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"30px"}
                            loading={"lazy"}
                          />

                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__cc4T7
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Community"}
                          </PlasmicLink__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jaPk
                            )}
                          >
                            {"comment about"}
                          </div>
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link___2ZMdw
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Company//Member"}
                          </PlasmicLink__>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nhYeb
                          )}
                        >
                          {
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                          }
                        </div>
                        <AntdRate
                          data-plasmic-name={"rate17"}
                          data-plasmic-override={overrides.rate17}
                          allowHalf={true}
                          className={classNames("__wab_instance", sty.rate17)}
                          disabled={true}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "rate17",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          symbols={
                            <React.Fragment>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cMelw
                                )}
                              >
                                {"1"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zS4At
                                )}
                              >
                                {"2"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yCoAc
                                )}
                              >
                                {"3"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dtxK
                                )}
                              >
                                {"4"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__u02T4
                                )}
                              >
                                {"5"}
                              </div>
                            </React.Fragment>
                          }
                          value={generateStateValueProp($state, [
                            "rate17",
                            "value"
                          ])}
                        />
                      </div>
                    }
                  >
                    <DialogContent
                      className={classNames(
                        "__wab_instance",
                        sty.dialogContent__cLr7S
                      )}
                      themeResetClass={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"containerPost5"}
                        data-plasmic-override={overrides.containerPost5}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.containerPost5
                        )}
                      >
                        <div
                          data-plasmic-name={"commentsSide5"}
                          data-plasmic-override={overrides.commentsSide5}
                          className={classNames(
                            projectcss.all,
                            sty.commentsSide5
                          )}
                        >
                          <div
                            data-plasmic-name={"comments5"}
                            data-plasmic-override={overrides.comments5}
                            className={classNames(
                              projectcss.all,
                              sty.comments5
                            )}
                          >
                            <div
                              data-plasmic-name={"commentContainer5"}
                              data-plasmic-override={
                                overrides.commentContainer5
                              }
                              className={classNames(
                                projectcss.all,
                                sty.commentContainer5
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__t0M2P)}
                                displayHeight={"30px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"none"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"30px"}
                                loading={"lazy"}
                              />

                              <div
                                data-plasmic-name={"userAndComment5"}
                                data-plasmic-override={
                                  overrides.userAndComment5
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.userAndComment5
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__swMka
                                  )}
                                >
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      sty.link__e1Zn9
                                    )}
                                    platform={"react"}
                                  >
                                    {"Cool  User"}
                                  </PlasmicLink__>
                                  <AntdRate
                                    data-plasmic-name={"rate18"}
                                    data-plasmic-override={overrides.rate18}
                                    allowHalf={true}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.rate18
                                    )}
                                    disabled={true}
                                    onChange={async (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "rate18",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    symbols={
                                      <React.Fragment>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__rRtOy
                                          )}
                                        >
                                          {"1"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ikuvh
                                          )}
                                        >
                                          {"2"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__fvbMv
                                          )}
                                        >
                                          {"3"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ezEf
                                          )}
                                        >
                                          {"4"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___1VaV2
                                          )}
                                        >
                                          {"5"}
                                        </div>
                                      </React.Fragment>
                                    }
                                    value={generateStateValueProp($state, [
                                      "rate18",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__jlroN
                                  )}
                                >
                                  {"Cool great comment"}
                                </div>
                              </div>
                            </div>
                          </div>
                          <AntdRate
                            data-plasmic-name={"rate5"}
                            data-plasmic-override={overrides.rate5}
                            allowHalf={true}
                            className={classNames("__wab_instance", sty.rate5)}
                            onChange={async (...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "rate5",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            symbols={
                              <React.Fragment>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__t7It8
                                  )}
                                >
                                  {"1"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__mdq50
                                  )}
                                >
                                  {"2"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__et9Lw
                                  )}
                                >
                                  {"3"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__p2TeX
                                  )}
                                >
                                  {"4"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__n2EyR
                                  )}
                                >
                                  {"5"}
                                </div>
                              </React.Fragment>
                            }
                            value={generateStateValueProp($state, [
                              "rate5",
                              "value"
                            ])}
                          />

                          <textarea
                            data-plasmic-name={"textarea5"}
                            data-plasmic-override={overrides.textarea5}
                            className={classNames(
                              projectcss.all,
                              projectcss.textarea,
                              sty.textarea5
                            )}
                            onChange={async (...eventArgs) => {
                              (e => {
                                generateStateOnChangeProp($state, [
                                  "textarea5",
                                  "value"
                                ])(e.target.value);
                              }).apply(null, eventArgs);
                            }}
                            placeholder={"Add a comment..."}
                            ref={ref => {
                              $refs["textarea5"] = ref;
                            }}
                            value={
                              generateStateValueProp($state, [
                                "textarea5",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </div>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__s2DR)}
                          displayHeight={"auto"}
                          displayMaxHeight={"400px"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"539px"}
                          loading={"lazy"}
                          src={{
                            src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                            fullWidth: 3200,
                            fullHeight: 2133,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          data-plasmic-name={"userSide5"}
                          data-plasmic-override={overrides.userSide5}
                          className={classNames(projectcss.all, sty.userSide5)}
                        >
                          <div
                            data-plasmic-name={"userAction5"}
                            data-plasmic-override={overrides.userAction5}
                            className={classNames(
                              projectcss.all,
                              sty.userAction5
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__gHuxv)}
                              displayHeight={"40px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"40px"}
                              loading={"lazy"}
                            />

                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__zn8Tc
                              )}
                              platform={"react"}
                            >
                              {"User new"}
                            </PlasmicLink__>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wGo9
                              )}
                            >
                              {"Commented about"}
                            </div>
                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__xzQqa
                              )}
                              platform={"react"}
                            >
                              {"Community user"}
                            </PlasmicLink__>
                            <ReportSvgrepoComSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__uByya
                              )}
                              role={"img"}
                            />

                            <DialogClose
                              className={classNames(
                                "__wab_instance",
                                sty.dialogClose__p22Wx
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__h6F3H
                            )}
                          >
                            {
                              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                            }
                          </div>
                        </div>
                      </Stack__>
                    </DialogContent>
                  </Dialog>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__hrjbx)}>
                  <Dialog
                    data-plasmic-name={"dialogGrid6"}
                    data-plasmic-override={overrides.dialogGrid6}
                    className={classNames("__wab_instance", sty.dialogGrid6)}
                    defaultOpen={false}
                    onOpenChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "dialogGrid6",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "dialogGrid6",
                      "open"
                    ])}
                    themeResetClass={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    triggerSlot={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yr3Q7
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__py0Ex
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__gRuhU)}
                            displayHeight={"30px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"30px"}
                            loading={"lazy"}
                          />

                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link___50V7I
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Community"}
                          </PlasmicLink__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ueqrf
                            )}
                          >
                            {"comment about"}
                          </div>
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__ogLl
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Company//Member"}
                          </PlasmicLink__>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sd8HC
                          )}
                        >
                          {
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                          }
                        </div>
                        <AntdRate
                          data-plasmic-name={"rate19"}
                          data-plasmic-override={overrides.rate19}
                          allowHalf={true}
                          className={classNames("__wab_instance", sty.rate19)}
                          disabled={true}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "rate19",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          symbols={
                            <React.Fragment>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7B1E
                                )}
                              >
                                {"1"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__htoEp
                                )}
                              >
                                {"2"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cIWgz
                                )}
                              >
                                {"3"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rFft8
                                )}
                              >
                                {"4"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yx1Em
                                )}
                              >
                                {"5"}
                              </div>
                            </React.Fragment>
                          }
                          value={generateStateValueProp($state, [
                            "rate19",
                            "value"
                          ])}
                        />
                      </div>
                    }
                  >
                    <DialogContent
                      className={classNames(
                        "__wab_instance",
                        sty.dialogContent__yS64
                      )}
                      themeResetClass={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"containerPost6"}
                        data-plasmic-override={overrides.containerPost6}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.containerPost6
                        )}
                      >
                        <div
                          data-plasmic-name={"commentsSide6"}
                          data-plasmic-override={overrides.commentsSide6}
                          className={classNames(
                            projectcss.all,
                            sty.commentsSide6
                          )}
                        >
                          <div
                            data-plasmic-name={"comments6"}
                            data-plasmic-override={overrides.comments6}
                            className={classNames(
                              projectcss.all,
                              sty.comments6
                            )}
                          >
                            <div
                              data-plasmic-name={"commentContainer6"}
                              data-plasmic-override={
                                overrides.commentContainer6
                              }
                              className={classNames(
                                projectcss.all,
                                sty.commentContainer6
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__nzaUp)}
                                displayHeight={"30px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"none"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"30px"}
                                loading={"lazy"}
                              />

                              <div
                                data-plasmic-name={"userAndComment6"}
                                data-plasmic-override={
                                  overrides.userAndComment6
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.userAndComment6
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xR6Kh
                                  )}
                                >
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      sty.link___1AJoV
                                    )}
                                    platform={"react"}
                                  >
                                    {"Cool  User"}
                                  </PlasmicLink__>
                                  <AntdRate
                                    data-plasmic-name={"rate20"}
                                    data-plasmic-override={overrides.rate20}
                                    allowHalf={true}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.rate20
                                    )}
                                    disabled={true}
                                    onChange={async (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "rate20",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    symbols={
                                      <React.Fragment>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__h6Dz0
                                          )}
                                        >
                                          {"1"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__it20
                                          )}
                                        >
                                          {"2"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__viJoH
                                          )}
                                        >
                                          {"3"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___95XzM
                                          )}
                                        >
                                          {"4"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__wgGgl
                                          )}
                                        >
                                          {"5"}
                                        </div>
                                      </React.Fragment>
                                    }
                                    value={generateStateValueProp($state, [
                                      "rate20",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___87V6T
                                  )}
                                >
                                  {"Cool great comment"}
                                </div>
                              </div>
                            </div>
                          </div>
                          <AntdRate
                            data-plasmic-name={"rate6"}
                            data-plasmic-override={overrides.rate6}
                            allowHalf={true}
                            className={classNames("__wab_instance", sty.rate6)}
                            onChange={async (...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "rate6",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            symbols={
                              <React.Fragment>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hYchn
                                  )}
                                >
                                  {"1"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ds4S5
                                  )}
                                >
                                  {"2"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__po5Yt
                                  )}
                                >
                                  {"3"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__kWSG
                                  )}
                                >
                                  {"4"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8Orjr
                                  )}
                                >
                                  {"5"}
                                </div>
                              </React.Fragment>
                            }
                            value={generateStateValueProp($state, [
                              "rate6",
                              "value"
                            ])}
                          />

                          <textarea
                            data-plasmic-name={"textarea6"}
                            data-plasmic-override={overrides.textarea6}
                            className={classNames(
                              projectcss.all,
                              projectcss.textarea,
                              sty.textarea6
                            )}
                            onChange={async (...eventArgs) => {
                              (e => {
                                generateStateOnChangeProp($state, [
                                  "textarea6",
                                  "value"
                                ])(e.target.value);
                              }).apply(null, eventArgs);
                            }}
                            placeholder={"Add a comment..."}
                            ref={ref => {
                              $refs["textarea6"] = ref;
                            }}
                            value={
                              generateStateValueProp($state, [
                                "textarea6",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </div>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__r4Ypb)}
                          displayHeight={"auto"}
                          displayMaxHeight={"400px"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"539px"}
                          loading={"lazy"}
                          src={{
                            src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                            fullWidth: 3200,
                            fullHeight: 2133,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          data-plasmic-name={"userSide6"}
                          data-plasmic-override={overrides.userSide6}
                          className={classNames(projectcss.all, sty.userSide6)}
                        >
                          <div
                            data-plasmic-name={"userAction6"}
                            data-plasmic-override={overrides.userAction6}
                            className={classNames(
                              projectcss.all,
                              sty.userAction6
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__zTkkL)}
                              displayHeight={"40px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"40px"}
                              loading={"lazy"}
                            />

                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__dfSVf
                              )}
                              platform={"react"}
                            >
                              {"User new"}
                            </PlasmicLink__>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rNnzs
                              )}
                            >
                              {"Commented about"}
                            </div>
                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__wcKhm
                              )}
                              platform={"react"}
                            >
                              {"Community user"}
                            </PlasmicLink__>
                            <ReportSvgrepoComSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__bv6AQ
                              )}
                              role={"img"}
                            />

                            <DialogClose
                              className={classNames(
                                "__wab_instance",
                                sty.dialogClose__fr1S
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__umvJ
                            )}
                          >
                            {
                              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                            }
                          </div>
                        </div>
                      </Stack__>
                    </DialogContent>
                  </Dialog>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__vHuN6)}>
                  <Dialog
                    data-plasmic-name={"dialogGrid7"}
                    data-plasmic-override={overrides.dialogGrid7}
                    className={classNames("__wab_instance", sty.dialogGrid7)}
                    defaultOpen={false}
                    onOpenChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "dialogGrid7",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "dialogGrid7",
                      "open"
                    ])}
                    themeResetClass={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    triggerSlot={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___4Q3B
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zr7Bj
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img___73YPm)}
                            displayHeight={"30px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"30px"}
                            loading={"lazy"}
                          />

                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__qmtLr
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Community"}
                          </PlasmicLink__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__toQuv
                            )}
                          >
                            {"comment about"}
                          </div>
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__iYza6
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Company//Member"}
                          </PlasmicLink__>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__crC
                          )}
                        >
                          {
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                          }
                        </div>
                        <AntdRate
                          data-plasmic-name={"rate21"}
                          data-plasmic-override={overrides.rate21}
                          allowHalf={true}
                          className={classNames("__wab_instance", sty.rate21)}
                          disabled={true}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "rate21",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          symbols={
                            <React.Fragment>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mUu7V
                                )}
                              >
                                {"1"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xtK7F
                                )}
                              >
                                {"2"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gLK0
                                )}
                              >
                                {"3"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___8L8T
                                )}
                              >
                                {"4"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fz26F
                                )}
                              >
                                {"5"}
                              </div>
                            </React.Fragment>
                          }
                          value={generateStateValueProp($state, [
                            "rate21",
                            "value"
                          ])}
                        />
                      </div>
                    }
                  >
                    <DialogContent
                      className={classNames(
                        "__wab_instance",
                        sty.dialogContent__jvKyW
                      )}
                      themeResetClass={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"containerPost7"}
                        data-plasmic-override={overrides.containerPost7}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.containerPost7
                        )}
                      >
                        <div
                          data-plasmic-name={"commentsSide7"}
                          data-plasmic-override={overrides.commentsSide7}
                          className={classNames(
                            projectcss.all,
                            sty.commentsSide7
                          )}
                        >
                          <div
                            data-plasmic-name={"comments7"}
                            data-plasmic-override={overrides.comments7}
                            className={classNames(
                              projectcss.all,
                              sty.comments7
                            )}
                          >
                            <div
                              data-plasmic-name={"commentContainer7"}
                              data-plasmic-override={
                                overrides.commentContainer7
                              }
                              className={classNames(
                                projectcss.all,
                                sty.commentContainer7
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__bN1Ud)}
                                displayHeight={"30px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"none"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"30px"}
                                loading={"lazy"}
                              />

                              <div
                                data-plasmic-name={"userAndComment7"}
                                data-plasmic-override={
                                  overrides.userAndComment7
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.userAndComment7
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__szoGo
                                  )}
                                >
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      sty.link___9PowD
                                    )}
                                    platform={"react"}
                                  >
                                    {"Cool  User"}
                                  </PlasmicLink__>
                                  <AntdRate
                                    data-plasmic-name={"rate22"}
                                    data-plasmic-override={overrides.rate22}
                                    allowHalf={true}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.rate22
                                    )}
                                    disabled={true}
                                    onChange={async (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "rate22",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    symbols={
                                      <React.Fragment>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__qOaB
                                          )}
                                        >
                                          {"1"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___8Q1CQ
                                          )}
                                        >
                                          {"2"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__txbvx
                                          )}
                                        >
                                          {"3"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___4P0Mp
                                          )}
                                        >
                                          {"4"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__nWyFj
                                          )}
                                        >
                                          {"5"}
                                        </div>
                                      </React.Fragment>
                                    }
                                    value={generateStateValueProp($state, [
                                      "rate22",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__svdtl
                                  )}
                                >
                                  {"Cool great comment"}
                                </div>
                              </div>
                            </div>
                          </div>
                          <AntdRate
                            data-plasmic-name={"rate7"}
                            data-plasmic-override={overrides.rate7}
                            allowHalf={true}
                            className={classNames("__wab_instance", sty.rate7)}
                            onChange={async (...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "rate7",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            symbols={
                              <React.Fragment>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___4RMqf
                                  )}
                                >
                                  {"1"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__jgyg7
                                  )}
                                >
                                  {"2"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qKho0
                                  )}
                                >
                                  {"3"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__eFa46
                                  )}
                                >
                                  {"4"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gpevu
                                  )}
                                >
                                  {"5"}
                                </div>
                              </React.Fragment>
                            }
                            value={generateStateValueProp($state, [
                              "rate7",
                              "value"
                            ])}
                          />

                          <textarea
                            data-plasmic-name={"textarea7"}
                            data-plasmic-override={overrides.textarea7}
                            className={classNames(
                              projectcss.all,
                              projectcss.textarea,
                              sty.textarea7
                            )}
                            onChange={async (...eventArgs) => {
                              (e => {
                                generateStateOnChangeProp($state, [
                                  "textarea7",
                                  "value"
                                ])(e.target.value);
                              }).apply(null, eventArgs);
                            }}
                            placeholder={"Add a comment..."}
                            ref={ref => {
                              $refs["textarea7"] = ref;
                            }}
                            value={
                              generateStateValueProp($state, [
                                "textarea7",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </div>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___4HkFa)}
                          displayHeight={"auto"}
                          displayMaxHeight={"400px"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"539px"}
                          loading={"lazy"}
                          src={{
                            src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                            fullWidth: 3200,
                            fullHeight: 2133,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          data-plasmic-name={"userSide7"}
                          data-plasmic-override={overrides.userSide7}
                          className={classNames(projectcss.all, sty.userSide7)}
                        >
                          <div
                            data-plasmic-name={"userAction7"}
                            data-plasmic-override={overrides.userAction7}
                            className={classNames(
                              projectcss.all,
                              sty.userAction7
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___2S9Tc)}
                              displayHeight={"40px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"40px"}
                              loading={"lazy"}
                            />

                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link___20UKh
                              )}
                              platform={"react"}
                            >
                              {"User new"}
                            </PlasmicLink__>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hAkV
                              )}
                            >
                              {"Commented about"}
                            </div>
                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__frEp6
                              )}
                              platform={"react"}
                            >
                              {"Community user"}
                            </PlasmicLink__>
                            <ReportSvgrepoComSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__immH
                              )}
                              role={"img"}
                            />

                            <DialogClose
                              className={classNames(
                                "__wab_instance",
                                sty.dialogClose__pfgRg
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rx24J
                            )}
                          >
                            {
                              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                            }
                          </div>
                        </div>
                      </Stack__>
                    </DialogContent>
                  </Dialog>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__fIwyf)}>
                  <Dialog
                    data-plasmic-name={"dialogGrid8"}
                    data-plasmic-override={overrides.dialogGrid8}
                    className={classNames("__wab_instance", sty.dialogGrid8)}
                    defaultOpen={false}
                    onOpenChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "dialogGrid8",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "dialogGrid8",
                      "open"
                    ])}
                    themeResetClass={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    triggerSlot={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__w2Vn1
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fa21I
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__iJOsr)}
                            displayHeight={"30px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"30px"}
                            loading={"lazy"}
                          />

                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__wEsyA
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Community"}
                          </PlasmicLink__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3V6J
                            )}
                          >
                            {"comment about"}
                          </div>
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__hm15M
                            )}
                            href={"https://www.plasmic.app/"}
                            platform={"react"}
                          >
                            {"Company//Member"}
                          </PlasmicLink__>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mh5Wp
                          )}
                        >
                          {
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                          }
                        </div>
                        <AntdRate
                          data-plasmic-name={"rate23"}
                          data-plasmic-override={overrides.rate23}
                          allowHalf={true}
                          className={classNames("__wab_instance", sty.rate23)}
                          disabled={true}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "rate23",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          symbols={
                            <React.Fragment>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gRdA9
                                )}
                              >
                                {"1"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__v7HGt
                                )}
                              >
                                {"2"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qKyMg
                                )}
                              >
                                {"3"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lev0K
                                )}
                              >
                                {"4"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___9B68N
                                )}
                              >
                                {"5"}
                              </div>
                            </React.Fragment>
                          }
                          value={generateStateValueProp($state, [
                            "rate23",
                            "value"
                          ])}
                        />
                      </div>
                    }
                  >
                    <DialogContent
                      className={classNames(
                        "__wab_instance",
                        sty.dialogContent__jexFq
                      )}
                      themeResetClass={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"containerPost8"}
                        data-plasmic-override={overrides.containerPost8}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.containerPost8
                        )}
                      >
                        <div
                          data-plasmic-name={"commentsSide8"}
                          data-plasmic-override={overrides.commentsSide8}
                          className={classNames(
                            projectcss.all,
                            sty.commentsSide8
                          )}
                        >
                          <div
                            data-plasmic-name={"comments8"}
                            data-plasmic-override={overrides.comments8}
                            className={classNames(
                              projectcss.all,
                              sty.comments8
                            )}
                          >
                            <div
                              data-plasmic-name={"commentContainer8"}
                              data-plasmic-override={
                                overrides.commentContainer8
                              }
                              className={classNames(
                                projectcss.all,
                                sty.commentContainer8
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__nEQj6)}
                                displayHeight={"30px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"none"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"30px"}
                                loading={"lazy"}
                              />

                              <div
                                data-plasmic-name={"userAndComment8"}
                                data-plasmic-override={
                                  overrides.userAndComment8
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.userAndComment8
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ss5Yz
                                  )}
                                >
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      sty.link__do4DN
                                    )}
                                    platform={"react"}
                                  >
                                    {"Cool  User"}
                                  </PlasmicLink__>
                                  <AntdRate
                                    data-plasmic-name={"rate24"}
                                    data-plasmic-override={overrides.rate24}
                                    allowHalf={true}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.rate24
                                    )}
                                    disabled={true}
                                    onChange={async (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "rate24",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    symbols={
                                      <React.Fragment>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__gNhn8
                                          )}
                                        >
                                          {"1"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ynME
                                          )}
                                        >
                                          {"2"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__o7Dsy
                                          )}
                                        >
                                          {"3"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___7Iy8I
                                          )}
                                        >
                                          {"4"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__spO3L
                                          )}
                                        >
                                          {"5"}
                                        </div>
                                      </React.Fragment>
                                    }
                                    value={generateStateValueProp($state, [
                                      "rate24",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__y9Am
                                  )}
                                >
                                  {"Cool great comment"}
                                </div>
                              </div>
                            </div>
                          </div>
                          <AntdRate
                            data-plasmic-name={"rate8"}
                            data-plasmic-override={overrides.rate8}
                            allowHalf={true}
                            className={classNames("__wab_instance", sty.rate8)}
                            onChange={async (...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "rate8",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            symbols={
                              <React.Fragment>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__tXhfy
                                  )}
                                >
                                  {"1"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___0SAux
                                  )}
                                >
                                  {"2"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__cr1Ld
                                  )}
                                >
                                  {"3"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___14PE
                                  )}
                                >
                                  {"4"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__rCJi
                                  )}
                                >
                                  {"5"}
                                </div>
                              </React.Fragment>
                            }
                            value={generateStateValueProp($state, [
                              "rate8",
                              "value"
                            ])}
                          />

                          <textarea
                            data-plasmic-name={"textarea8"}
                            data-plasmic-override={overrides.textarea8}
                            className={classNames(
                              projectcss.all,
                              projectcss.textarea,
                              sty.textarea8
                            )}
                            onChange={async (...eventArgs) => {
                              (e => {
                                generateStateOnChangeProp($state, [
                                  "textarea8",
                                  "value"
                                ])(e.target.value);
                              }).apply(null, eventArgs);
                            }}
                            placeholder={"Add a comment..."}
                            ref={ref => {
                              $refs["textarea8"] = ref;
                            }}
                            value={
                              generateStateValueProp($state, [
                                "textarea8",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </div>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__q8Atk)}
                          displayHeight={"auto"}
                          displayMaxHeight={"400px"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"539px"}
                          loading={"lazy"}
                          src={{
                            src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                            fullWidth: 3200,
                            fullHeight: 2133,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          data-plasmic-name={"userSide8"}
                          data-plasmic-override={overrides.userSide8}
                          className={classNames(projectcss.all, sty.userSide8)}
                        >
                          <div
                            data-plasmic-name={"userAction8"}
                            data-plasmic-override={overrides.userAction8}
                            className={classNames(
                              projectcss.all,
                              sty.userAction8
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__uneC7)}
                              displayHeight={"40px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"40px"}
                              loading={"lazy"}
                            />

                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__uyFx8
                              )}
                              platform={"react"}
                            >
                              {"User new"}
                            </PlasmicLink__>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___48Tnk
                              )}
                            >
                              {"Commented about"}
                            </div>
                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__hDsQ4
                              )}
                              platform={"react"}
                            >
                              {"Community user"}
                            </PlasmicLink__>
                            <ReportSvgrepoComSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__njuwx
                              )}
                              role={"img"}
                            />

                            <DialogClose
                              className={classNames(
                                "__wab_instance",
                                sty.dialogClose__bbNdh
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fQveC
                            )}
                          >
                            {
                              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                            }
                          </div>
                        </div>
                      </Stack__>
                    </DialogContent>
                  </Dialog>
                </div>
              </SliderWrapper>
            );
          })()}
        </div>
        <div
          data-plasmic-name={"container6"}
          data-plasmic-override={overrides.container6}
          className={classNames(projectcss.all, sty.container6)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___3VJzx
            )}
          >
            {"Trainings"}
          </div>
          {(() => {
            const child$Props = {
              arrows: true,
              beforeChange: async (...eventArgs) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel3", "currentSlide"],
                  SliderWrapper_Helpers
                ).apply(null, eventArgs);
              },
              centerMode: false,
              className: classNames("__wab_instance", sty.sliderCarousel3),
              infinite: false,
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel3",
                "currentSlide"
              ]),
              ref: ref => {
                $refs["sliderCarousel3"] = ref;
              },
              rows: 3,
              sliderScopeClassName: sty["sliderCarousel3__slider"],
              slidesPerRow: 1,
              slidesToScroll: 1,
              swipeToSlide: true,
              vertical: true
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel3.currentSlide"
                }
              ],

              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );
            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel3"}
                data-plasmic-override={overrides.sliderCarousel3}
                {...child$Props}
              >
                <div className={classNames(projectcss.all, sty.freeBox__bs0LW)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xdC3H)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__h18No)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___4VLfl)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"30px"}
                        loading={"lazy"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gIkzK
                        )}
                      >
                        {"User"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8Fg4H
                      )}
                    >
                      {"Doing graduation until"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oM8Dj
                      )}
                    >
                      {"00/2000"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Lsmx
                      )}
                    >
                      {"in"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h1DTo
                      )}
                    >
                      {"University"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__wEsBi)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zLOdN)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vaIcg)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__io05X)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"30px"}
                        loading={"lazy"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mmbxk
                        )}
                      >
                        {"User"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__psbfc
                      )}
                    >
                      {"Doing graduation until"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wsH3Q
                      )}
                    >
                      {"00/2000"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b1MZt
                      )}
                    >
                      {"in"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yqw4S
                      )}
                    >
                      {"University"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__iBT8)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__odPvK)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cprRi)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__rAmK)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"30px"}
                        loading={"lazy"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8HDRl
                        )}
                      >
                        {"User"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cgRZl
                      )}
                    >
                      {"Doing graduation until"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1Alth
                      )}
                    >
                      {"00/2000"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lyYyl
                      )}
                    >
                      {"in"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3SfNw
                      )}
                    >
                      {"University"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__xWbYo)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cd6H3)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yxFwV)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__j1Pvq)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"30px"}
                        loading={"lazy"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4YWsO
                        )}
                      >
                        {"User"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6Mt3S
                      )}
                    >
                      {"Doing graduation until"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cqGfu
                      )}
                    >
                      {"00/2000"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yoKc
                      )}
                    >
                      {"in"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zn7Ba
                      )}
                    >
                      {"University"}
                    </div>
                  </div>
                </div>
              </SliderWrapper>
            );
          })()}
          <div className={classNames(projectcss.all, sty.freeBox__uHykZ)} />
        </div>
        <div
          data-plasmic-name={"container7"}
          data-plasmic-override={overrides.container7}
          className={classNames(projectcss.all, sty.container7)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uoihX
            )}
          >
            {"Expert"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__sgGfy)}>
            <div className={classNames(projectcss.all, sty.freeBox___5BYVu)}>
              <AntdPopover
                data-plasmic-name={"popover"}
                data-plasmic-override={overrides.popover}
                arrow={true}
                className={classNames("__wab_instance", sty.popover)}
                content={
                  <React.Fragment>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pnN8K)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u5OIl
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__t79St
                        )}
                      >
                        {"Brand Strategist"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mSt5I)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kgIi5
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sRUh
                        )}
                      >
                        {"Creative Director"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bC4Oi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bChIx
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u9LTi
                        )}
                      >
                        {"Art Director"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5PsoW
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__soSSk
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__svACg
                        )}
                      >
                        {"Graphic Designer"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ysGwx)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oh5Bl
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pPcjd
                        )}
                      >
                        {"UX/UI Director"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ckRhl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q11Re
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sDfvL
                        )}
                      >
                        {"Copywriter"}
                      </div>
                    </div>
                  </React.Fragment>
                }
                contentText={"Popover contents"}
                defaultOpen={false}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, ["popover", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["popover", "open"])}
                overlayClassName={classNames({
                  [sty["pcls_8RX8HvLJnX4x"]]: true
                })}
                popoverScopeClassName={sty["popover__popover"]}
                title={"Professionals:"}
              >
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__aiRi1
                  )}
                  color={"sand"}
                  link={`/affiliate-homepage`}
                  shape={"rounded"}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__u1E
                    )}
                  >
                    {"Brand and Visual Identity Development"}
                  </div>
                </LoginButton>
              </AntdPopover>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ktP3T)}>
              <AntdPopover
                data-plasmic-name={"popover3"}
                data-plasmic-override={overrides.popover3}
                arrow={true}
                className={classNames("__wab_instance", sty.popover3)}
                content={
                  <React.Fragment>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vp1Rb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kHxHn
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tylp4
                        )}
                      >
                        {"Brand Strategist"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fildo)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jqIx
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5Objk
                        )}
                      >
                        {"Creative Director"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7GaHb
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0ZAMb
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vm18N
                        )}
                      >
                        {"Art Director"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8Ne0L
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tkrtt
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__okIw5
                        )}
                      >
                        {"Graphic Designer"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vaVY)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sjgy8
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n5Tr
                        )}
                      >
                        {"UX/UI Director"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___77BuV
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rOz80
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4JRri
                        )}
                      >
                        {"Copywriter"}
                      </div>
                    </div>
                  </React.Fragment>
                }
                contentText={"Popover contents"}
                defaultOpen={false}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, ["popover3", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["popover3", "open"])}
                overlayClassName={classNames({
                  [sty["pcls_ocF5ayp2lsj6"]]: true
                })}
                popoverScopeClassName={sty["popover3__popover"]}
                title={"Professionals:"}
              >
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__vdv3F
                  )}
                  color={"sand"}
                  link={`/affiliate-homepage`}
                  shape={"rounded"}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zbQdh
                    )}
                  >
                    {"Brand and Visual Identity Development"}
                  </div>
                </LoginButton>
              </AntdPopover>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__vtHkf)}>
              <AntdPopover
                data-plasmic-name={"popover4"}
                data-plasmic-override={overrides.popover4}
                arrow={true}
                className={classNames("__wab_instance", sty.popover4)}
                content={
                  <React.Fragment>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__o8Hw8)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__egIn6
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tXu7J
                        )}
                      >
                        {"Brand Strategist"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vXcu1)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zoxmz
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__folM9
                        )}
                      >
                        {"Creative Director"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ceV1P)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cwFeh
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ljLsp
                        )}
                      >
                        {"Art Director"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hvUw)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__j2O95
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sbRg1
                        )}
                      >
                        {"Graphic Designer"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__aj3DK)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ddlc8
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rRsi6
                        )}
                      >
                        {"UX/UI Director"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tZiRw)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2KJ86
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wkG5Y
                        )}
                      >
                        {"Copywriter"}
                      </div>
                    </div>
                  </React.Fragment>
                }
                contentText={"Popover contents"}
                defaultOpen={false}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, ["popover4", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["popover4", "open"])}
                overlayClassName={classNames({
                  [sty["pcls_S7VPnq6JyTz3"]]: true
                })}
                popoverScopeClassName={sty["popover4__popover"]}
                title={"Professionals:"}
              >
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__qeXvo
                  )}
                  color={"sand"}
                  link={`/affiliate-homepage`}
                  shape={"rounded"}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cEMuN
                    )}
                  >
                    {"Brand and Visual Identity Development"}
                  </div>
                </LoginButton>
              </AntdPopover>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__gpYjI)}>
              <AntdPopover
                data-plasmic-name={"popover2"}
                data-plasmic-override={overrides.popover2}
                arrow={true}
                className={classNames("__wab_instance", sty.popover2)}
                content={
                  <React.Fragment>
                    <div
                      className={classNames(projectcss.all, sty.freeBox___0AiB)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ocEEd
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___75FDz
                        )}
                      >
                        {"PPC Specialist"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox___0OSb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Cy7V
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1BTg
                        )}
                      >
                        {"Digital Marketing Manager"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1PgpI
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__j1Lwm
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lmEr6
                        )}
                      >
                        {"SEO Specialist"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vrpjm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vvNz
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__opBAo
                        )}
                      >
                        {"Marketing Analyst"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fa1Ym)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__spqO7
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7Hqvh
                        )}
                      >
                        {"Data Analyst"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bDyr1)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jdz0
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3Ymmp
                        )}
                      >
                        {"Marketing Automation Specialist"}
                      </div>
                    </div>
                  </React.Fragment>
                }
                contentText={"Popover contents"}
                defaultOpen={false}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, ["popover2", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["popover2", "open"])}
                overlayClassName={classNames({
                  [sty["pcls_Hf37BkU43f_B"]]: true
                })}
                popoverScopeClassName={sty["popover2__popover"]}
                title={"Professionals:"}
              >
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__fKVpX
                  )}
                  color={"sand"}
                  link={`/affiliate-homepage`}
                  shape={"rounded"}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zyGq
                    )}
                  >
                    {"Performance Campaign Management Capability"}
                  </div>
                </LoginButton>
              </AntdPopover>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__sGunY)}>
              <AntdPopover
                data-plasmic-name={"popover5"}
                data-plasmic-override={overrides.popover5}
                arrow={true}
                className={classNames("__wab_instance", sty.popover5)}
                content={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___79Etu
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tZrz
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__olUji
                        )}
                      >
                        {"PPC Specialist"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8SAkH
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aZv
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ilUqe
                        )}
                      >
                        {"Digital Marketing Manager"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tG1Nv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3BiCz
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sFeB
                        )}
                      >
                        {"SEO Specialist"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0NZms
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d1K7U
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tcxZ3
                        )}
                      >
                        {"Marketing Analyst"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__h8F7I)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__myUh
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___66HkW
                        )}
                      >
                        {"Data Analyst"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__i5Uuv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d5Qum
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qzNDu
                        )}
                      >
                        {"Marketing Automation Specialist"}
                      </div>
                    </div>
                  </React.Fragment>
                }
                contentText={"Popover contents"}
                defaultOpen={false}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, ["popover5", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["popover5", "open"])}
                overlayClassName={classNames({
                  [sty["pcls_nT4PfZICHhUn"]]: true
                })}
                popoverScopeClassName={sty["popover5__popover"]}
                title={"Professionals:"}
              >
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__ghcJ
                  )}
                  color={"sand"}
                  link={`/affiliate-homepage`}
                  shape={"rounded"}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hM0A5
                    )}
                  >
                    {"Performance Campaign Management Capability"}
                  </div>
                </LoginButton>
              </AntdPopover>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___801A1)}>
              <AntdPopover
                data-plasmic-name={"popover6"}
                data-plasmic-override={overrides.popover6}
                arrow={true}
                className={classNames("__wab_instance", sty.popover6)}
                content={
                  <React.Fragment>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__i0QIl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fcus4
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__boUw4
                        )}
                      >
                        {"PPC Specialist"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mR2Y2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rpNdb
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tezPz
                        )}
                      >
                        {"Digital Marketing Manager"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dKFk0)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___843Lu
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zzTxB
                        )}
                      >
                        {"SEO Specialist"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pSo3T)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__c9Jw7
                        )}
                      >
                        {"\u2611"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jzBvn
                        )}
                      >
                        {"Marketing Analyst"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nYsc3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y63Uw
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__s87BN
                        )}
                      >
                        {"Data Analyst"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qrGvf)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xa5Zg
                        )}
                      >
                        {"\u2610"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cvYiZ
                        )}
                      >
                        {"Marketing Automation Specialist"}
                      </div>
                    </div>
                  </React.Fragment>
                }
                contentText={"Popover contents"}
                defaultOpen={false}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, ["popover6", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["popover6", "open"])}
                overlayClassName={classNames({
                  [sty["pcls_AOHo7zRr320Y"]]: true
                })}
                popoverScopeClassName={sty["popover6__popover"]}
                title={"Professionals:"}
              >
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__iNoDk
                  )}
                  color={"sand"}
                  link={`/affiliate-homepage`}
                  shape={"rounded"}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jKwKw
                    )}
                  >
                    {"Performance Campaign Management Capability"}
                  </div>
                </LoginButton>
              </AntdPopover>
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"container10"}
          data-plasmic-override={overrides.container10}
          className={classNames(projectcss.all, sty.container10)}
        >
          {(() => {
            const child$Props = {
              arrows: false,
              autoplay: true,
              autoplaySpeed: 0,
              beforeChange: async (...eventArgs) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel2", "currentSlide"],
                  SliderWrapper_Helpers
                ).apply(null, eventArgs);
              },
              centerMode: true,
              className: classNames("__wab_instance", sty.sliderCarousel2),
              cssEase: "linear",
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel2",
                "currentSlide"
              ]),
              ref: ref => {
                $refs["sliderCarousel2"] = ref;
              },
              sliderScopeClassName: sty["sliderCarousel2__slider"],
              slidesPerRow: 5,
              speed: 12000
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel2.currentSlide"
                }
              ],

              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );
            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel2"}
                data-plasmic-override={overrides.sliderCarousel2}
                {...child$Props}
              >
                <div className={classNames(projectcss.all, sty.freeBox__jDKd)}>
                  <LoginButton
                    className={classNames(
                      "__wab_instance",
                      sty.loginButton__lNtPx
                    )}
                    color={"softSand"}
                    shape={"sharp"}
                    showStartIcon={true}
                    startIcon={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__xldn8)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"30px"}
                        loading={"lazy"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__p7QOs
                      )}
                    >
                      {"Company"}
                    </div>
                  </LoginButton>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___2Dic7)}
                >
                  <LoginButton
                    className={classNames(
                      "__wab_instance",
                      sty.loginButton__kAmr
                    )}
                    color={"softSand"}
                    shape={"sharp"}
                    showStartIcon={true}
                    startIcon={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__d4AsQ)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"30px"}
                        loading={"lazy"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mSlhc
                      )}
                    >
                      {"Company"}
                    </div>
                  </LoginButton>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__a9FAo)}>
                  <LoginButton
                    className={classNames(
                      "__wab_instance",
                      sty.loginButton__n9Ehv
                    )}
                    color={"softSand"}
                    shape={"sharp"}
                    showStartIcon={true}
                    startIcon={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__srfmw)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"30px"}
                        loading={"lazy"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__p6HU
                      )}
                    >
                      {"Company"}
                    </div>
                  </LoginButton>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__qGoQr)}>
                  <LoginButton
                    className={classNames(
                      "__wab_instance",
                      sty.loginButton__vkIm7
                    )}
                    color={"softSand"}
                    shape={"sharp"}
                    showStartIcon={true}
                    startIcon={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__qPdQz)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"30px"}
                        loading={"lazy"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ofVqt
                      )}
                    >
                      {"Company"}
                    </div>
                  </LoginButton>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__p3LVn)}>
                  <LoginButton
                    className={classNames(
                      "__wab_instance",
                      sty.loginButton__gQ0Cv
                    )}
                    color={"softSand"}
                    shape={"sharp"}
                    showStartIcon={true}
                    startIcon={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__e3Mbe)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"30px"}
                        loading={"lazy"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tYm41
                      )}
                    >
                      {"Company"}
                    </div>
                  </LoginButton>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__eDlea)}>
                  <LoginButton
                    className={classNames(
                      "__wab_instance",
                      sty.loginButton__yDrKh
                    )}
                    color={"softSand"}
                    shape={"sharp"}
                    showStartIcon={true}
                    startIcon={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__z8J5N)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"30px"}
                        loading={"lazy"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fYuYe
                      )}
                    >
                      {"Company"}
                    </div>
                  </LoginButton>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___1OIg4)}
                >
                  <LoginButton
                    className={classNames(
                      "__wab_instance",
                      sty.loginButton__bGHyT
                    )}
                    color={"softSand"}
                    shape={"sharp"}
                    showStartIcon={true}
                    startIcon={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___9XbEr)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"30px"}
                        loading={"lazy"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h4K3J
                      )}
                    >
                      {"Company"}
                    </div>
                  </LoginButton>
                </div>
              </SliderWrapper>
            );
          })()}
        </div>
        <div
          data-plasmic-name={"container8"}
          data-plasmic-override={overrides.container8}
          className={classNames(projectcss.all, sty.container8)}
        >
          <YouTube
            data-plasmic-name={"youTube"}
            data-plasmic-override={overrides.youTube}
            className={classNames("__wab_instance", sty.youTube)}
            videoId={"R6MeLqRQzYw"}
          />

          <div className={classNames(projectcss.all, sty.freeBox__tzJ9Y)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ar4Ic
              )}
            >
              {"How we work"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cvjCy
              )}
            >
              {
                "Our differential: Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
              }
            </div>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___5OPmU
              )}
              href={"https://www.plasmic.app/"}
              platform={"react"}
            >
              {"Some link text"}
            </PlasmicLink__>
          </div>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__fIwgl
          )}
        >
          {"Community"}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "topBar",
    "navigationBar",
    "account",
    "button",
    "container1",
    "htmlVideo",
    "container3",
    "sliderCarousel",
    "container5",
    "sliderCarousel4",
    "dialogGrid",
    "rate9",
    "containerPost",
    "commentsSide",
    "comments",
    "commentContainer",
    "userAndComment",
    "rate11",
    "rate",
    "textarea",
    "userSide",
    "userAction",
    "dialogGrid2",
    "rate10",
    "containerPost2",
    "commentsSide2",
    "comments2",
    "commentContainer2",
    "userAndComment2",
    "rate12",
    "rate2",
    "textarea2",
    "userSide2",
    "userAction2",
    "dialogGrid3",
    "rate13",
    "containerPost3",
    "commentsSide3",
    "comments3",
    "commentContainer3",
    "userAndComment3",
    "rate14",
    "rate3",
    "textarea3",
    "userSide3",
    "userAction3",
    "dialogGrid4",
    "rate15",
    "containerPost4",
    "commentsSide4",
    "comments4",
    "commentContainer4",
    "userAndComment4",
    "rate16",
    "rate4",
    "textarea4",
    "userSide4",
    "userAction4",
    "container9",
    "sliderCarousel5",
    "dialogGrid5",
    "rate17",
    "containerPost5",
    "commentsSide5",
    "comments5",
    "commentContainer5",
    "userAndComment5",
    "rate18",
    "rate5",
    "textarea5",
    "userSide5",
    "userAction5",
    "dialogGrid6",
    "rate19",
    "containerPost6",
    "commentsSide6",
    "comments6",
    "commentContainer6",
    "userAndComment6",
    "rate20",
    "rate6",
    "textarea6",
    "userSide6",
    "userAction6",
    "dialogGrid7",
    "rate21",
    "containerPost7",
    "commentsSide7",
    "comments7",
    "commentContainer7",
    "userAndComment7",
    "rate22",
    "rate7",
    "textarea7",
    "userSide7",
    "userAction7",
    "dialogGrid8",
    "rate23",
    "containerPost8",
    "commentsSide8",
    "comments8",
    "commentContainer8",
    "userAndComment8",
    "rate24",
    "rate8",
    "textarea8",
    "userSide8",
    "userAction8",
    "container6",
    "sliderCarousel3",
    "container7",
    "popover",
    "popover3",
    "popover4",
    "popover2",
    "popover5",
    "popover6",
    "container10",
    "sliderCarousel2",
    "container8",
    "youTube"
  ],

  topBar: ["topBar", "navigationBar", "account", "button"],
  navigationBar: ["navigationBar"],
  account: ["account", "button"],
  button: ["button"],
  container1: ["container1", "htmlVideo"],
  htmlVideo: ["htmlVideo"],
  container3: ["container3", "sliderCarousel"],
  sliderCarousel: ["sliderCarousel"],
  container5: [
    "container5",
    "sliderCarousel4",
    "dialogGrid",
    "rate9",
    "containerPost",
    "commentsSide",
    "comments",
    "commentContainer",
    "userAndComment",
    "rate11",
    "rate",
    "textarea",
    "userSide",
    "userAction",
    "dialogGrid2",
    "rate10",
    "containerPost2",
    "commentsSide2",
    "comments2",
    "commentContainer2",
    "userAndComment2",
    "rate12",
    "rate2",
    "textarea2",
    "userSide2",
    "userAction2",
    "dialogGrid3",
    "rate13",
    "containerPost3",
    "commentsSide3",
    "comments3",
    "commentContainer3",
    "userAndComment3",
    "rate14",
    "rate3",
    "textarea3",
    "userSide3",
    "userAction3",
    "dialogGrid4",
    "rate15",
    "containerPost4",
    "commentsSide4",
    "comments4",
    "commentContainer4",
    "userAndComment4",
    "rate16",
    "rate4",
    "textarea4",
    "userSide4",
    "userAction4"
  ],

  sliderCarousel4: [
    "sliderCarousel4",
    "dialogGrid",
    "rate9",
    "containerPost",
    "commentsSide",
    "comments",
    "commentContainer",
    "userAndComment",
    "rate11",
    "rate",
    "textarea",
    "userSide",
    "userAction",
    "dialogGrid2",
    "rate10",
    "containerPost2",
    "commentsSide2",
    "comments2",
    "commentContainer2",
    "userAndComment2",
    "rate12",
    "rate2",
    "textarea2",
    "userSide2",
    "userAction2",
    "dialogGrid3",
    "rate13",
    "containerPost3",
    "commentsSide3",
    "comments3",
    "commentContainer3",
    "userAndComment3",
    "rate14",
    "rate3",
    "textarea3",
    "userSide3",
    "userAction3",
    "dialogGrid4",
    "rate15",
    "containerPost4",
    "commentsSide4",
    "comments4",
    "commentContainer4",
    "userAndComment4",
    "rate16",
    "rate4",
    "textarea4",
    "userSide4",
    "userAction4"
  ],

  dialogGrid: [
    "dialogGrid",
    "rate9",
    "containerPost",
    "commentsSide",
    "comments",
    "commentContainer",
    "userAndComment",
    "rate11",
    "rate",
    "textarea",
    "userSide",
    "userAction"
  ],

  rate9: ["rate9"],
  containerPost: [
    "containerPost",
    "commentsSide",
    "comments",
    "commentContainer",
    "userAndComment",
    "rate11",
    "rate",
    "textarea",
    "userSide",
    "userAction"
  ],

  commentsSide: [
    "commentsSide",
    "comments",
    "commentContainer",
    "userAndComment",
    "rate11",
    "rate",
    "textarea"
  ],

  comments: ["comments", "commentContainer", "userAndComment", "rate11"],
  commentContainer: ["commentContainer", "userAndComment", "rate11"],
  userAndComment: ["userAndComment", "rate11"],
  rate11: ["rate11"],
  rate: ["rate"],
  textarea: ["textarea"],
  userSide: ["userSide", "userAction"],
  userAction: ["userAction"],
  dialogGrid2: [
    "dialogGrid2",
    "rate10",
    "containerPost2",
    "commentsSide2",
    "comments2",
    "commentContainer2",
    "userAndComment2",
    "rate12",
    "rate2",
    "textarea2",
    "userSide2",
    "userAction2"
  ],

  rate10: ["rate10"],
  containerPost2: [
    "containerPost2",
    "commentsSide2",
    "comments2",
    "commentContainer2",
    "userAndComment2",
    "rate12",
    "rate2",
    "textarea2",
    "userSide2",
    "userAction2"
  ],

  commentsSide2: [
    "commentsSide2",
    "comments2",
    "commentContainer2",
    "userAndComment2",
    "rate12",
    "rate2",
    "textarea2"
  ],

  comments2: ["comments2", "commentContainer2", "userAndComment2", "rate12"],
  commentContainer2: ["commentContainer2", "userAndComment2", "rate12"],
  userAndComment2: ["userAndComment2", "rate12"],
  rate12: ["rate12"],
  rate2: ["rate2"],
  textarea2: ["textarea2"],
  userSide2: ["userSide2", "userAction2"],
  userAction2: ["userAction2"],
  dialogGrid3: [
    "dialogGrid3",
    "rate13",
    "containerPost3",
    "commentsSide3",
    "comments3",
    "commentContainer3",
    "userAndComment3",
    "rate14",
    "rate3",
    "textarea3",
    "userSide3",
    "userAction3"
  ],

  rate13: ["rate13"],
  containerPost3: [
    "containerPost3",
    "commentsSide3",
    "comments3",
    "commentContainer3",
    "userAndComment3",
    "rate14",
    "rate3",
    "textarea3",
    "userSide3",
    "userAction3"
  ],

  commentsSide3: [
    "commentsSide3",
    "comments3",
    "commentContainer3",
    "userAndComment3",
    "rate14",
    "rate3",
    "textarea3"
  ],

  comments3: ["comments3", "commentContainer3", "userAndComment3", "rate14"],
  commentContainer3: ["commentContainer3", "userAndComment3", "rate14"],
  userAndComment3: ["userAndComment3", "rate14"],
  rate14: ["rate14"],
  rate3: ["rate3"],
  textarea3: ["textarea3"],
  userSide3: ["userSide3", "userAction3"],
  userAction3: ["userAction3"],
  dialogGrid4: [
    "dialogGrid4",
    "rate15",
    "containerPost4",
    "commentsSide4",
    "comments4",
    "commentContainer4",
    "userAndComment4",
    "rate16",
    "rate4",
    "textarea4",
    "userSide4",
    "userAction4"
  ],

  rate15: ["rate15"],
  containerPost4: [
    "containerPost4",
    "commentsSide4",
    "comments4",
    "commentContainer4",
    "userAndComment4",
    "rate16",
    "rate4",
    "textarea4",
    "userSide4",
    "userAction4"
  ],

  commentsSide4: [
    "commentsSide4",
    "comments4",
    "commentContainer4",
    "userAndComment4",
    "rate16",
    "rate4",
    "textarea4"
  ],

  comments4: ["comments4", "commentContainer4", "userAndComment4", "rate16"],
  commentContainer4: ["commentContainer4", "userAndComment4", "rate16"],
  userAndComment4: ["userAndComment4", "rate16"],
  rate16: ["rate16"],
  rate4: ["rate4"],
  textarea4: ["textarea4"],
  userSide4: ["userSide4", "userAction4"],
  userAction4: ["userAction4"],
  container9: [
    "container9",
    "sliderCarousel5",
    "dialogGrid5",
    "rate17",
    "containerPost5",
    "commentsSide5",
    "comments5",
    "commentContainer5",
    "userAndComment5",
    "rate18",
    "rate5",
    "textarea5",
    "userSide5",
    "userAction5",
    "dialogGrid6",
    "rate19",
    "containerPost6",
    "commentsSide6",
    "comments6",
    "commentContainer6",
    "userAndComment6",
    "rate20",
    "rate6",
    "textarea6",
    "userSide6",
    "userAction6",
    "dialogGrid7",
    "rate21",
    "containerPost7",
    "commentsSide7",
    "comments7",
    "commentContainer7",
    "userAndComment7",
    "rate22",
    "rate7",
    "textarea7",
    "userSide7",
    "userAction7",
    "dialogGrid8",
    "rate23",
    "containerPost8",
    "commentsSide8",
    "comments8",
    "commentContainer8",
    "userAndComment8",
    "rate24",
    "rate8",
    "textarea8",
    "userSide8",
    "userAction8"
  ],

  sliderCarousel5: [
    "sliderCarousel5",
    "dialogGrid5",
    "rate17",
    "containerPost5",
    "commentsSide5",
    "comments5",
    "commentContainer5",
    "userAndComment5",
    "rate18",
    "rate5",
    "textarea5",
    "userSide5",
    "userAction5",
    "dialogGrid6",
    "rate19",
    "containerPost6",
    "commentsSide6",
    "comments6",
    "commentContainer6",
    "userAndComment6",
    "rate20",
    "rate6",
    "textarea6",
    "userSide6",
    "userAction6",
    "dialogGrid7",
    "rate21",
    "containerPost7",
    "commentsSide7",
    "comments7",
    "commentContainer7",
    "userAndComment7",
    "rate22",
    "rate7",
    "textarea7",
    "userSide7",
    "userAction7",
    "dialogGrid8",
    "rate23",
    "containerPost8",
    "commentsSide8",
    "comments8",
    "commentContainer8",
    "userAndComment8",
    "rate24",
    "rate8",
    "textarea8",
    "userSide8",
    "userAction8"
  ],

  dialogGrid5: [
    "dialogGrid5",
    "rate17",
    "containerPost5",
    "commentsSide5",
    "comments5",
    "commentContainer5",
    "userAndComment5",
    "rate18",
    "rate5",
    "textarea5",
    "userSide5",
    "userAction5"
  ],

  rate17: ["rate17"],
  containerPost5: [
    "containerPost5",
    "commentsSide5",
    "comments5",
    "commentContainer5",
    "userAndComment5",
    "rate18",
    "rate5",
    "textarea5",
    "userSide5",
    "userAction5"
  ],

  commentsSide5: [
    "commentsSide5",
    "comments5",
    "commentContainer5",
    "userAndComment5",
    "rate18",
    "rate5",
    "textarea5"
  ],

  comments5: ["comments5", "commentContainer5", "userAndComment5", "rate18"],
  commentContainer5: ["commentContainer5", "userAndComment5", "rate18"],
  userAndComment5: ["userAndComment5", "rate18"],
  rate18: ["rate18"],
  rate5: ["rate5"],
  textarea5: ["textarea5"],
  userSide5: ["userSide5", "userAction5"],
  userAction5: ["userAction5"],
  dialogGrid6: [
    "dialogGrid6",
    "rate19",
    "containerPost6",
    "commentsSide6",
    "comments6",
    "commentContainer6",
    "userAndComment6",
    "rate20",
    "rate6",
    "textarea6",
    "userSide6",
    "userAction6"
  ],

  rate19: ["rate19"],
  containerPost6: [
    "containerPost6",
    "commentsSide6",
    "comments6",
    "commentContainer6",
    "userAndComment6",
    "rate20",
    "rate6",
    "textarea6",
    "userSide6",
    "userAction6"
  ],

  commentsSide6: [
    "commentsSide6",
    "comments6",
    "commentContainer6",
    "userAndComment6",
    "rate20",
    "rate6",
    "textarea6"
  ],

  comments6: ["comments6", "commentContainer6", "userAndComment6", "rate20"],
  commentContainer6: ["commentContainer6", "userAndComment6", "rate20"],
  userAndComment6: ["userAndComment6", "rate20"],
  rate20: ["rate20"],
  rate6: ["rate6"],
  textarea6: ["textarea6"],
  userSide6: ["userSide6", "userAction6"],
  userAction6: ["userAction6"],
  dialogGrid7: [
    "dialogGrid7",
    "rate21",
    "containerPost7",
    "commentsSide7",
    "comments7",
    "commentContainer7",
    "userAndComment7",
    "rate22",
    "rate7",
    "textarea7",
    "userSide7",
    "userAction7"
  ],

  rate21: ["rate21"],
  containerPost7: [
    "containerPost7",
    "commentsSide7",
    "comments7",
    "commentContainer7",
    "userAndComment7",
    "rate22",
    "rate7",
    "textarea7",
    "userSide7",
    "userAction7"
  ],

  commentsSide7: [
    "commentsSide7",
    "comments7",
    "commentContainer7",
    "userAndComment7",
    "rate22",
    "rate7",
    "textarea7"
  ],

  comments7: ["comments7", "commentContainer7", "userAndComment7", "rate22"],
  commentContainer7: ["commentContainer7", "userAndComment7", "rate22"],
  userAndComment7: ["userAndComment7", "rate22"],
  rate22: ["rate22"],
  rate7: ["rate7"],
  textarea7: ["textarea7"],
  userSide7: ["userSide7", "userAction7"],
  userAction7: ["userAction7"],
  dialogGrid8: [
    "dialogGrid8",
    "rate23",
    "containerPost8",
    "commentsSide8",
    "comments8",
    "commentContainer8",
    "userAndComment8",
    "rate24",
    "rate8",
    "textarea8",
    "userSide8",
    "userAction8"
  ],

  rate23: ["rate23"],
  containerPost8: [
    "containerPost8",
    "commentsSide8",
    "comments8",
    "commentContainer8",
    "userAndComment8",
    "rate24",
    "rate8",
    "textarea8",
    "userSide8",
    "userAction8"
  ],

  commentsSide8: [
    "commentsSide8",
    "comments8",
    "commentContainer8",
    "userAndComment8",
    "rate24",
    "rate8",
    "textarea8"
  ],

  comments8: ["comments8", "commentContainer8", "userAndComment8", "rate24"],
  commentContainer8: ["commentContainer8", "userAndComment8", "rate24"],
  userAndComment8: ["userAndComment8", "rate24"],
  rate24: ["rate24"],
  rate8: ["rate8"],
  textarea8: ["textarea8"],
  userSide8: ["userSide8", "userAction8"],
  userAction8: ["userAction8"],
  container6: ["container6", "sliderCarousel3"],
  sliderCarousel3: ["sliderCarousel3"],
  container7: [
    "container7",
    "popover",
    "popover3",
    "popover4",
    "popover2",
    "popover5",
    "popover6"
  ],

  popover: ["popover"],
  popover3: ["popover3"],
  popover4: ["popover4"],
  popover2: ["popover2"],
  popover5: ["popover5"],
  popover6: ["popover6"],
  container10: ["container10", "sliderCarousel2"],
  sliderCarousel2: ["sliderCarousel2"],
  container8: ["container8", "youTube"],
  youTube: ["youTube"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicACommunityDashboard__ArgProps,
          internalVariantPropNames: PlasmicACommunityDashboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicACommunityDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicACommunityDashboard";
  } else {
    func.displayName = `PlasmicACommunityDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicACommunityDashboard = Object.assign(
  // Top-level PlasmicACommunityDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topBar: makeNodeComponent("topBar"),
    navigationBar: makeNodeComponent("navigationBar"),
    account: makeNodeComponent("account"),
    button: makeNodeComponent("button"),
    container1: makeNodeComponent("container1"),
    htmlVideo: makeNodeComponent("htmlVideo"),
    container3: makeNodeComponent("container3"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    container5: makeNodeComponent("container5"),
    sliderCarousel4: makeNodeComponent("sliderCarousel4"),
    dialogGrid: makeNodeComponent("dialogGrid"),
    rate9: makeNodeComponent("rate9"),
    containerPost: makeNodeComponent("containerPost"),
    commentsSide: makeNodeComponent("commentsSide"),
    comments: makeNodeComponent("comments"),
    commentContainer: makeNodeComponent("commentContainer"),
    userAndComment: makeNodeComponent("userAndComment"),
    rate11: makeNodeComponent("rate11"),
    rate: makeNodeComponent("rate"),
    textarea: makeNodeComponent("textarea"),
    userSide: makeNodeComponent("userSide"),
    userAction: makeNodeComponent("userAction"),
    dialogGrid2: makeNodeComponent("dialogGrid2"),
    rate10: makeNodeComponent("rate10"),
    containerPost2: makeNodeComponent("containerPost2"),
    commentsSide2: makeNodeComponent("commentsSide2"),
    comments2: makeNodeComponent("comments2"),
    commentContainer2: makeNodeComponent("commentContainer2"),
    userAndComment2: makeNodeComponent("userAndComment2"),
    rate12: makeNodeComponent("rate12"),
    rate2: makeNodeComponent("rate2"),
    textarea2: makeNodeComponent("textarea2"),
    userSide2: makeNodeComponent("userSide2"),
    userAction2: makeNodeComponent("userAction2"),
    dialogGrid3: makeNodeComponent("dialogGrid3"),
    rate13: makeNodeComponent("rate13"),
    containerPost3: makeNodeComponent("containerPost3"),
    commentsSide3: makeNodeComponent("commentsSide3"),
    comments3: makeNodeComponent("comments3"),
    commentContainer3: makeNodeComponent("commentContainer3"),
    userAndComment3: makeNodeComponent("userAndComment3"),
    rate14: makeNodeComponent("rate14"),
    rate3: makeNodeComponent("rate3"),
    textarea3: makeNodeComponent("textarea3"),
    userSide3: makeNodeComponent("userSide3"),
    userAction3: makeNodeComponent("userAction3"),
    dialogGrid4: makeNodeComponent("dialogGrid4"),
    rate15: makeNodeComponent("rate15"),
    containerPost4: makeNodeComponent("containerPost4"),
    commentsSide4: makeNodeComponent("commentsSide4"),
    comments4: makeNodeComponent("comments4"),
    commentContainer4: makeNodeComponent("commentContainer4"),
    userAndComment4: makeNodeComponent("userAndComment4"),
    rate16: makeNodeComponent("rate16"),
    rate4: makeNodeComponent("rate4"),
    textarea4: makeNodeComponent("textarea4"),
    userSide4: makeNodeComponent("userSide4"),
    userAction4: makeNodeComponent("userAction4"),
    container9: makeNodeComponent("container9"),
    sliderCarousel5: makeNodeComponent("sliderCarousel5"),
    dialogGrid5: makeNodeComponent("dialogGrid5"),
    rate17: makeNodeComponent("rate17"),
    containerPost5: makeNodeComponent("containerPost5"),
    commentsSide5: makeNodeComponent("commentsSide5"),
    comments5: makeNodeComponent("comments5"),
    commentContainer5: makeNodeComponent("commentContainer5"),
    userAndComment5: makeNodeComponent("userAndComment5"),
    rate18: makeNodeComponent("rate18"),
    rate5: makeNodeComponent("rate5"),
    textarea5: makeNodeComponent("textarea5"),
    userSide5: makeNodeComponent("userSide5"),
    userAction5: makeNodeComponent("userAction5"),
    dialogGrid6: makeNodeComponent("dialogGrid6"),
    rate19: makeNodeComponent("rate19"),
    containerPost6: makeNodeComponent("containerPost6"),
    commentsSide6: makeNodeComponent("commentsSide6"),
    comments6: makeNodeComponent("comments6"),
    commentContainer6: makeNodeComponent("commentContainer6"),
    userAndComment6: makeNodeComponent("userAndComment6"),
    rate20: makeNodeComponent("rate20"),
    rate6: makeNodeComponent("rate6"),
    textarea6: makeNodeComponent("textarea6"),
    userSide6: makeNodeComponent("userSide6"),
    userAction6: makeNodeComponent("userAction6"),
    dialogGrid7: makeNodeComponent("dialogGrid7"),
    rate21: makeNodeComponent("rate21"),
    containerPost7: makeNodeComponent("containerPost7"),
    commentsSide7: makeNodeComponent("commentsSide7"),
    comments7: makeNodeComponent("comments7"),
    commentContainer7: makeNodeComponent("commentContainer7"),
    userAndComment7: makeNodeComponent("userAndComment7"),
    rate22: makeNodeComponent("rate22"),
    rate7: makeNodeComponent("rate7"),
    textarea7: makeNodeComponent("textarea7"),
    userSide7: makeNodeComponent("userSide7"),
    userAction7: makeNodeComponent("userAction7"),
    dialogGrid8: makeNodeComponent("dialogGrid8"),
    rate23: makeNodeComponent("rate23"),
    containerPost8: makeNodeComponent("containerPost8"),
    commentsSide8: makeNodeComponent("commentsSide8"),
    comments8: makeNodeComponent("comments8"),
    commentContainer8: makeNodeComponent("commentContainer8"),
    userAndComment8: makeNodeComponent("userAndComment8"),
    rate24: makeNodeComponent("rate24"),
    rate8: makeNodeComponent("rate8"),
    textarea8: makeNodeComponent("textarea8"),
    userSide8: makeNodeComponent("userSide8"),
    userAction8: makeNodeComponent("userAction8"),
    container6: makeNodeComponent("container6"),
    sliderCarousel3: makeNodeComponent("sliderCarousel3"),
    container7: makeNodeComponent("container7"),
    popover: makeNodeComponent("popover"),
    popover3: makeNodeComponent("popover3"),
    popover4: makeNodeComponent("popover4"),
    popover2: makeNodeComponent("popover2"),
    popover5: makeNodeComponent("popover5"),
    popover6: makeNodeComponent("popover6"),
    container10: makeNodeComponent("container10"),
    sliderCarousel2: makeNodeComponent("sliderCarousel2"),
    container8: makeNodeComponent("container8"),
    youTube: makeNodeComponent("youTube"),
    // Metadata about props expected for PlasmicACommunityDashboard
    internalVariantProps: PlasmicACommunityDashboard__VariantProps,
    internalArgProps: PlasmicACommunityDashboard__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Community Dashboard",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicACommunityDashboard;
/* prettier-ignore-end */
