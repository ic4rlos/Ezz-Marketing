/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6Q26EfqfPNQuydumhAEs1S
// Component: RxYcNRPKRjth
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv, useGlobalActions } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicInvalidate } from "@plasmicapp/react-web/lib/data-sources";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import LastInput from "../../LastInput"; // plasmic-import: EprmhitWo7Jg/component
import LoginButton from "../../LoginButton"; // plasmic-import: sda60oPQ2thQ/component
import Select from "../../Select"; // plasmic-import: iuUTkEsiQBLB/component
import EmailInput from "../../EmailInput"; // plasmic-import: N6jiyqjMi6tf/component
import { useScreenVariants as useScreenVariantsnnPusS1DHa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nnPus_s1dHa_/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6Q26EfqfPNQuydumhAEs1S/projectcss
import sty from "./PlasmicACreateCommunity.module.css"; // plasmic-import: RxYcNRPKRjth/css
import PlusSvgIcon from "./icons/PlasmicIcon__PlusSvg"; // plasmic-import: ysr9a2GiquoP/icon
import YoutubeIconLogoSvgrepoComSvgIcon from "./icons/PlasmicIcon__YoutubeIconLogoSvgrepoComSvg"; // plasmic-import: wyl8qP8ULAx-/icon
import IlustrgatuSvgIcon from "./icons/PlasmicIcon__IlustrgatuSvg"; // plasmic-import: ogpmBO-sGuua/icon
import IlustrgatuSvg2Icon from "./icons/PlasmicIcon__IlustrgatuSvg2"; // plasmic-import: uIBp4qzGRMqi/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: -tYB_tag2lQq/icon
import logoPng2S9Gcm9LGTbT6 from "./images/logoPng2.png"; // plasmic-import: s9GCM9lGTbT6/picture
import asdPngRiW7PlH6KBw from "./images/asdPng.png"; // plasmic-import: RiW7PlH6K-Bw/picture
import semTitulo2Jpg31LNEr9NkcLru from "./images/semTitulo2Jpg3.jpg"; // plasmic-import: 1lNEr9NkcLRU/picture

createPlasmicElementProxy;

export const PlasmicACreateCommunity__VariantProps = new Array();

export const PlasmicACreateCommunity__ArgProps = new Array();

const $$ = {};

function PlasmicACreateCommunity__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const $globalActions = useGlobalActions?.();
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "lastInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lastInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lastInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lastInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "upload2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "option1"
      },
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "emailInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "emailInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "Tell about your agency"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnnPusS1DHa()
  });
  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"topBar"}
          data-plasmic-override={overrides.topBar}
          hasGap={true}
          className={classNames(projectcss.all, sty.topBar)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wCoP4)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nxezv)}
            >
              <NavigationBar
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                brand={
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__egZ0U
                    )}
                    href={`/affiliate-homepage`}
                    onClick={async event => {
                      const $steps = {};
                      $steps["refreshData"] = true
                        ? (() => {
                            const actionArgs = {
                              queryInvalidation: ["plasmic_refresh_all"]
                            };
                            return (async ({ queryInvalidation }) => {
                              if (!queryInvalidation) {
                                return;
                              }
                              await plasmicInvalidate(queryInvalidation);
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["refreshData"] != null &&
                        typeof $steps["refreshData"] === "object" &&
                        typeof $steps["refreshData"].then === "function"
                      ) {
                        $steps["refreshData"] = await $steps["refreshData"];
                      }
                    }}
                    platform={"react"}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__cJUj)}
                      displayHeight={"30px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: logoPng2S9Gcm9LGTbT6,
                        fullWidth: 190,
                        fullHeight: 100,
                        aspectRatio: undefined
                      }}
                    />
                  </PlasmicLink__>
                }
                className={classNames("__wab_instance", sty.navigationBar)}
                closeButton={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__aNqV4)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={"https://static1.plasmic.app/close.svg"}
                  />
                }
                itemsGap={8}
                menuItems={
                  <React.Fragment>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__uFxgz
                      )}
                      href={`/community-dashboard`}
                      platform={"react"}
                    >
                      {"Community Dashboard"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__vo0Mr
                      )}
                      href={`/service-dashboard`}
                      platform={"react"}
                    >
                      {"Service\nDashboard"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__ir28D
                      )}
                      platform={"react"}
                    >
                      {"Market\nTrends"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__g3Qf
                      )}
                      platform={"react"}
                    >
                      {"Find a \nbusiness"}
                    </PlasmicLink__>
                  </React.Fragment>
                }
                openButton={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__pFjkJ)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={``}
                    src={"https://static1.plasmic.app/menu.svg"}
                    width={``}
                  />
                }
                responsiveBreakpoint={768}
              />

              <AntdDropdown
                data-plasmic-name={"account"}
                data-plasmic-override={overrides.account}
                className={classNames("__wab_instance", sty.account)}
                dropdownMenuScopeClassName={sty["account__dropdownMenu"]}
                menuClassName={classNames({ [sty["pcls_6CXEqYJpEvpe"]]: true })}
                menuItemClassName={classNames({
                  [sty["pcls_cwWtj0P-OBYF"]]: true
                })}
                menuItems={() => (
                  <React.Fragment>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem___1W2GD
                      )}
                      key={"menu-item-1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ctDws
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__hmTc6
                      )}
                      key={"menu-item-2"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__j2Yv1
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                  </React.Fragment>
                )}
                menuItemsJson={(() => {
                  const __composite = [
                    { type: null, label: null, children: null },
                    {
                      type: null,
                      value: "action1",
                      label: null,
                      children: null
                    },
                    {
                      type: null,
                      value: "action2",
                      label: null,
                      onClick: null
                    }
                  ];

                  __composite["0"]["type"] = "group";
                  __composite["0"]["label"] = "User";
                  __composite["0"]["children"] = (() => {
                    const __composite = [
                      { type: "item", label: null, onClick: null },
                      { type: "item", label: null, onClick: null },
                      { type: null }
                    ];

                    __composite["0"]["label"] = "Profile";
                    __composite["0"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToAProfile"] = true
                        ? (() => {
                            const actionArgs = { destination: `/profile` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToAProfile"] != null &&
                        typeof $steps["goToAProfile"] === "object" &&
                        typeof $steps["goToAProfile"].then === "function"
                      ) {
                        $steps["goToAProfile"] = await $steps["goToAProfile"];
                      }
                    };
                    __composite["1"]["label"] = "Edit profile";
                    __composite["1"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToACreateAccount"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/a-create account`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToACreateAccount"] != null &&
                        typeof $steps["goToACreateAccount"] === "object" &&
                        typeof $steps["goToACreateAccount"].then === "function"
                      ) {
                        $steps["goToACreateAccount"] = await $steps[
                          "goToACreateAccount"
                        ];
                      }
                    };
                    __composite["2"]["type"] = "divider";
                    return __composite;
                  })();
                  __composite["1"]["type"] = "group";
                  __composite["1"]["label"] = "Account";
                  __composite["1"]["children"] = (() => {
                    const __composite = [
                      { type: "item", label: null, onClick: null },
                      { type: "item", label: null, onClick: null },
                      { type: null }
                    ];

                    __composite["0"]["label"] = "Settings & Privacy";
                    __composite["0"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToALogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/a-login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToALogin"] != null &&
                        typeof $steps["goToALogin"] === "object" &&
                        typeof $steps["goToALogin"].then === "function"
                      ) {
                        $steps["goToALogin"] = await $steps["goToALogin"];
                      }
                    };
                    __composite["1"]["label"] = "Help";
                    __composite["1"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToALogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/a-login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToALogin"] != null &&
                        typeof $steps["goToALogin"] === "object" &&
                        typeof $steps["goToALogin"].then === "function"
                      ) {
                        $steps["goToALogin"] = await $steps["goToALogin"];
                      }
                    };
                    __composite["2"]["type"] = "divider";
                    return __composite;
                  })();
                  __composite["2"]["type"] = "item";
                  __composite["2"]["label"] = "Sign out";
                  __composite["2"]["onClick"] = async info => {
                    const $steps = {};
                    $steps["goToALogin"] = true
                      ? (() => {
                          const actionArgs = { destination: `/a-login` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              location.assign(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToALogin"] != null &&
                      typeof $steps["goToALogin"] === "object" &&
                      typeof $steps["goToALogin"].then === "function"
                    ) {
                      $steps["goToALogin"] = await $steps["goToALogin"];
                    }
                  };
                  return __composite;
                })()}
                trigger={"hover"}
                useMenuItemsSlot={false}
              >
                <AntdButton
                  className={classNames("__wab_instance", sty.button__mrCc1)}
                  href={`/a-login`}
                  target={true}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__jPdZ)}
                    displayHeight={"30px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"30px"}
                    loading={"lazy"}
                  />
                </AntdButton>
              </AntdDropdown>
            </Stack__>
          </Stack__>
        </Stack__>
        <div
          data-plasmic-name={"container1"}
          data-plasmic-override={overrides.container1}
          className={classNames(projectcss.all, sty.container1)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__be03F)}>
            <UploadWrapper
              data-plasmic-name={"upload"}
              data-plasmic-override={overrides.upload}
              accept={"video/*"}
              className={classNames("__wab_instance", sty.upload)}
              dragAndDropFiles={true}
              files={generateStateValueProp($state, ["upload", "files"])}
              listType={"picture-card"}
              maxCount={1}
              onFilesChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["upload", "files"]).apply(
                  null,
                  eventArgs
                );
                (async files => {
                  const $steps = {};
                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            "Video send",
                            "Make sure to send a video without audio showing a little about your agency"
                          ]
                        };
                        return $globalActions[
                          "plasmic-antd5-config-provider.showNotification"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              showUploadList={true}
            >
              <AntdButton
                className={classNames("__wab_instance", sty.button__yb7Xa)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__lnkXb)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"110px"}
                  loading={"lazy"}
                  src={{
                    src: asdPngRiW7PlH6KBw,
                    fullWidth: 2257,
                    fullHeight: 2257,
                    aspectRatio: undefined
                  }}
                />

                <PlusSvgIcon
                  className={classNames(projectcss.all, sty.svg__f9Nkl)}
                  role={"img"}
                />
              </AntdButton>
            </UploadWrapper>
            <div className={classNames(projectcss.all, sty.freeBox__ckxGj)}>
              <div className={classNames(projectcss.all, sty.freeBox__fgFd1)}>
                <div className={classNames(projectcss.all, sty.freeBox__gxCrc)}>
                  <YoutubeIconLogoSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__quxEa)}
                    role={"img"}
                  />

                  <LastInput
                    data-plasmic-name={"lastInput"}
                    data-plasmic-override={overrides.lastInput}
                    className={classNames("__wab_instance", sty.lastInput)}
                    onChange={async (...eventArgs) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "lastInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    string={"Youtube"}
                    value={
                      generateStateValueProp($state, ["lastInput", "value"]) ??
                      ""
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rIhHw)}>
                  <IlustrgatuSvgIcon
                    className={classNames(projectcss.all, sty.svg__uyouJ)}
                    role={"img"}
                  />

                  <LastInput
                    data-plasmic-name={"lastInput2"}
                    data-plasmic-override={overrides.lastInput2}
                    className={classNames("__wab_instance", sty.lastInput2)}
                    onChange={async (...eventArgs) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "lastInput2",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    string={"X Corporation"}
                    value={
                      generateStateValueProp($state, ["lastInput2", "value"]) ??
                      ""
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__bqIr)}>
                  <IlustrgatuSvg2Icon
                    className={classNames(projectcss.all, sty.svg__znD1Y)}
                    role={"img"}
                  />

                  <LastInput
                    data-plasmic-name={"lastInput3"}
                    data-plasmic-override={overrides.lastInput3}
                    className={classNames("__wab_instance", sty.lastInput3)}
                    onChange={async (...eventArgs) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "lastInput3",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    string={"Tik Tok"}
                    value={
                      generateStateValueProp($state, ["lastInput3", "value"]) ??
                      ""
                    }
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___0NCdb)}
                >
                  <Icon6Icon
                    className={classNames(projectcss.all, sty.svg__n1Bvt)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {};
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              undefined;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    role={"img"}
                  />

                  <LastInput
                    data-plasmic-name={"lastInput4"}
                    data-plasmic-override={overrides.lastInput4}
                    className={classNames("__wab_instance", sty.lastInput4)}
                    onChange={async (...eventArgs) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "lastInput4",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    string={"Instagram"}
                    value={
                      generateStateValueProp($state, ["lastInput4", "value"]) ??
                      ""
                    }
                  />
                </div>
                <svg
                  className={classNames(projectcss.all, sty.svg__y7Vr)}
                  role={"img"}
                />

                <LoginButton
                  data-plasmic-name={"loginButton"}
                  data-plasmic-override={overrides.loginButton}
                  className={classNames("__wab_instance", sty.loginButton)}
                  link={`/community-dashboard`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mBiQn
                    )}
                  >
                    {"Save"}
                  </div>
                </LoginButton>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__dLjiE)}>
            <UploadWrapper
              data-plasmic-name={"upload2"}
              data-plasmic-override={overrides.upload2}
              accept={"image/*"}
              className={classNames("__wab_instance", sty.upload2)}
              files={generateStateValueProp($state, ["upload2", "files"])}
              listType={"picture"}
              onFilesChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["upload2", "files"]).apply(
                  null,
                  eventArgs
                );
              }}
              showUploadList={true}
            >
              <AntdButton
                className={classNames("__wab_instance", sty.button__cUtU)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__xQEgl)}
                  displayHeight={"170px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"170px"}
                  loading={"lazy"}
                  src={{
                    src: semTitulo2Jpg31LNEr9NkcLru,
                    fullWidth: 1014,
                    fullHeight: 1014,
                    aspectRatio: undefined
                  }}
                />

                <PlusSvgIcon
                  className={classNames(projectcss.all, sty.svg___4Bb)}
                  role={"img"}
                />
              </AntdButton>
            </UploadWrapper>
            <Select
              data-plasmic-name={"select"}
              data-plasmic-override={overrides.select}
              className={classNames("__wab_instance", sty.select)}
              color={"softGray"}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["select", "value"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
                (async value => {
                  const $steps = {};
                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "info",
                            "Community Model",
                            "Choose between the venture model where you invest in the campaigns or the standard model where you need companies to pass on the investment (traditional)",
                            10
                          ]
                        };
                        return $globalActions[
                          "plasmic-antd5-config-provider.showNotification"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              options={(() => {
                const __composite = [
                  { value: "option1", label: null },
                  { value: "option2", label: null }
                ];

                __composite["0"]["label"] = "Standard";
                __composite["1"]["label"] = "Venture";
                return __composite;
              })()}
              value={generateStateValueProp($state, ["select", "value"])}
            />
          </div>
        </div>
        <div
          data-plasmic-name={"container8"}
          data-plasmic-override={overrides.container8}
          className={classNames(projectcss.all, sty.container8)}
        >
          <EmailInput
            data-plasmic-name={"emailInput"}
            data-plasmic-override={overrides.emailInput}
            className={classNames("__wab_instance", sty.emailInput)}
            onChange={async (...eventArgs) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["emailInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            string={"Youtube ID video"}
            value={
              generateStateValueProp($state, ["emailInput", "value"]) ?? ""
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__idC4J)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jb8Jo
              )}
            >
              {"How we work"}
            </div>
            <textarea
              data-plasmic-name={"textarea"}
              data-plasmic-override={overrides.textarea}
              className={classNames(
                projectcss.all,
                projectcss.textarea,
                sty.textarea
              )}
              onChange={async (...eventArgs) => {
                (e => {
                  generateStateOnChangeProp($state, ["textarea", "value"])(
                    e.target.value
                  );
                }).apply(null, eventArgs);
              }}
              ref={ref => {
                $refs["textarea"] = ref;
              }}
              value={
                generateStateValueProp($state, ["textarea", "value"]) ?? ""
              }
            />

            <EmailInput
              data-plasmic-name={"emailInput3"}
              data-plasmic-override={overrides.emailInput3}
              className={classNames("__wab_instance", sty.emailInput3)}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["emailInput3", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              string={"Site link"}
              value={
                generateStateValueProp($state, ["emailInput3", "value"]) ?? ""
              }
            />
          </div>
        </div>
        <EmailInput
          data-plasmic-name={"emailInput2"}
          data-plasmic-override={overrides.emailInput2}
          className={classNames("__wab_instance", sty.emailInput2)}
          onChange={async (...eventArgs) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["emailInput2", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }).apply(null, eventArgs);
            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          string={"Community name"}
          value={generateStateValueProp($state, ["emailInput2", "value"]) ?? ""}
        />
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "topBar",
    "navigationBar",
    "account",
    "container1",
    "upload",
    "lastInput",
    "lastInput2",
    "lastInput3",
    "lastInput4",
    "loginButton",
    "upload2",
    "select",
    "container8",
    "emailInput",
    "textarea",
    "emailInput3",
    "emailInput2"
  ],

  topBar: ["topBar", "navigationBar", "account"],
  navigationBar: ["navigationBar"],
  account: ["account"],
  container1: [
    "container1",
    "upload",
    "lastInput",
    "lastInput2",
    "lastInput3",
    "lastInput4",
    "loginButton",
    "upload2",
    "select"
  ],

  upload: ["upload"],
  lastInput: ["lastInput"],
  lastInput2: ["lastInput2"],
  lastInput3: ["lastInput3"],
  lastInput4: ["lastInput4"],
  loginButton: ["loginButton"],
  upload2: ["upload2"],
  select: ["select"],
  container8: ["container8", "emailInput", "textarea", "emailInput3"],
  emailInput: ["emailInput"],
  textarea: ["textarea"],
  emailInput3: ["emailInput3"],
  emailInput2: ["emailInput2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicACreateCommunity__ArgProps,
          internalVariantPropNames: PlasmicACreateCommunity__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicACreateCommunity__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicACreateCommunity";
  } else {
    func.displayName = `PlasmicACreateCommunity.${nodeName}`;
  }
  return func;
}

export const PlasmicACreateCommunity = Object.assign(
  // Top-level PlasmicACreateCommunity renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topBar: makeNodeComponent("topBar"),
    navigationBar: makeNodeComponent("navigationBar"),
    account: makeNodeComponent("account"),
    container1: makeNodeComponent("container1"),
    upload: makeNodeComponent("upload"),
    lastInput: makeNodeComponent("lastInput"),
    lastInput2: makeNodeComponent("lastInput2"),
    lastInput3: makeNodeComponent("lastInput3"),
    lastInput4: makeNodeComponent("lastInput4"),
    loginButton: makeNodeComponent("loginButton"),
    upload2: makeNodeComponent("upload2"),
    select: makeNodeComponent("select"),
    container8: makeNodeComponent("container8"),
    emailInput: makeNodeComponent("emailInput"),
    textarea: makeNodeComponent("textarea"),
    emailInput3: makeNodeComponent("emailInput3"),
    emailInput2: makeNodeComponent("emailInput2"),
    // Metadata about props expected for PlasmicACreateCommunity
    internalVariantProps: PlasmicACreateCommunity__VariantProps,
    internalArgProps: PlasmicACreateCommunity__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Create Community",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicACreateCommunity;
/* prettier-ignore-end */
