/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6Q26EfqfPNQuydumhAEs1S
// Component: t__xM_6VqDyF
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import FirstInput from "../../FirstInput"; // plasmic-import: Tf07dnmbURTH/component
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import LastInput from "../../LastInput"; // plasmic-import: EprmhitWo7Jg/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import LoginButton from "../../LoginButton"; // plasmic-import: sda60oPQ2thQ/component
import Checkbox from "../../Checkbox"; // plasmic-import: WriR20HvfHOf/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Education from "../../Education"; // plasmic-import: _DGeffa4xJRz/component
import PlusButton from "../../PlusButton"; // plasmic-import: acaccHtQ5A9k/component
import Select from "../../Select"; // plasmic-import: iuUTkEsiQBLB/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import { useScreenVariants as useScreenVariantsnnPusS1DHa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nnPus_s1dHa_/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6Q26EfqfPNQuydumhAEs1S/projectcss
import sty from "./PlasmicACreateAccount.module.css"; // plasmic-import: t__xM_6VqDyF/css
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: W2ddCaRfBmfX/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: wfWC5mb8qBwL/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: -tYB_tag2lQq/icon
import IlustrgatuSvgIcon from "./icons/PlasmicIcon__IlustrgatuSvg"; // plasmic-import: ogpmBO-sGuua/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 7HkI-8U3nJg6/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: iBkKLbgP92VI/icon
import PlusSvgIcon from "./icons/PlasmicIcon__PlusSvg"; // plasmic-import: ysr9a2GiquoP/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: 1gNGvjCGU28n/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: VLk3vix5PoaW/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 4YJtCeYjgnq4/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: DSe5zJXs0px5/icon
import icon04320X320Png44Ctc89HVbBq from "./images/icon04320X320Png.png"; // plasmic-import: 44CTC89hVbBQ/picture
import image2VI4RGpe3Fq47 from "./images/image2.svg"; // plasmic-import: vI4RGpe3Fq47/picture

createPlasmicElementProxy;

export const PlasmicACreateAccount__VariantProps = new Array();

export const PlasmicACreateAccount__ArgProps = new Array();

const $$ = {};

function PlasmicACreateAccount__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "firstName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "location.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dateTimePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "lastName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "email.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "linkedIn.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "instagram.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "x.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lastInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "educationComponent",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "primaryOffice.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "textarea3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "popover7.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover8.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover9.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover10.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover11.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover12.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "secundaryOffice.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnnPusS1DHa()
  });
  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <section
          data-plasmic-name={"countainer1"}
          data-plasmic-override={overrides.countainer1}
          className={classNames(projectcss.all, sty.countainer1)}
        >
          <FirstInput
            data-plasmic-name={"firstName"}
            data-plasmic-override={overrides.firstName}
            className={classNames("__wab_instance", sty.firstName)}
            onChange={async (...eventArgs) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["firstName", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            required={true}
            string={"First Name"}
            value={generateStateValueProp($state, ["firstName", "value"]) ?? ""}
          />

          <FirstInput
            data-plasmic-name={"lastName"}
            data-plasmic-override={overrides.lastName}
            className={classNames("__wab_instance", sty.lastName)}
            onChange={async (...eventArgs) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["lastName", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            string={"Last Name"}
            value={generateStateValueProp($state, ["lastName", "value"]) ?? ""}
          />

          <FirstInput
            data-plasmic-name={"location"}
            data-plasmic-override={overrides.location}
            className={classNames("__wab_instance", sty.location)}
            onChange={async (...eventArgs) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["location", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            string={"Location"}
            value={generateStateValueProp($state, ["location", "value"]) ?? ""}
          />

          <FirstInput
            data-plasmic-name={"email"}
            data-plasmic-override={overrides.email}
            className={classNames("__wab_instance", sty.email)}
            onChange={async (...eventArgs) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["email", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            string={"email"}
            value={generateStateValueProp($state, ["email", "value"]) ?? ""}
          />

          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.dateTimePicker),
              disabled: false,
              onChange: async (...eventArgs) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["dateTimePicker", "value"],
                  AntdDatePicker_Helpers
                ).apply(null, eventArgs);
              },
              popupBodyClassName: classNames({
                [sty["pcls_5EF7WEhKv31B"]]: true
              }),
              popupClassName: classNames({ [sty["pcls_OqdoMErQCByk"]]: true }),
              popupScopeClassName: sty["dateTimePicker__datePickerPopup"],
              value: generateStateValueProp($state, ["dateTimePicker", "value"])
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "dateTimePicker.value"
                }
              ],

              [],
              AntdDatePicker_Helpers ?? {},
              child$Props
            );
            return (
              <AntdDatePicker
                data-plasmic-name={"dateTimePicker"}
                data-plasmic-override={overrides.dateTimePicker}
                {...child$Props}
              />
            );
          })()}
          <LastInput
            data-plasmic-name={"linkedIn"}
            data-plasmic-override={overrides.linkedIn}
            className={classNames("__wab_instance", sty.linkedIn)}
            onChange={async (...eventArgs) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["linkedIn", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            string={"LinkedIn"}
            value={generateStateValueProp($state, ["linkedIn", "value"]) ?? ""}
          />

          <Icon5Icon
            className={classNames(projectcss.all, sty.svg__x4Hr3)}
            role={"img"}
          />

          <LastInput
            data-plasmic-name={"instagram"}
            data-plasmic-override={overrides.instagram}
            className={classNames("__wab_instance", sty.instagram)}
            onChange={async (...eventArgs) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["instagram", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            string={"Instagram"}
            value={generateStateValueProp($state, ["instagram", "value"]) ?? ""}
          />

          <Icon6Icon
            className={classNames(projectcss.all, sty.svg__ewOuo)}
            role={"img"}
          />

          <LastInput
            data-plasmic-name={"x"}
            data-plasmic-override={overrides.x}
            className={classNames("__wab_instance", sty.x)}
            onChange={async (...eventArgs) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["x", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            string={"X"}
            value={generateStateValueProp($state, ["x", "value"]) ?? ""}
          />

          <IlustrgatuSvgIcon
            className={classNames(projectcss.all, sty.svg__dfnxh)}
            role={"img"}
          />

          <UploadWrapper
            data-plasmic-name={"upload"}
            data-plasmic-override={overrides.upload}
            accept={"image/*"}
            className={classNames("__wab_instance", sty.upload)}
            files={generateStateValueProp($state, ["upload", "files"])}
            listType={"picture-card"}
            onFilesChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["upload", "files"]).apply(
                null,
                eventArgs
              );
            }}
            showUploadList={false}
          >
            <AntdButton
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jeNo9
                )}
              >
                {"Upload"}
              </div>
            </AntdButton>
          </UploadWrapper>
        </section>
        <section
          data-plasmic-name={"countainer2"}
          data-plasmic-override={overrides.countainer2}
          className={classNames(projectcss.all, sty.countainer2)}
        >
          <LoginButton
            className={classNames("__wab_instance", sty.loginButton___6Xd7I)}
            onClick={async event => {
              const $steps = {};
              $steps["goToHomepage"] = true
                ? (() => {
                    const actionArgs = { destination: `/affiliate-homepage` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        location.assign(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToHomepage"] != null &&
                typeof $steps["goToHomepage"] === "object" &&
                typeof $steps["goToHomepage"].then === "function"
              ) {
                $steps["goToHomepage"] = await $steps["goToHomepage"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pv7V
              )}
            >
              {"Save"}
            </div>
          </LoginButton>
          <div className={classNames(projectcss.all, sty.freeBox__k3Fyt)}>
            <Icon8Icon
              className={classNames(projectcss.all, sty.svg__i6D3R)}
              role={"img"}
            />

            <LastInput
              data-plasmic-name={"lastInput"}
              data-plasmic-override={overrides.lastInput}
              className={classNames("__wab_instance", sty.lastInput)}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["lastInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              string={"Calendly link"}
              value={
                generateStateValueProp($state, ["lastInput", "value"]) ?? ""
              }
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__pJlYd)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__b9VLa
              )}
            >
              {"Already have an account?"}
            </div>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__dGrpL
              )}
              onClick={async event => {
                const $steps = {};
                $steps["goToALogin"] = true
                  ? (() => {
                      const actionArgs = { destination: `/a-login` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToALogin"] != null &&
                  typeof $steps["goToALogin"] === "object" &&
                  typeof $steps["goToALogin"].then === "function"
                ) {
                  $steps["goToALogin"] = await $steps["goToALogin"];
                }
              }}
              platform={"react"}
            >
              {"Login"}
            </PlasmicLink__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___4J5Wp)}>
            <Checkbox
              data-plasmic-name={"checkbox"}
              data-plasmic-override={overrides.checkbox}
              className={classNames("__wab_instance", sty.checkbox)}
              label={
                <div className={classNames(projectcss.all, sty.freeBox__j1A7O)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1Weqi
                    )}
                  >
                    {"I accept the"}
                  </div>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__ozVrp
                    )}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToALogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/a-login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToALogin"] != null &&
                        typeof $steps["goToALogin"] === "object" &&
                        typeof $steps["goToALogin"].then === "function"
                      ) {
                        $steps["goToALogin"] = await $steps["goToALogin"];
                      }
                    }}
                    platform={"react"}
                  >
                    {"terms and conditions"}
                  </PlasmicLink__>
                </div>
              }
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "checkbox",
                  "isSelected"
                ]).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />
          </div>
        </section>
        <section
          data-plasmic-name={"countainer3"}
          data-plasmic-override={overrides.countainer3}
          className={classNames(projectcss.all, sty.countainer3)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zjOkp
            )}
          >
            {"Education"}
          </div>
          {(() => {
            const child$Props = {
              beforeChange: async (...eventArgs) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel", "currentSlide"],
                  SliderWrapper_Helpers
                ).apply(null, eventArgs);
              },
              className: classNames("__wab_instance", sty.sliderCarousel),
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel",
                "currentSlide"
              ]),
              ref: ref => {
                $refs["sliderCarousel"] = ref;
              },
              sliderScopeClassName: sty["sliderCarousel__slider"],
              slidesPerRow: 3
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel.currentSlide"
                }
              ],

              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );
            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel"}
                data-plasmic-override={overrides.sliderCarousel}
                {...child$Props}
              >
                <div className={classNames(projectcss.all, sty.freeBox__s4N)}>
                  <Education
                    className={classNames(
                      "__wab_instance",
                      sty.education__rykzF
                    )}
                  />
                </div>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.educationComponent;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__e6Dt7)}
                      key={currentIndex}
                    >
                      <Education
                        className={classNames(
                          "__wab_instance",
                          sty.education___7HCV
                        )}
                      />
                    </div>
                  );
                })}
                <div
                  className={classNames(projectcss.all, sty.freeBox__vcgSu)}
                />
              </SliderWrapper>
            );
          })()}
          <PlusButton
            data-plasmic-name={"plusButton"}
            data-plasmic-override={overrides.plusButton}
            className={classNames("__wab_instance", sty.plusButton)}
            onClick={async event => {
              const $steps = {};
              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          return $state.educationComponent.push({});
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          >
            <PlusSvgIcon
              className={classNames(projectcss.all, sty.svg___4EYMn)}
              role={"img"}
            />
          </PlusButton>
        </section>
        <section
          data-plasmic-name={"countainer4"}
          data-plasmic-override={overrides.countainer4}
          className={classNames(projectcss.all, sty.countainer4)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dftAw
            )}
          >
            {"Charge"}
          </div>
          <Select
            data-plasmic-name={"primaryOffice"}
            data-plasmic-override={overrides.primaryOffice}
            className={classNames("__wab_instance", sty.primaryOffice)}
            onChange={async (...eventArgs) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["primaryOffice", "value"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            options={(() => {
              const __composite = [
                { value: null, label: null },
                { value: null, label: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null }
              ];

              __composite["0"]["value"] = "CEO";
              __composite["0"]["label"] = "CEO";
              __composite["1"]["value"] = "COO/ Managing director";
              __composite["1"]["label"] = "COO/ Managing director";
              __composite["2"]["value"] = "CMO";
              __composite["3"]["value"] = "Creative Director";
              __composite["4"]["value"] = "Art Director";
              __composite["5"]["value"] = "Graphic Designer";
              __composite["6"]["value"] = "Copywriter";
              __composite["7"]["value"] = "Content Strategist";
              __composite["8"]["value"] = "Social Media Manager";
              __composite["9"]["value"] = "SEO Especialist";
              __composite["10"]["value"] = "PPC Specialist";
              __composite["11"]["value"] = "Account Manager";
              __composite["12"]["value"] = "Client Services Director";
              __composite["13"]["value"] = "Media Planner";
              __composite["14"]["value"] = "Digital Marketing Manager";
              __composite["15"]["value"] = "Brand Strategist";
              __composite["16"]["value"] = "Project Manager";
              __composite["17"]["value"] = "UX/UI Designer";
              __composite["18"]["value"] = "Marketing Analyst";
              __composite["19"]["value"] = "Public Relations Specialist";
              __composite["20"]["value"] = "Videographer";
              __composite["21"]["value"] = "Marketing Coordinator";
              __composite["22"]["value"] = "Junior Marketing Associate";
              __composite["23"]["value"] = "Data Analyst";
              __composite["24"]["value"] = "Email Marketing Specialist";
              __composite["25"]["value"] = "Marketing Automation Specialist";
              __composite["26"]["value"] = "Influencer Marketing Manager";
              __composite["27"]["value"] = "Business Development Manager";
              return __composite;
            })()}
            placeholder={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__atEnS
                )}
              >
                {"Primary Office"}
              </div>
            }
            value={generateStateValueProp($state, ["primaryOffice", "value"])}
          />

          <Select
            data-plasmic-name={"secundaryOffice"}
            data-plasmic-override={overrides.secundaryOffice}
            className={classNames("__wab_instance", sty.secundaryOffice)}
            onChange={async (...eventArgs) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["secundaryOffice", "value"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            options={(() => {
              const __composite = [
                { value: null, label: null },
                { value: null, label: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null },
                { value: null }
              ];

              __composite["0"]["value"] = "CEO";
              __composite["0"]["label"] = "CEO";
              __composite["1"]["value"] = "COO/ Managing director";
              __composite["1"]["label"] = "COO/ Managing director";
              __composite["2"]["value"] = "CMO";
              __composite["3"]["value"] = "Creative Director";
              __composite["4"]["value"] = "Art Director";
              __composite["5"]["value"] = "Graphic Designer";
              __composite["6"]["value"] = "Copywriter";
              __composite["7"]["value"] = "Content Strategist";
              __composite["8"]["value"] = "Social Media Manager";
              __composite["9"]["value"] = "SEO Especialist";
              __composite["10"]["value"] = "PPC Specialist";
              __composite["11"]["value"] = "Account Manager";
              __composite["12"]["value"] = "Client Services Director";
              __composite["13"]["value"] = "Media Planner";
              __composite["14"]["value"] = "Digital Marketing Manager";
              __composite["15"]["value"] = "Brand Strategist";
              __composite["16"]["value"] = "Project Manager";
              __composite["17"]["value"] = "UX/UI Designer";
              __composite["18"]["value"] = "Marketing Analyst";
              __composite["19"]["value"] = "Public Relations Specialist";
              __composite["20"]["value"] = "Videographer";
              __composite["21"]["value"] = "Marketing Coordinator";
              __composite["22"]["value"] = "Junior Marketing Associate";
              __composite["23"]["value"] = "Data Analyst";
              __composite["24"]["value"] = "Email Marketing Specialist";
              __composite["25"]["value"] = "Marketing Automation Specialist";
              __composite["26"]["value"] = "Influencer Marketing Manager";
              __composite["27"]["value"] = "Business Development Manager";
              return __composite;
            })()}
            placeholder={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___53QIq
                )}
              >
                {"Secundary Office (optional)"}
              </div>
            }
            value={generateStateValueProp($state, ["secundaryOffice", "value"])}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xQHaF
            )}
          >
            {"Employment"}
          </div>
          <textarea
            data-plasmic-name={"textarea"}
            data-plasmic-override={overrides.textarea}
            className={classNames(
              projectcss.all,
              projectcss.textarea,
              sty.textarea
            )}
            onChange={async (...eventArgs) => {
              (e => {
                generateStateOnChangeProp($state, ["textarea", "value"])(
                  e.target.value
                );
              }).apply(null, eventArgs);
            }}
            placeholder={
              "Employers, position / titles, and dates. Use a separate line for each job, most recent first."
            }
            ref={ref => {
              $refs["textarea"] = ref;
            }}
            value={generateStateValueProp($state, ["textarea", "value"]) ?? ""}
          />

          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__j6Euo)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"150px"}
            loading={"lazy"}
            src={{
              src: icon04320X320Png44Ctc89HVbBq,
              fullWidth: 320,
              fullHeight: 320,
              aspectRatio: undefined
            }}
          />
        </section>
        <section
          data-plasmic-name={"countainer5"}
          data-plasmic-override={overrides.countainer5}
          className={classNames(projectcss.all, sty.countainer5)}
        >
          <div className={classNames(projectcss.all, sty.freeBox___1Haq)}>
            <div className={classNames(projectcss.all, sty.freeBox__akKiS)}>
              <AntdPopover
                data-plasmic-name={"popover7"}
                data-plasmic-override={overrides.popover7}
                arrow={true}
                className={classNames("__wab_instance", sty.popover7)}
                content={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__la8ZC
                    )}
                  >
                    {"Brand Strategist"}
                  </div>
                }
                contentText={"Popover contents"}
                defaultOpen={false}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, ["popover7", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["popover7", "open"])}
                popoverScopeClassName={sty["popover7__popover"]}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zs20Y
                    )}
                  >
                    {"Skill description:"}
                  </div>
                }
              >
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__psgRj
                  )}
                  color={"sand"}
                  shape={"rounded"}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h5SF1
                    )}
                  >
                    {"Skill"}
                  </div>
                </LoginButton>
              </AntdPopover>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__tyNaK)}>
              <AntdPopover
                data-plasmic-name={"popover8"}
                data-plasmic-override={overrides.popover8}
                arrow={true}
                className={classNames("__wab_instance", sty.popover8)}
                content={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uaxR4
                    )}
                  >
                    {"Brand Strategist"}
                  </div>
                }
                contentText={"Popover contents"}
                defaultOpen={false}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, ["popover8", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["popover8", "open"])}
                popoverScopeClassName={sty["popover8__popover"]}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ttvTv
                    )}
                  >
                    {"Skill description:"}
                  </div>
                }
              >
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton___7TFbK
                  )}
                  color={"sand"}
                  shape={"rounded"}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2Ji9U
                    )}
                  >
                    {"Skill"}
                  </div>
                </LoginButton>
              </AntdPopover>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zu8Zf)}>
              <AntdPopover
                data-plasmic-name={"popover9"}
                data-plasmic-override={overrides.popover9}
                arrow={true}
                className={classNames("__wab_instance", sty.popover9)}
                content={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___60Q2F
                    )}
                  >
                    {"Brand Strategist"}
                  </div>
                }
                contentText={"Popover contents"}
                defaultOpen={false}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, ["popover9", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["popover9", "open"])}
                popoverScopeClassName={sty["popover9__popover"]}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pA7P
                    )}
                  >
                    {"Skill description:"}
                  </div>
                }
              >
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__wghFf
                  )}
                  color={"sand"}
                  shape={"rounded"}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qwS0P
                    )}
                  >
                    {"Skill"}
                  </div>
                </LoginButton>
              </AntdPopover>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__e6Jse)}>
              <AntdPopover
                data-plasmic-name={"popover10"}
                data-plasmic-override={overrides.popover10}
                arrow={true}
                className={classNames("__wab_instance", sty.popover10)}
                content={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bEpX
                    )}
                  >
                    {"Brand Strategist"}
                  </div>
                }
                contentText={"Popover contents"}
                defaultOpen={false}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "popover10",
                    "open"
                  ]).apply(null, eventArgs);
                }}
                open={generateStateValueProp($state, ["popover10", "open"])}
                popoverScopeClassName={sty["popover10__popover"]}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uoRlj
                    )}
                  >
                    {"Skill description:"}
                  </div>
                }
              >
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__p8Wt6
                  )}
                  color={"sand"}
                  shape={"rounded"}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ccI2
                    )}
                  >
                    {"Skill"}
                  </div>
                </LoginButton>
              </AntdPopover>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__rex4X)}>
              <AntdPopover
                data-plasmic-name={"popover11"}
                data-plasmic-override={overrides.popover11}
                arrow={true}
                className={classNames("__wab_instance", sty.popover11)}
                content={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rXgM
                    )}
                  >
                    {"Brand Strategist"}
                  </div>
                }
                contentText={"Popover contents"}
                defaultOpen={false}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "popover11",
                    "open"
                  ]).apply(null, eventArgs);
                }}
                open={generateStateValueProp($state, ["popover11", "open"])}
                popoverScopeClassName={sty["popover11__popover"]}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jPaGw
                    )}
                  >
                    {"Skill description:"}
                  </div>
                }
              >
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__e7T90
                  )}
                  color={"sand"}
                  shape={"rounded"}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ripjp
                    )}
                  >
                    {"Skill"}
                  </div>
                </LoginButton>
              </AntdPopover>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__agbKh)}>
              <AntdPopover
                data-plasmic-name={"popover12"}
                data-plasmic-override={overrides.popover12}
                arrow={true}
                className={classNames("__wab_instance", sty.popover12)}
                content={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pt6On
                    )}
                  >
                    {"Brand Strategist"}
                  </div>
                }
                contentText={"Popover contents"}
                defaultOpen={false}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "popover12",
                    "open"
                  ]).apply(null, eventArgs);
                }}
                open={generateStateValueProp($state, ["popover12", "open"])}
                popoverScopeClassName={sty["popover12__popover"]}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vDfcj
                    )}
                  >
                    {"Skill description:"}
                  </div>
                }
              >
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__rsfoc
                  )}
                  color={"sand"}
                  shape={"rounded"}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6Gd5R
                    )}
                  >
                    {"Skill"}
                  </div>
                </LoginButton>
              </AntdPopover>
            </div>
          </div>
        </section>
        <section
          data-plasmic-name={"countainer7"}
          data-plasmic-override={overrides.countainer7}
          className={classNames(projectcss.all, sty.countainer7)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vj9J8
            )}
          >
            {"Impressive accomplishment"}
          </div>
          <textarea
            data-plasmic-name={"textarea3"}
            data-plasmic-override={overrides.textarea3}
            className={classNames(
              projectcss.all,
              projectcss.textarea,
              sty.textarea3
            )}
            onChange={async (...eventArgs) => {
              (e => {
                generateStateOnChangeProp($state, ["textarea3", "value"])(
                  e.target.value
                );
              }).apply(null, eventArgs);
            }}
            placeholder={
              "For example, an academic or professional achievement, an award you've won, or something impressive you've built."
            }
            ref={ref => {
              $refs["textarea3"] = ref;
            }}
            value={generateStateValueProp($state, ["textarea3", "value"]) ?? ""}
          />

          <Icon10Icon
            className={classNames(projectcss.all, sty.svg__hYAy)}
            role={"img"}
          />

          <Icon10Icon
            className={classNames(projectcss.all, sty.svg___079Vq)}
            role={"img"}
          />
        </section>
        <div className={classNames(projectcss.all, sty.freeBox__q4SdJ)}>
          <Stack__
            as={"div"}
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column___977Xs)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___9Dn5)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__uWxLa)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  src={{
                    src: image2VI4RGpe3Fq47,
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pXaKq)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rbkdx
                    )}
                  >
                    {"Connect with us"}
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__lgi1P)}
                  >
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg___0O8L1)}
                      role={"img"}
                    />

                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__qZaF3)}
                      role={"img"}
                    />

                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__zc04W)}
                      role={"img"}
                    />
                  </Stack__>
                </Stack__>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.column__edOEp)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zAmAm)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__n3PYv
                  )}
                >
                  {"Product"}
                </div>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__eWlqz
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg___8KZbj)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__ll4E)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vaIsX
                    )}
                  >
                    {"Pricing"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__uuIs
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__qn8P)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg___1MmZ)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tyzD
                    )}
                  >
                    {"Log in"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__jiof5
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__tfS8)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__popRc)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t1GfY
                    )}
                  >
                    {"Integrations"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__xms7H
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__ywTbd)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__sb4Z)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__orvTy
                    )}
                  >
                    {"Insights"}
                  </div>
                </LoginButton>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.column__xd4Fx)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lfZ1J)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sjgGt
                  )}
                >
                  {"Support"}
                </div>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__etxS3
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__e6BfE)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__dwdQt)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h7L6
                    )}
                  >
                    {"Documentation"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__xhCX
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__rf4Jk)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__kCrGa)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__prDrg
                    )}
                  >
                    {"FAQs"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__dcCnt
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__aS8T)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__icdKo)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__quuyR
                    )}
                  >
                    {"Status"}
                  </div>
                </LoginButton>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.column__oml1L)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rGyit)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__v3Tz
                  )}
                >
                  {"Company"}
                </div>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__fvLlO
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__mCbn8)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__dmzgL)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iCsCb
                    )}
                  >
                    {"About"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__qbPkj
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg___3Zjhj)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__n6FnU)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lo3Oq
                    )}
                  >
                    {"Contact us"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton___8CvDh
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__wTcTc)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__mZvQi)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ifja
                    )}
                  >
                    {"Careers"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__u8Kzz
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__gDiq)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__w0BiI)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7YR
                    )}
                  >
                    {"Media"}
                  </div>
                </LoginButton>
              </Stack__>
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "countainer1",
    "firstName",
    "lastName",
    "location",
    "email",
    "dateTimePicker",
    "linkedIn",
    "instagram",
    "x",
    "upload",
    "button",
    "countainer2",
    "lastInput",
    "checkbox",
    "countainer3",
    "sliderCarousel",
    "plusButton",
    "countainer4",
    "primaryOffice",
    "secundaryOffice",
    "textarea",
    "countainer5",
    "popover7",
    "popover8",
    "popover9",
    "popover10",
    "popover11",
    "popover12",
    "countainer7",
    "textarea3",
    "columns"
  ],

  countainer1: [
    "countainer1",
    "firstName",
    "lastName",
    "location",
    "email",
    "dateTimePicker",
    "linkedIn",
    "instagram",
    "x",
    "upload",
    "button"
  ],

  firstName: ["firstName"],
  lastName: ["lastName"],
  location: ["location"],
  email: ["email"],
  dateTimePicker: ["dateTimePicker"],
  linkedIn: ["linkedIn"],
  instagram: ["instagram"],
  x: ["x"],
  upload: ["upload", "button"],
  button: ["button"],
  countainer2: ["countainer2", "lastInput", "checkbox"],
  lastInput: ["lastInput"],
  checkbox: ["checkbox"],
  countainer3: ["countainer3", "sliderCarousel", "plusButton"],
  sliderCarousel: ["sliderCarousel"],
  plusButton: ["plusButton"],
  countainer4: ["countainer4", "primaryOffice", "secundaryOffice", "textarea"],
  primaryOffice: ["primaryOffice"],
  secundaryOffice: ["secundaryOffice"],
  textarea: ["textarea"],
  countainer5: [
    "countainer5",
    "popover7",
    "popover8",
    "popover9",
    "popover10",
    "popover11",
    "popover12"
  ],

  popover7: ["popover7"],
  popover8: ["popover8"],
  popover9: ["popover9"],
  popover10: ["popover10"],
  popover11: ["popover11"],
  popover12: ["popover12"],
  countainer7: ["countainer7", "textarea3"],
  textarea3: ["textarea3"],
  columns: ["columns"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicACreateAccount__ArgProps,
          internalVariantPropNames: PlasmicACreateAccount__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicACreateAccount__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicACreateAccount";
  } else {
    func.displayName = `PlasmicACreateAccount.${nodeName}`;
  }
  return func;
}

export const PlasmicACreateAccount = Object.assign(
  // Top-level PlasmicACreateAccount renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    countainer1: makeNodeComponent("countainer1"),
    firstName: makeNodeComponent("firstName"),
    lastName: makeNodeComponent("lastName"),
    location: makeNodeComponent("location"),
    email: makeNodeComponent("email"),
    dateTimePicker: makeNodeComponent("dateTimePicker"),
    linkedIn: makeNodeComponent("linkedIn"),
    instagram: makeNodeComponent("instagram"),
    x: makeNodeComponent("x"),
    upload: makeNodeComponent("upload"),
    button: makeNodeComponent("button"),
    countainer2: makeNodeComponent("countainer2"),
    lastInput: makeNodeComponent("lastInput"),
    checkbox: makeNodeComponent("checkbox"),
    countainer3: makeNodeComponent("countainer3"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    plusButton: makeNodeComponent("plusButton"),
    countainer4: makeNodeComponent("countainer4"),
    primaryOffice: makeNodeComponent("primaryOffice"),
    secundaryOffice: makeNodeComponent("secundaryOffice"),
    textarea: makeNodeComponent("textarea"),
    countainer5: makeNodeComponent("countainer5"),
    popover7: makeNodeComponent("popover7"),
    popover8: makeNodeComponent("popover8"),
    popover9: makeNodeComponent("popover9"),
    popover10: makeNodeComponent("popover10"),
    popover11: makeNodeComponent("popover11"),
    popover12: makeNodeComponent("popover12"),
    countainer7: makeNodeComponent("countainer7"),
    textarea3: makeNodeComponent("textarea3"),
    columns: makeNodeComponent("columns"),
    // Metadata about props expected for PlasmicACreateAccount
    internalVariantProps: PlasmicACreateAccount__VariantProps,
    internalArgProps: PlasmicACreateAccount__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicACreateAccount;
/* prettier-ignore-end */
