/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6Q26EfqfPNQuydumhAEs1S
// Component: 2x5xHbZP3mfa
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicInvalidate } from "@plasmicapp/react-web/lib/data-sources";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdOptionGroup } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdOption } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdSteps } from "@plasmicpkgs/antd5/skinny/registerSteps";
import LoginButton from "../../LoginButton"; // plasmic-import: sda60oPQ2thQ/component
import LinkPreview from "../../LinkPreview"; // plasmic-import: _qIMScZIkWBJ/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import Statistic from "../../Statistic"; // plasmic-import: XiE-mD4aZZD3/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { useScreenVariants as useScreenVariantsnnPusS1DHa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nnPus_s1dHa_/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6Q26EfqfPNQuydumhAEs1S/projectcss
import sty from "./PlasmicAServiceDashboard.module.css"; // plasmic-import: 2x5xHbZP3mfa/css
import ChevronDownSvgIcon from "./icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: Bg6ckfv9Qt0z/icon
import logoPng2S9Gcm9LGTbT6 from "./images/logoPng2.png"; // plasmic-import: s9GCM9lGTbT6/picture

createPlasmicElementProxy;

export const PlasmicAServiceDashboard__VariantProps = new Array();

export const PlasmicAServiceDashboard__ArgProps = new Array();

const $$ = {};

function PlasmicAServiceDashboard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "steps.current",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "popover6.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover7.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover8.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover9.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover10.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnnPusS1DHa()
  });
  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"topBar"}
          data-plasmic-override={overrides.topBar}
          hasGap={true}
          className={classNames(projectcss.all, sty.topBar)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jeG)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fFArP)}
            >
              <NavigationBar
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                brand={
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__di9GI
                    )}
                    href={`/affiliate-homepage`}
                    onClick={async event => {
                      const $steps = {};
                      $steps["refreshData"] = true
                        ? (() => {
                            const actionArgs = {
                              queryInvalidation: ["plasmic_refresh_all"]
                            };
                            return (async ({ queryInvalidation }) => {
                              if (!queryInvalidation) {
                                return;
                              }
                              await plasmicInvalidate(queryInvalidation);
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["refreshData"] != null &&
                        typeof $steps["refreshData"] === "object" &&
                        typeof $steps["refreshData"].then === "function"
                      ) {
                        $steps["refreshData"] = await $steps["refreshData"];
                      }
                    }}
                    platform={"react"}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__hmGh4)}
                      displayHeight={"30px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: logoPng2S9Gcm9LGTbT6,
                        fullWidth: 190,
                        fullHeight: 100,
                        aspectRatio: undefined
                      }}
                    />
                  </PlasmicLink__>
                }
                className={classNames("__wab_instance", sty.navigationBar)}
                closeButton={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__r2ZvN)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={"https://static1.plasmic.app/close.svg"}
                  />
                }
                itemsGap={8}
                menuItems={
                  <React.Fragment>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__psa5C
                      )}
                      href={`/community-dashboard`}
                      platform={"react"}
                    >
                      {"Community Dashboard"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__co4Qc
                      )}
                      href={`/service-dashboard`}
                      platform={"react"}
                    >
                      {"Service\nDashboard"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__ze31
                      )}
                      platform={"react"}
                    >
                      {"Market\nTrends"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__yqpF
                      )}
                      href={`/find-a-business`}
                      platform={"react"}
                    >
                      {"Find a \nbusiness"}
                    </PlasmicLink__>
                  </React.Fragment>
                }
                openButton={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ix4Gp)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={``}
                    src={"https://static1.plasmic.app/menu.svg"}
                    width={``}
                  />
                }
                responsiveBreakpoint={768}
              />

              <AntdDropdown
                data-plasmic-name={"account"}
                data-plasmic-override={overrides.account}
                className={classNames("__wab_instance", sty.account)}
                dropdownMenuScopeClassName={sty["account__dropdownMenu"]}
                menuClassName={classNames({ [sty["pcls_2JEY1FrkHmaJ"]]: true })}
                menuItemClassName={classNames({
                  [sty["pcls_idwCL7alHVQL"]]: true
                })}
                menuItems={() => (
                  <React.Fragment>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__eAMlS
                      )}
                      key={"menu-item-1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vQTxI
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem___0Vbp9
                      )}
                      key={"menu-item-2"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jDz8Z
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                  </React.Fragment>
                )}
                menuItemsJson={(() => {
                  const __composite = [
                    { type: null, label: null, children: null },
                    {
                      type: null,
                      value: "action1",
                      label: null,
                      children: null
                    },
                    {
                      type: null,
                      value: "action2",
                      label: null,
                      onClick: null
                    }
                  ];

                  __composite["0"]["type"] = "group";
                  __composite["0"]["label"] = "User";
                  __composite["0"]["children"] = (() => {
                    const __composite = [
                      { type: "item", label: null, onClick: null },
                      { type: "item", label: null, onClick: null },
                      { type: null }
                    ];

                    __composite["0"]["label"] = "Profile";
                    __composite["0"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToAProfile"] = true
                        ? (() => {
                            const actionArgs = { destination: `/profile` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToAProfile"] != null &&
                        typeof $steps["goToAProfile"] === "object" &&
                        typeof $steps["goToAProfile"].then === "function"
                      ) {
                        $steps["goToAProfile"] = await $steps["goToAProfile"];
                      }
                    };
                    __composite["1"]["label"] = "Edit profile";
                    __composite["1"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToACreateAccount"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/a-create account`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToACreateAccount"] != null &&
                        typeof $steps["goToACreateAccount"] === "object" &&
                        typeof $steps["goToACreateAccount"].then === "function"
                      ) {
                        $steps["goToACreateAccount"] = await $steps[
                          "goToACreateAccount"
                        ];
                      }
                    };
                    __composite["2"]["type"] = "divider";
                    return __composite;
                  })();
                  __composite["1"]["type"] = "group";
                  __composite["1"]["label"] = "Account";
                  __composite["1"]["children"] = (() => {
                    const __composite = [
                      { type: "item", label: null, onClick: null },
                      { type: "item", label: null, onClick: null },
                      { type: null }
                    ];

                    __composite["0"]["label"] = "Settings & Privacy";
                    __composite["0"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToALogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/a-login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToALogin"] != null &&
                        typeof $steps["goToALogin"] === "object" &&
                        typeof $steps["goToALogin"].then === "function"
                      ) {
                        $steps["goToALogin"] = await $steps["goToALogin"];
                      }
                    };
                    __composite["1"]["label"] = "Help";
                    __composite["1"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToALogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/a-login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToALogin"] != null &&
                        typeof $steps["goToALogin"] === "object" &&
                        typeof $steps["goToALogin"].then === "function"
                      ) {
                        $steps["goToALogin"] = await $steps["goToALogin"];
                      }
                    };
                    __composite["2"]["type"] = "divider";
                    return __composite;
                  })();
                  __composite["2"]["type"] = "item";
                  __composite["2"]["label"] = "Sign out";
                  __composite["2"]["onClick"] = async info => {
                    const $steps = {};
                    $steps["goToALogin"] = true
                      ? (() => {
                          const actionArgs = { destination: `/a-login` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              location.assign(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToALogin"] != null &&
                      typeof $steps["goToALogin"] === "object" &&
                      typeof $steps["goToALogin"].then === "function"
                    ) {
                      $steps["goToALogin"] = await $steps["goToALogin"];
                    }
                  };
                  return __composite;
                })()}
                trigger={"hover"}
                useMenuItemsSlot={false}
              >
                <AntdButton
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  href={`/a-login`}
                  target={true}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__vft8)}
                    displayHeight={"30px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"30px"}
                    loading={"lazy"}
                  />
                </AntdButton>
              </AntdDropdown>
            </Stack__>
          </Stack__>
        </Stack__>
        <div
          data-plasmic-name={"container2"}
          data-plasmic-override={overrides.container2}
          className={classNames(projectcss.all, sty.container2)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__pNcCk)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ucNn7
              )}
            >
              {"Community goal"}
            </div>
            <AntdProgress
              className={classNames("__wab_instance", sty.progress__c4CxT)}
              gradient={[]}
              size={"default"}
              status={"active"}
              strokeColor={"#000000"}
              type={"dashboard"}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__vqeAi)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8UwP
              )}
            >
              {"Days remaining"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yhjG9
              )}
            >
              {"10"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__wWqu0)}>
            <AntdSelect
              data-plasmic-name={"select"}
              data-plasmic-override={overrides.select}
              allowClear={true}
              className={classNames("__wab_instance", sty.select)}
              defaultOpen={false}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              disabled={false}
              mode={"single"}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["select", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              options={[
                { value: "option1", label: "Option 1", type: "option" },
                { value: "option2", label: "Option 2", type: "option" }
              ]}
              placeholder={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sp9C
                  )}
                >
                  {"Company"}
                </div>
              }
              popupScopeClassName={sty["select__popup"]}
              suffixIcon={
                <ChevronDownSvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              }
              useChildren={true}
              value={generateStateValueProp($state, ["select", "value"])}
            >
              <AntdOptionGroup
                data-plasmic-name={"optionGroup"}
                data-plasmic-override={overrides.optionGroup}
                className={classNames("__wab_instance", sty.optionGroup)}
                label={null}
              >
                <AntdOption
                  className={classNames("__wab_instance", sty.option___8J3G9)}
                  value={"option1"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8Dlk8)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__teM46)}
                      displayHeight={"25px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"25px"}
                      loading={"lazy"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u4FY1
                      )}
                    >
                      {"Company"}
                    </div>
                  </div>
                </AntdOption>
                <AntdOption
                  className={classNames("__wab_instance", sty.option__lknh0)}
                  value={"option2"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xBDnz)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__oqT7F)}
                      displayHeight={"25px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"25px"}
                      loading={"lazy"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hbV2
                      )}
                    >
                      {"Company"}
                    </div>
                  </div>
                </AntdOption>
              </AntdOptionGroup>
            </AntdSelect>
            <AntdProgress
              className={classNames("__wab_instance", sty.progress__vXufz)}
              percent={4}
              size={"default"}
              status={"normal"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__yooth)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zladT
                )}
              >
                {"50"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dpwyb
                )}
              >
                {"/"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bOhFt
                )}
              >
                {"50"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mnwRa
                )}
              >
                {" completed"}
              </div>
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"container3"}
          data-plasmic-override={overrides.container3}
          className={classNames(projectcss.all, sty.container3)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1R7Xq
            )}
          >
            {"Service monitoring"}
          </div>
          <AntdSteps
            data-plasmic-name={"steps"}
            data-plasmic-override={overrides.steps}
            className={classNames("__wab_instance", sty.steps)}
            current={generateStateValueProp($state, ["steps", "current"])}
            direction={"horizontal"}
            items={(() => {
              const __composite = [
                {
                  title: null,
                  description: null,
                  disabled: null,
                  subTitle: null
                },
                { title: null, description: null },
                { title: null, description: null },
                { title: null, description: null },
                { title: null, description: null }
              ];

              __composite["0"]["title"] = "Awaiting confirmation";
              __composite["0"]["description"] = "15";
              __composite["0"]["disabled"] = false;
              __composite["0"]["subTitle"] = ``;
              __composite["1"]["title"] = "First Step";
              __composite["1"]["description"] = "10";
              __composite["2"]["title"] = "Task execution";
              __composite["2"]["description"] = "10";
              __composite["3"]["title"] = "Final confirmation";
              __composite["3"]["description"] = "5";
              __composite["4"]["title"] = "Customer Satisfaction";
              __composite["4"]["description"] = "3";
              return __composite;
            })()}
            onChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["steps", "current"]).apply(
                null,
                eventArgs
              );
            }}
            percent={60}
            progressDot={false}
            responsive={false}
            size={"small"}
            status={"process"}
            type={"default"}
          />
        </div>
        <div
          data-plasmic-name={"container4"}
          data-plasmic-override={overrides.container4}
          className={classNames(projectcss.all, sty.container4)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__qxTq7)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qfKWv
              )}
            >
              {"Sector opportunity"}
            </div>
            <LoginButton
              className={classNames("__wab_instance", sty.loginButton___57P1C)}
              color={"softSand"}
              shape={"rounded"}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dvgxb
                )}
              >
                {"Suggest link"}
              </div>
            </LoginButton>
          </div>
          <LinkPreview
            className={classNames("__wab_instance", sty.linkPreview__f4Bgy)}
            url={"https://www.bbc.com/news/articles/c5yd88d2lxzo"}
          />

          <div className={classNames(projectcss.all, sty.freeBox__uOw1Q)}>
            <LoginButton
              className={classNames("__wab_instance", sty.loginButton__i1FJp)}
              color={"softSand"}
              shape={"rounded"}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s934
                )}
              >
                {"Suggest link"}
              </div>
            </LoginButton>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wHa6R
              )}
            >
              {"Sector threats"}
            </div>
          </div>
          <LinkPreview
            className={classNames("__wab_instance", sty.linkPreview___59Hcr)}
            url={"https://www.bbc.com/news/articles/c8xl5vnlzpwo"}
          />
        </div>
        <div
          data-plasmic-name={"container6"}
          data-plasmic-override={overrides.container6}
          className={classNames(projectcss.all, sty.container6)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ejTb7
            )}
          >
            {"Main Competitive"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__xbn5Q)}>
            <AntdPopover
              data-plasmic-name={"popover6"}
              data-plasmic-override={overrides.popover6}
              arrow={true}
              className={classNames("__wab_instance", sty.popover6)}
              content={
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xr9Wg)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__if7HZ
                      )}
                    >
                      {"Strengs:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__abk0W
                      )}
                    >
                      {"Strengs"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pP5Jq)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rftxe
                      )}
                    >
                      {"Weakness:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iTygg
                      )}
                    >
                      {"Weakness"}
                    </div>
                  </div>
                </React.Fragment>
              }
              contentText={"Popover contents"}
              defaultOpen={false}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              mouseEnterDelay={0}
              mouseLeaveDelay={0}
              onOpenChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["popover6", "open"]).apply(
                  null,
                  eventArgs
                );
              }}
              open={generateStateValueProp($state, ["popover6", "open"])}
              overlayClassName={classNames({
                [sty["pcls_lDAlPMmwuXLo"]]: true
              })}
              popoverContentClassName={classNames({
                [sty["pcls_dSiWmE2oYkuN"]]: true
              })}
              popoverScopeClassName={sty["popover6__popover"]}
              title={
                <div className={classNames(projectcss.all, sty.freeBox__zmK7)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mBiWx
                    )}
                  >
                    {"Time on the market: "}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wtv19
                    )}
                  >
                    {"20"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qcE8C
                    )}
                  >
                    {"years"}
                  </div>
                </div>
              }
            >
              <LoginButton
                className={classNames("__wab_instance", sty.loginButton__hNidl)}
                color={"softSand"}
                showStartIcon={true}
                startIcon={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__jmTo)}
                    displayHeight={"30px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"30px"}
                    loading={"lazy"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qcIvP
                  )}
                >
                  {"Competitive"}
                </div>
              </LoginButton>
            </AntdPopover>
            <AntdPopover
              data-plasmic-name={"popover7"}
              data-plasmic-override={overrides.popover7}
              arrow={true}
              className={classNames("__wab_instance", sty.popover7)}
              content={
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__juvs3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ixyRw
                      )}
                    >
                      {"Strengs:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nHHeK
                      )}
                    >
                      {"Strengs"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__enpCj)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ue3Bw
                      )}
                    >
                      {"Weakness:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wW5Ax
                      )}
                    >
                      {"Weakness"}
                    </div>
                  </div>
                </React.Fragment>
              }
              contentText={"Popover contents"}
              defaultOpen={false}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              mouseEnterDelay={0}
              mouseLeaveDelay={0}
              onOpenChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["popover7", "open"]).apply(
                  null,
                  eventArgs
                );
              }}
              open={generateStateValueProp($state, ["popover7", "open"])}
              overlayClassName={classNames({
                [sty["pcls_yXWt3sPT56jE"]]: true
              })}
              popoverContentClassName={classNames({
                [sty["pcls_-Mhu62_CAZNs"]]: true
              })}
              popoverScopeClassName={sty["popover7__popover"]}
              title={
                <div className={classNames(projectcss.all, sty.freeBox__kG4Dl)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vCjwl
                    )}
                  >
                    {"Time on the market: "}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pHxC6
                    )}
                  >
                    {"20"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wn5K
                    )}
                  >
                    {"years"}
                  </div>
                </div>
              }
            >
              <LoginButton
                className={classNames("__wab_instance", sty.loginButton__ixkfX)}
                color={"softSand"}
                showStartIcon={true}
                startIcon={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___65LNv)}
                    displayHeight={"30px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"30px"}
                    loading={"lazy"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rtnfc
                  )}
                >
                  {"Competitive"}
                </div>
              </LoginButton>
            </AntdPopover>
            <AntdPopover
              data-plasmic-name={"popover8"}
              data-plasmic-override={overrides.popover8}
              arrow={true}
              className={classNames("__wab_instance", sty.popover8)}
              content={
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nTJl)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8TMem
                      )}
                    >
                      {"Strengs:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__s99Oy
                      )}
                    >
                      {"Strengs"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ammAf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rgM9M
                      )}
                    >
                      {"Weakness:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__a6ENa
                      )}
                    >
                      {"Weakness"}
                    </div>
                  </div>
                </React.Fragment>
              }
              contentText={"Popover contents"}
              defaultOpen={false}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              mouseEnterDelay={0}
              mouseLeaveDelay={0}
              onOpenChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["popover8", "open"]).apply(
                  null,
                  eventArgs
                );
              }}
              open={generateStateValueProp($state, ["popover8", "open"])}
              overlayClassName={classNames({
                [sty["pcls_lCgmxru-UEil"]]: true
              })}
              popoverContentClassName={classNames({
                [sty["pcls_dzF-nq_PsbuR"]]: true
              })}
              popoverScopeClassName={sty["popover8__popover"]}
              title={
                <div className={classNames(projectcss.all, sty.freeBox__n4YkS)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aBcLd
                    )}
                  >
                    {"Time on the market: "}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ivGsK
                    )}
                  >
                    {"20"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8YT8
                    )}
                  >
                    {"years"}
                  </div>
                </div>
              }
            >
              <LoginButton
                className={classNames("__wab_instance", sty.loginButton__brku9)}
                color={"softSand"}
                showStartIcon={true}
                startIcon={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__awcR0)}
                    displayHeight={"30px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"30px"}
                    loading={"lazy"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zFob
                  )}
                >
                  {"Competitive"}
                </div>
              </LoginButton>
            </AntdPopover>
            <AntdPopover
              data-plasmic-name={"popover9"}
              data-plasmic-override={overrides.popover9}
              arrow={true}
              className={classNames("__wab_instance", sty.popover9)}
              content={
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__auZ8S)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xXj
                      )}
                    >
                      {"Strengs:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pch22
                      )}
                    >
                      {"Strengs"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nWhdR)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kgIg
                      )}
                    >
                      {"Weakness:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7DLqW
                      )}
                    >
                      {"Weakness"}
                    </div>
                  </div>
                </React.Fragment>
              }
              contentText={"Popover contents"}
              defaultOpen={false}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              mouseEnterDelay={0}
              mouseLeaveDelay={0}
              onOpenChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["popover9", "open"]).apply(
                  null,
                  eventArgs
                );
              }}
              open={generateStateValueProp($state, ["popover9", "open"])}
              overlayClassName={classNames({
                [sty["pcls_ICeWcQ_5ReR0"]]: true
              })}
              popoverContentClassName={classNames({
                [sty["pcls_oq-T_iHwQkJb"]]: true
              })}
              popoverScopeClassName={sty["popover9__popover"]}
              title={
                <div className={classNames(projectcss.all, sty.freeBox__lbIz)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pUhxm
                    )}
                  >
                    {"Time on the market: "}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cqUsm
                    )}
                  >
                    {"20"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k9C3
                    )}
                  >
                    {"years"}
                  </div>
                </div>
              }
            >
              <LoginButton
                className={classNames("__wab_instance", sty.loginButton__oMpY)}
                color={"softSand"}
                showStartIcon={true}
                startIcon={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__gtf2S)}
                    displayHeight={"30px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"30px"}
                    loading={"lazy"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jbe7D
                  )}
                >
                  {"Competitive"}
                </div>
              </LoginButton>
            </AntdPopover>
            <AntdPopover
              data-plasmic-name={"popover10"}
              data-plasmic-override={overrides.popover10}
              arrow={true}
              className={classNames("__wab_instance", sty.popover10)}
              content={
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__houo9)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pxmlj
                      )}
                    >
                      {"Strengs:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iJedb
                      )}
                    >
                      {"Strengs"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ag6Ct)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bq6Xk
                      )}
                    >
                      {"Weakness:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bnl4I
                      )}
                    >
                      {"Weakness"}
                    </div>
                  </div>
                </React.Fragment>
              }
              contentText={"Popover contents"}
              defaultOpen={false}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              mouseEnterDelay={0}
              mouseLeaveDelay={0}
              onOpenChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["popover10", "open"]).apply(
                  null,
                  eventArgs
                );
              }}
              open={generateStateValueProp($state, ["popover10", "open"])}
              overlayClassName={classNames({
                [sty["pcls_N1sIV2TDKCwv"]]: true
              })}
              popoverContentClassName={classNames({
                [sty["pcls_FnxlNZa_0095"]]: true
              })}
              popoverScopeClassName={sty["popover10__popover"]}
              title={
                <div className={classNames(projectcss.all, sty.freeBox__yOc2L)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cDj4F
                    )}
                  >
                    {"Time on the market: "}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sFuad
                    )}
                  >
                    {"20"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wE1DR
                    )}
                  >
                    {"years"}
                  </div>
                </div>
              }
            >
              <LoginButton
                className={classNames("__wab_instance", sty.loginButton__pWf82)}
                color={"softSand"}
                showStartIcon={true}
                startIcon={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__avQx)}
                    displayHeight={"30px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"30px"}
                    loading={"lazy"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l8EVz
                  )}
                >
                  {"Competitive"}
                </div>
              </LoginButton>
            </AntdPopover>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__mskkJ)}>
            <Statistic
              className={classNames("__wab_instance", sty.statistic__i0SgD)}
              number={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fg893
                  )}
                >
                  {"3,193"}
                </div>
              }
              unit={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uavym
                  )}
                >
                  {"Accumulated earnings"}
                </div>
              }
            />

            <Statistic
              className={classNames("__wab_instance", sty.statistic__oWnO)}
              number={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g9AwZ
                  )}
                >
                  {"3,193"}
                </div>
              }
              unit={
                <div
                  className={classNames(projectcss.all, sty.freeBox___2EGrJ)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__b9QXx
                    )}
                  >
                    {"U$$"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bmpKc
                    )}
                  >
                    {"Company's TAM"}
                  </div>
                </div>
              }
            />

            <Statistic
              className={classNames("__wab_instance", sty.statistic__wCNH)}
              number={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vdPz0
                  )}
                >
                  {"3,193"}
                </div>
              }
              unit={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tvIM
                  )}
                >
                  {"Customer potential"}
                </div>
              }
            />

            <LoginButton
              className={classNames("__wab_instance", sty.loginButton__uyffm)}
              color={"softSand"}
              shape={"rounded"}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sEeL
                )}
              >
                {"Suggest competitive"}
              </div>
            </LoginButton>
          </div>
        </div>
        <div
          data-plasmic-name={"container5"}
          data-plasmic-override={overrides.container5}
          className={classNames(projectcss.all, sty.container5)}
        >
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.table),
              onRowSelectionChanged: async (...eventArgs) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRowKey",
                  ["table", "selectedRowKey"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRow",
                  ["table", "selectedRow"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRows",
                  ["table", "selectedRows"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRowKeys",
                  ["table", "selectedRowKeys"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
              },
              scopeClassName: sty["table__instance"],
              selectedRowKey: generateStateValueProp($state, [
                "table",
                "selectedRowKey"
              ]),
              selectedRowKeys: generateStateValueProp($state, [
                "table",
                "selectedRowKeys"
              ]),
              themeResetClassName: classNames(
                projectcss.root_reset,
                projectcss.root_reset_tags,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "selectedRowKey",
                  plasmicStateName: "table.selectedRowKey"
                },
                {
                  name: "selectedRow",
                  plasmicStateName: "table.selectedRow"
                },
                {
                  name: "selectedRows",
                  plasmicStateName: "table.selectedRows"
                },
                {
                  name: "selectedRowKeys",
                  plasmicStateName: "table.selectedRowKeys"
                }
              ],

              [],
              RichTable_Helpers ?? {},
              child$Props
            );
            return (
              <RichTable
                data-plasmic-name={"table"}
                data-plasmic-override={overrides.table}
                {...child$Props}
              />
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "topBar",
    "navigationBar",
    "account",
    "button",
    "container2",
    "select",
    "optionGroup",
    "svg",
    "container3",
    "steps",
    "container4",
    "container6",
    "popover6",
    "popover7",
    "popover8",
    "popover9",
    "popover10",
    "container5",
    "table"
  ],

  topBar: ["topBar", "navigationBar", "account", "button"],
  navigationBar: ["navigationBar"],
  account: ["account", "button"],
  button: ["button"],
  container2: ["container2", "select", "optionGroup", "svg"],
  select: ["select", "optionGroup", "svg"],
  optionGroup: ["optionGroup"],
  svg: ["svg"],
  container3: ["container3", "steps"],
  steps: ["steps"],
  container4: ["container4"],
  container6: [
    "container6",
    "popover6",
    "popover7",
    "popover8",
    "popover9",
    "popover10"
  ],

  popover6: ["popover6"],
  popover7: ["popover7"],
  popover8: ["popover8"],
  popover9: ["popover9"],
  popover10: ["popover10"],
  container5: ["container5", "table"],
  table: ["table"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAServiceDashboard__ArgProps,
          internalVariantPropNames: PlasmicAServiceDashboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAServiceDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAServiceDashboard";
  } else {
    func.displayName = `PlasmicAServiceDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicAServiceDashboard = Object.assign(
  // Top-level PlasmicAServiceDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topBar: makeNodeComponent("topBar"),
    navigationBar: makeNodeComponent("navigationBar"),
    account: makeNodeComponent("account"),
    button: makeNodeComponent("button"),
    container2: makeNodeComponent("container2"),
    select: makeNodeComponent("select"),
    optionGroup: makeNodeComponent("optionGroup"),
    svg: makeNodeComponent("svg"),
    container3: makeNodeComponent("container3"),
    steps: makeNodeComponent("steps"),
    container4: makeNodeComponent("container4"),
    container6: makeNodeComponent("container6"),
    popover6: makeNodeComponent("popover6"),
    popover7: makeNodeComponent("popover7"),
    popover8: makeNodeComponent("popover8"),
    popover9: makeNodeComponent("popover9"),
    popover10: makeNodeComponent("popover10"),
    container5: makeNodeComponent("container5"),
    table: makeNodeComponent("table"),
    // Metadata about props expected for PlasmicAServiceDashboard
    internalVariantProps: PlasmicAServiceDashboard__VariantProps,
    internalArgProps: PlasmicAServiceDashboard__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Service Dashboard",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAServiceDashboard;
/* prettier-ignore-end */
