/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6Q26EfqfPNQuydumhAEs1S
// Component: Q5W74BP9ZgSa
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  initializePlasmicStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import FirstInput from "../../FirstInput"; // plasmic-import: Tf07dnmbURTH/component
import Select from "../../Select"; // plasmic-import: iuUTkEsiQBLB/component
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import LastInput from "../../LastInput"; // plasmic-import: EprmhitWo7Jg/component
import LoginButton from "../../LoginButton"; // plasmic-import: sda60oPQ2thQ/component
import Checkbox from "../../Checkbox"; // plasmic-import: WriR20HvfHOf/component
import PlusButton from "../../PlusButton"; // plasmic-import: acaccHtQ5A9k/component
import { useScreenVariants as useScreenVariantsnnPusS1DHa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nnPus_s1dHa_/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6Q26EfqfPNQuydumhAEs1S/projectcss
import sty from "./PlasmicCCreateAccount.module.css"; // plasmic-import: Q5W74BP9ZgSa/css
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: W2ddCaRfBmfX/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: wfWC5mb8qBwL/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: -tYB_tag2lQq/icon
import IlustrgatuSvgIcon from "./icons/PlasmicIcon__IlustrgatuSvg"; // plasmic-import: ogpmBO-sGuua/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 7HkI-8U3nJg6/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: iBkKLbgP92VI/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: VLk3vix5PoaW/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 4YJtCeYjgnq4/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: DSe5zJXs0px5/icon
import image2VI4RGpe3Fq47 from "./images/image2.svg"; // plasmic-import: vI4RGpe3Fq47/picture

createPlasmicElementProxy;

export const PlasmicCCreateAccount__VariantProps = new Array();

export const PlasmicCCreateAccount__ArgProps = new Array();

const $$ = {};

function PlasmicCCreateAccount__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "firstName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "location.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dateTimePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "email.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "linkedIn.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "instagram.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "x.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lastInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "educationComponent",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "checkbox.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "companyTagline.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "location2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "location3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "location4[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "location5[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "textarea[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "location6[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "location7[][].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "formObjects",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            solutions: [
              {
                solution: null,
                description: null,
                price: null,
                steps: [{ step: null }]
              }
            ]
          },
          {}
        ]
      },
      {
        path: "textarea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textarea3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textarea4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "upload2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnnPusS1DHa()
  });
  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <section
          data-plasmic-name={"countainer1"}
          data-plasmic-override={overrides.countainer1}
          className={classNames(projectcss.all, sty.countainer1)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__qsN6I)}>
            <UploadWrapper
              data-plasmic-name={"upload"}
              data-plasmic-override={overrides.upload}
              accept={"image/*"}
              className={classNames("__wab_instance", sty.upload)}
              files={generateStateValueProp($state, ["upload", "files"])}
              listType={"picture-card"}
              onFilesChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["upload", "files"]).apply(
                  null,
                  eventArgs
                );
              }}
              showUploadList={false}
            >
              <AntdButton
                className={classNames("__wab_instance", sty.button___8Pbop)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aNg72
                  )}
                >
                  {"Upload"}
                </div>
              </AntdButton>
            </UploadWrapper>
            <div className={classNames(projectcss.all, sty.freeBox__pw2Lf)}>
              <div className={classNames(projectcss.all, sty.freeBox__t3Hoz)}>
                <FirstInput
                  data-plasmic-name={"firstName"}
                  data-plasmic-override={overrides.firstName}
                  className={classNames("__wab_instance", sty.firstName)}
                  onChange={async (...eventArgs) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["firstName", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }).apply(null, eventArgs);
                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  required={true}
                  string={"Company Name"}
                  value={
                    generateStateValueProp($state, ["firstName", "value"]) ?? ""
                  }
                />

                <Select
                  data-plasmic-name={"select"}
                  data-plasmic-override={overrides.select}
                  className={classNames("__wab_instance", sty.select)}
                  color={"softGray"}
                  onChange={async (...eventArgs) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["select", "value"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);
                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  options={[
                    { value: "option1", label: "Option 1" },
                    { value: "option2", label: "Option 2" }
                  ]}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5IWns
                      )}
                    >
                      {"Select\u2026"}
                    </div>
                  }
                  value={generateStateValueProp($state, ["select", "value"])}
                />
              </div>
              <FirstInput
                data-plasmic-name={"email"}
                data-plasmic-override={overrides.email}
                className={classNames("__wab_instance", sty.email)}
                onChange={async (...eventArgs) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["email", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                string={"email"}
                value={generateStateValueProp($state, ["email", "value"]) ?? ""}
              />

              <div className={classNames(projectcss.all, sty.freeBox__kuwoe)}>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.dateTimePicker),
                    disabled: false,
                    onChange: async (...eventArgs) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["dateTimePicker", "value"],
                        AntdDatePicker_Helpers
                      ).apply(null, eventArgs);
                    },
                    popupBodyClassName: classNames({
                      [sty["pcls_Nt1OhTiQuSY6"]]: true
                    }),
                    popupClassName: classNames({
                      [sty["pcls_oouhicriBXLk"]]: true
                    }),
                    popupFooterClassName: classNames({
                      [sty["pcls__zmixd5z-vtJ"]]: true
                    }),
                    popupHeaderClassName: classNames({
                      [sty["pcls__EBYfQBpefc_"]]: true
                    }),
                    popupScopeClassName: sty["dateTimePicker__datePickerPopup"],
                    value: generateStateValueProp($state, [
                      "dateTimePicker",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "dateTimePicker.value"
                      }
                    ],

                    [],
                    AntdDatePicker_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <AntdDatePicker
                      data-plasmic-name={"dateTimePicker"}
                      data-plasmic-override={overrides.dateTimePicker}
                      {...child$Props}
                    />
                  );
                })()}
                <FirstInput
                  data-plasmic-name={"location"}
                  data-plasmic-override={overrides.location}
                  className={classNames("__wab_instance", sty.location)}
                  onChange={async (...eventArgs) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["location", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }).apply(null, eventArgs);
                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  string={"Location"}
                  value={
                    generateStateValueProp($state, ["location", "value"]) ?? ""
                  }
                />
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jvy0C)}>
            <Icon5Icon
              className={classNames(projectcss.all, sty.svg__he1Mv)}
              role={"img"}
            />

            <LastInput
              data-plasmic-name={"linkedIn"}
              data-plasmic-override={overrides.linkedIn}
              className={classNames("__wab_instance", sty.linkedIn)}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["linkedIn", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              string={"LinkedIn"}
              value={
                generateStateValueProp($state, ["linkedIn", "value"]) ?? ""
              }
            />

            <Icon6Icon
              className={classNames(projectcss.all, sty.svg___4XgNx)}
              role={"img"}
            />

            <LastInput
              data-plasmic-name={"instagram"}
              data-plasmic-override={overrides.instagram}
              className={classNames("__wab_instance", sty.instagram)}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["instagram", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              string={"Instagram"}
              value={
                generateStateValueProp($state, ["instagram", "value"]) ?? ""
              }
            />

            <IlustrgatuSvgIcon
              className={classNames(projectcss.all, sty.svg___0AKlL)}
              role={"img"}
            />

            <LastInput
              data-plasmic-name={"x"}
              data-plasmic-override={overrides.x}
              className={classNames("__wab_instance", sty.x)}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["x", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              string={"X"}
              value={generateStateValueProp($state, ["x", "value"]) ?? ""}
            />
          </div>
        </section>
        <section
          data-plasmic-name={"countainer2"}
          data-plasmic-override={overrides.countainer2}
          className={classNames(projectcss.all, sty.countainer2)}
        >
          <LoginButton
            className={classNames("__wab_instance", sty.loginButton__tmA4S)}
            onClick={async event => {
              const $steps = {};
              $steps["goToHomepage"] = true
                ? (() => {
                    const actionArgs = { destination: `/corporative-page` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        location.assign(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToHomepage"] != null &&
                typeof $steps["goToHomepage"] === "object" &&
                typeof $steps["goToHomepage"].then === "function"
              ) {
                $steps["goToHomepage"] = await $steps["goToHomepage"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iLn5J
              )}
            >
              {"Save"}
            </div>
          </LoginButton>
          <div className={classNames(projectcss.all, sty.freeBox__l4ZHk)}>
            <Icon8Icon
              className={classNames(projectcss.all, sty.svg__dnUbb)}
              role={"img"}
            />

            <LastInput
              data-plasmic-name={"lastInput"}
              data-plasmic-override={overrides.lastInput}
              className={classNames("__wab_instance", sty.lastInput)}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["lastInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              string={"Calendly link"}
              value={
                generateStateValueProp($state, ["lastInput", "value"]) ?? ""
              }
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__oDg5K)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ruA79
              )}
            >
              {"Already have an account?"}
            </div>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__dvizV
              )}
              onClick={async event => {
                const $steps = {};
                $steps["goToCLogin"] = true
                  ? (() => {
                      const actionArgs = {};
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToCLogin"] != null &&
                  typeof $steps["goToCLogin"] === "object" &&
                  typeof $steps["goToCLogin"].then === "function"
                ) {
                  $steps["goToCLogin"] = await $steps["goToCLogin"];
                }
              }}
              platform={"react"}
            >
              {"Login"}
            </PlasmicLink__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__hiM8U)}>
            <Checkbox
              data-plasmic-name={"checkbox"}
              data-plasmic-override={overrides.checkbox}
              className={classNames("__wab_instance", sty.checkbox)}
              label={
                <div className={classNames(projectcss.all, sty.freeBox__gxiIn)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rS0Ug
                    )}
                  >
                    {"I accept the"}
                  </div>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__tcDef
                    )}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToALogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/a-login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToALogin"] != null &&
                        typeof $steps["goToALogin"] === "object" &&
                        typeof $steps["goToALogin"].then === "function"
                      ) {
                        $steps["goToALogin"] = await $steps["goToALogin"];
                      }
                    }}
                    platform={"react"}
                  >
                    {"terms and conditions"}
                  </PlasmicLink__>
                </div>
              }
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "checkbox",
                  "isSelected"
                ]).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />
          </div>
        </section>
        <section
          data-plasmic-name={"countainer3"}
          data-plasmic-override={overrides.countainer3}
          className={classNames(projectcss.all, sty.countainer3)}
        >
          <div className={classNames(projectcss.all, sty.freeBox___7PEgk)}>
            <div className={classNames(projectcss.all, sty.freeBox__vo3Vs)}>
              <Select
                data-plasmic-name={"select2"}
                data-plasmic-override={overrides.select2}
                className={classNames("__wab_instance", sty.select2)}
                color={"softGray"}
                onChange={async (...eventArgs) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["select2", "value"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                options={[
                  { value: "option1", label: "Option 1" },
                  { value: "option2", label: "Option 2" }
                ]}
                placeholder={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xHN3
                    )}
                  >
                    {"Niche"}
                  </div>
                }
                value={generateStateValueProp($state, ["select2", "value"])}
              />

              <Select
                data-plasmic-name={"select3"}
                data-plasmic-override={overrides.select3}
                className={classNames("__wab_instance", sty.select3)}
                color={"softGray"}
                onChange={async (...eventArgs) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["select3", "value"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                options={[
                  { value: "option1", label: "Option 1" },
                  { value: "option2", label: "Option 2" }
                ]}
                placeholder={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tqzOn
                    )}
                  >
                    {"Subniche"}
                  </div>
                }
                value={generateStateValueProp($state, ["select3", "value"])}
              />
            </div>
            <FirstInput
              data-plasmic-name={"companyTagline"}
              data-plasmic-override={overrides.companyTagline}
              className={classNames("__wab_instance", sty.companyTagline)}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "companyTagline",
                    "value"
                  ])((e => e.target?.value).apply(null, eventArgs));
                }).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              string={"Company tagline"}
              value={
                generateStateValueProp($state, ["companyTagline", "value"]) ??
                ""
              }
            />

            <div className={classNames(projectcss.all, sty.freeBox__gLjTd)}>
              <FirstInput
                data-plasmic-name={"location2"}
                data-plasmic-override={overrides.location2}
                className={classNames("__wab_instance", sty.location2)}
                onChange={async (...eventArgs) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["location2", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                string={"Company expenses"}
                value={
                  generateStateValueProp($state, ["location2", "value"]) ?? ""
                }
              />

              <FirstInput
                data-plasmic-name={"location3"}
                data-plasmic-override={overrides.location3}
                className={classNames("__wab_instance", sty.location3)}
                onChange={async (...eventArgs) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["location3", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                string={"Location"}
                value={
                  generateStateValueProp($state, ["location3", "value"]) ?? ""
                }
              />
            </div>
          </div>
        </section>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___9YZwB
          )}
        >
          {"Services"}
        </div>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $state.formObjects;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <section
              data-plasmic-name={"countainer4"}
              data-plasmic-override={overrides.countainer4}
              className={classNames(projectcss.all, sty.countainer4)}
              key={currentIndex}
            >
              <div className={classNames(projectcss.all, sty.freeBox__gSgUw)}>
                <div className={classNames(projectcss.all, sty.freeBox__vilQj)}>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.location5),
                      onChange: async (...eventArgs) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "location5",
                            __plasmic_idx_0,
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      string: "Solution",
                      value:
                        generateStateValueProp($state, [
                          "location5",
                          __plasmic_idx_0,
                          "value"
                        ]) ?? ""
                    };
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "location5[].value",
                          initFunc: ({ $props, $state, $queries }) => ""
                        }
                      ],

                      [__plasmic_idx_0]
                    );
                    return (
                      <FirstInput
                        data-plasmic-name={"location5"}
                        data-plasmic-override={overrides.location5}
                        {...child$Props}
                      />
                    );
                  })()}
                  {(() => {
                    const child$Props = {
                      className: classNames(
                        projectcss.all,
                        projectcss.textarea,
                        sty.textarea
                      ),
                      onChange: async (...eventArgs) => {
                        (e => {
                          generateStateOnChangeProp($state, [
                            "textarea",
                            __plasmic_idx_0,
                            "value"
                          ])(e.target.value);
                        }).apply(null, eventArgs);
                      },
                      placeholder: "Description",
                      ref: ref => {
                        $refs["textarea"] = ref;
                      },
                      value:
                        generateStateValueProp($state, [
                          "textarea",
                          __plasmic_idx_0,
                          "value"
                        ]) ?? ""
                    };
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "textarea[].value",
                          initFunc: ({ $props, $state, $queries }) => ``
                        }
                      ],

                      [__plasmic_idx_0]
                    );
                    return (
                      <textarea
                        data-plasmic-name={"textarea"}
                        data-plasmic-override={overrides.textarea}
                        {...child$Props}
                      />
                    );
                  })()}
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.location6),
                      onChange: async (...eventArgs) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "location6",
                            __plasmic_idx_0,
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      string: "Price",
                      value:
                        generateStateValueProp($state, [
                          "location6",
                          __plasmic_idx_0,
                          "value"
                        ]) ?? ""
                    };
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "location6[].value",
                          initFunc: ({ $props, $state, $queries }) => ""
                        }
                      ],

                      [__plasmic_idx_0]
                    );
                    return (
                      <FirstInput
                        data-plasmic-name={"location6"}
                        data-plasmic-override={overrides.location6}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__kwgy)}>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.location4),
                      onChange: async (...eventArgs) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "location4",
                            __plasmic_idx_0,
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      string: "Step",
                      value:
                        generateStateValueProp($state, [
                          "location4",
                          __plasmic_idx_0,
                          "value"
                        ]) ?? ""
                    };
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "location4[].value",
                          initFunc: ({ $props, $state, $queries }) => ""
                        }
                      ],

                      [__plasmic_idx_0]
                    );
                    return (
                      <FirstInput
                        data-plasmic-name={"location4"}
                        data-plasmic-override={overrides.location4}
                        {...child$Props}
                      />
                    );
                  })()}
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.location7;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_1, __plasmic_idx_1) => {
                    const currentItem = __plasmic_item_1;
                    const currentIndex = __plasmic_idx_1;
                    return (() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.location7),
                        key: currentIndex,
                        onChange: async (...eventArgs) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "location7",
                              __plasmic_idx_0,
                              __plasmic_idx_1,
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);
                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        string: "Step",
                        value:
                          generateStateValueProp($state, [
                            "location7",
                            __plasmic_idx_0,
                            __plasmic_idx_1,
                            "value"
                          ]) ?? ""
                      };
                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "location7[][].value",
                            initFunc: ({ $props, $state, $queries }) => ""
                          }
                        ],

                        [__plasmic_idx_0, __plasmic_idx_1]
                      );
                      return (
                        <FirstInput
                          data-plasmic-name={"location7"}
                          data-plasmic-override={overrides.location7}
                          {...child$Props}
                        />
                      );
                    })();
                  })}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kdcf2)}
                  >
                    <PlusButton
                      className={classNames(
                        "__wab_instance",
                        sty.plusButton__qeiY1
                      )}
                      onClick={async event => {
                        const $steps = {};
                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return $state.location7[currentIndex].push({
                                    value: ""
                                  });
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qy9Mc
                        )}
                      >
                        {"+"}
                      </div>
                    </PlusButton>
                    <PlusButton
                      className={classNames(
                        "__wab_instance",
                        sty.plusButton__rljJ
                      )}
                      onClick={async event => {
                        const $steps = {};
                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return $state.location7[currentIndex].pop({
                                    value: ""
                                  });
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hanR
                        )}
                      >
                        {"-"}
                      </div>
                    </PlusButton>
                  </div>
                </div>
              </div>
            </section>
          );
        })}
        <PlusButton
          className={classNames("__wab_instance", sty.plusButton__zeBf4)}
          onClick={async event => {
            const $steps = {};
            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return $state.formObjects.push({ value: "" });
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__eg2Ko
            )}
          >
            {"+"}
          </div>
        </PlusButton>
        <section
          data-plasmic-name={"countainer5"}
          data-plasmic-override={overrides.countainer5}
          className={classNames(projectcss.all, sty.countainer5)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mtl3V
            )}
          >
            {"About"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___2EzkM)}>
            <div className={classNames(projectcss.all, sty.freeBox__dcmwj)}>
              <UploadWrapper
                data-plasmic-name={"upload2"}
                data-plasmic-override={overrides.upload2}
                accept={"image/*"}
                className={classNames("__wab_instance", sty.upload2)}
                files={generateStateValueProp($state, ["upload2", "files"])}
                listType={"picture"}
                onFilesChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, ["upload2", "files"]).apply(
                    null,
                    eventArgs
                  );
                }}
                showUploadList={false}
              >
                <AntdButton
                  className={classNames("__wab_instance", sty.button__foVhb)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__boPj8
                    )}
                  >
                    {"Upload"}
                  </div>
                </AntdButton>
              </UploadWrapper>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__otLDo)}>
              <textarea
                data-plasmic-name={"textarea2"}
                data-plasmic-override={overrides.textarea2}
                className={classNames(
                  projectcss.all,
                  projectcss.textarea,
                  sty.textarea2
                )}
                onChange={async (...eventArgs) => {
                  (e => {
                    generateStateOnChangeProp($state, ["textarea2", "value"])(
                      e.target.value
                    );
                  }).apply(null, eventArgs);
                }}
                placeholder={"What problem does your company want to solve?"}
                ref={ref => {
                  $refs["textarea2"] = ref;
                }}
                value={
                  generateStateValueProp($state, ["textarea2", "value"]) ?? ""
                }
              />

              <textarea
                data-plasmic-name={"textarea3"}
                data-plasmic-override={overrides.textarea3}
                className={classNames(
                  projectcss.all,
                  projectcss.textarea,
                  sty.textarea3
                )}
                onChange={async (...eventArgs) => {
                  (e => {
                    generateStateOnChangeProp($state, ["textarea3", "value"])(
                      e.target.value
                    );
                  }).apply(null, eventArgs);
                }}
                placeholder={"What is the solution?"}
                ref={ref => {
                  $refs["textarea3"] = ref;
                }}
                value={
                  generateStateValueProp($state, ["textarea3", "value"]) ?? ""
                }
              />

              <textarea
                data-plasmic-name={"textarea4"}
                data-plasmic-override={overrides.textarea4}
                className={classNames(
                  projectcss.all,
                  projectcss.textarea,
                  sty.textarea4
                )}
                onChange={async (...eventArgs) => {
                  (e => {
                    generateStateOnChangeProp($state, ["textarea4", "value"])(
                      e.target.value
                    );
                  }).apply(null, eventArgs);
                }}
                placeholder={
                  "What is your differential or advantage over your competition?"
                }
                ref={ref => {
                  $refs["textarea4"] = ref;
                }}
                value={
                  generateStateValueProp($state, ["textarea4", "value"]) ?? ""
                }
              />
            </div>
          </div>
        </section>
        <div className={classNames(projectcss.all, sty.freeBox__gspKk)}>
          <Stack__
            as={"div"}
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__wlmP5)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___7Ujru)}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  src={{
                    src: image2VI4RGpe3Fq47,
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lKeLx)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a6XOj
                    )}
                  >
                    {"Connect with us"}
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ff3Qz)}
                  >
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__rJ7Iz)}
                      role={"img"}
                    />

                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__xtenx)}
                      role={"img"}
                    />

                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__duu5C)}
                      role={"img"}
                    />
                  </Stack__>
                </Stack__>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.column__gHuTl)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tLqw2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__alW8P
                  )}
                >
                  {"Product"}
                </div>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton___9Slzb
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__rSz9K)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg___6GkeL)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kKjxi
                    )}
                  >
                    {"Pricing"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__qQnuh
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg___3VcAh)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__l7JVh)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yZ41E
                    )}
                  >
                    {"Log in"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__sE4I4
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg___2UbIm)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__mqXa)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dccK1
                    )}
                  >
                    {"Integrations"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton___9Z8S
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__qggMk)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__cPEy)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xmFo
                    )}
                  >
                    {"Insights"}
                  </div>
                </LoginButton>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.column__fpV1L)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jQ7D)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xni29
                  )}
                >
                  {"Support"}
                </div>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__ekiOf
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__xn8Bg)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__y6NpS)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v0Hm
                    )}
                  >
                    {"Documentation"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__iyfR
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__tXfig)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__vhS4)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xKqus
                    )}
                  >
                    {"FAQs"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__uQ85
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__gFZM)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__i13FO)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mfFsf
                    )}
                  >
                    {"Status"}
                  </div>
                </LoginButton>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.column__vrci4)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__s09JV)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1AWzp
                  )}
                >
                  {"Company"}
                </div>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__gNp0C
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__cfwZ)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__d4U6L)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n63C
                    )}
                  >
                    {"About"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__utpHz
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg___2VN0B)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__v60Q0)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iebSs
                    )}
                  >
                    {"Contact us"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames(
                    "__wab_instance",
                    sty.loginButton__ajdV
                  )}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg___7J7SQ)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__m5SpW)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___86Wa
                    )}
                  >
                    {"Careers"}
                  </div>
                </LoginButton>
                <LoginButton
                  className={classNames("__wab_instance", sty.loginButton__vOM)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg___1V6St)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__fPaIa)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ouMkw
                    )}
                  >
                    {"Media"}
                  </div>
                </LoginButton>
              </Stack__>
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "countainer1",
    "upload",
    "firstName",
    "select",
    "email",
    "dateTimePicker",
    "location",
    "linkedIn",
    "instagram",
    "x",
    "countainer2",
    "lastInput",
    "checkbox",
    "countainer3",
    "select2",
    "select3",
    "companyTagline",
    "location2",
    "location3",
    "countainer4",
    "location5",
    "textarea",
    "location6",
    "location4",
    "location7",
    "countainer5",
    "upload2",
    "textarea2",
    "textarea3",
    "textarea4",
    "columns",
    "img"
  ],

  countainer1: [
    "countainer1",
    "upload",
    "firstName",
    "select",
    "email",
    "dateTimePicker",
    "location",
    "linkedIn",
    "instagram",
    "x"
  ],

  upload: ["upload"],
  firstName: ["firstName"],
  select: ["select"],
  email: ["email"],
  dateTimePicker: ["dateTimePicker"],
  location: ["location"],
  linkedIn: ["linkedIn"],
  instagram: ["instagram"],
  x: ["x"],
  countainer2: ["countainer2", "lastInput", "checkbox"],
  lastInput: ["lastInput"],
  checkbox: ["checkbox"],
  countainer3: [
    "countainer3",
    "select2",
    "select3",
    "companyTagline",
    "location2",
    "location3"
  ],

  select2: ["select2"],
  select3: ["select3"],
  companyTagline: ["companyTagline"],
  location2: ["location2"],
  location3: ["location3"],
  countainer4: [
    "countainer4",
    "location5",
    "textarea",
    "location6",
    "location4",
    "location7"
  ],

  location5: ["location5"],
  textarea: ["textarea"],
  location6: ["location6"],
  location4: ["location4"],
  location7: ["location7"],
  countainer5: [
    "countainer5",
    "upload2",
    "textarea2",
    "textarea3",
    "textarea4"
  ],

  upload2: ["upload2"],
  textarea2: ["textarea2"],
  textarea3: ["textarea3"],
  textarea4: ["textarea4"],
  columns: ["columns", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCCreateAccount__ArgProps,
          internalVariantPropNames: PlasmicCCreateAccount__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCCreateAccount__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCCreateAccount";
  } else {
    func.displayName = `PlasmicCCreateAccount.${nodeName}`;
  }
  return func;
}

export const PlasmicCCreateAccount = Object.assign(
  // Top-level PlasmicCCreateAccount renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    countainer1: makeNodeComponent("countainer1"),
    upload: makeNodeComponent("upload"),
    firstName: makeNodeComponent("firstName"),
    select: makeNodeComponent("select"),
    email: makeNodeComponent("email"),
    dateTimePicker: makeNodeComponent("dateTimePicker"),
    location: makeNodeComponent("location"),
    linkedIn: makeNodeComponent("linkedIn"),
    instagram: makeNodeComponent("instagram"),
    x: makeNodeComponent("x"),
    countainer2: makeNodeComponent("countainer2"),
    lastInput: makeNodeComponent("lastInput"),
    checkbox: makeNodeComponent("checkbox"),
    countainer3: makeNodeComponent("countainer3"),
    select2: makeNodeComponent("select2"),
    select3: makeNodeComponent("select3"),
    companyTagline: makeNodeComponent("companyTagline"),
    location2: makeNodeComponent("location2"),
    location3: makeNodeComponent("location3"),
    countainer4: makeNodeComponent("countainer4"),
    location5: makeNodeComponent("location5"),
    textarea: makeNodeComponent("textarea"),
    location6: makeNodeComponent("location6"),
    location4: makeNodeComponent("location4"),
    location7: makeNodeComponent("location7"),
    countainer5: makeNodeComponent("countainer5"),
    upload2: makeNodeComponent("upload2"),
    textarea2: makeNodeComponent("textarea2"),
    textarea3: makeNodeComponent("textarea3"),
    textarea4: makeNodeComponent("textarea4"),
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicCCreateAccount
    internalVariantProps: PlasmicCCreateAccount__VariantProps,
    internalArgProps: PlasmicCCreateAccount__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Create account",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCCreateAccount;
/* prettier-ignore-end */
