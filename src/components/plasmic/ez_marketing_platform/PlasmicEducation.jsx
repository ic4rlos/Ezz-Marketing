/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6Q26EfqfPNQuydumhAEs1S
// Component: _DGeffa4xJRz
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState,
  useTrigger
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import GraduationInput from "../../GraduationInput"; // plasmic-import: maAnhl2FQPIf/component
import UniversityInput from "../../UniversityInput"; // plasmic-import: 6x4MI_4XrKVn/component
import YearInput from "../../YearInput"; // plasmic-import: enq6tuh1OWCG/component
import CourseInput from "../../CourseInput"; // plasmic-import: uS3ORMT9KSz4/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6Q26EfqfPNQuydumhAEs1S/projectcss
import sty from "./PlasmicEducation.module.css"; // plasmic-import: _DGeffa4xJRz/css
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: dYudxa_dV3hU/icon

createPlasmicElementProxy;

export const PlasmicEducation__VariantProps = new Array();

export const PlasmicEducation__ArgProps = new Array();

const $$ = {};

function PlasmicEducation__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "graduationInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "universityInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "yearInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "courseInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <UploadWrapper
        data-plasmic-name={"upload"}
        data-plasmic-override={overrides.upload}
        accept={""}
        className={classNames("__wab_instance", sty.upload)}
        files={generateStateValueProp($state, ["upload", "files"])}
        onFilesChange={async (...eventArgs) => {
          generateStateOnChangeProp($state, ["upload", "files"]).apply(
            null,
            eventArgs
          );
        }}
        showUploadList={true}
      >
        <AntdButton
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
        >
          <Icon9Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />

          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"University degree"}
          </div>
        </AntdButton>
      </UploadWrapper>
      <GraduationInput
        data-plasmic-name={"graduationInput"}
        data-plasmic-override={overrides.graduationInput}
        className={classNames("__wab_instance", sty.graduationInput)}
        onChange={async (...eventArgs) => {
          ((...eventArgs) => {
            generateStateOnChangeProp($state, ["graduationInput", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }).apply(null, eventArgs);
          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        value={
          generateStateValueProp($state, ["graduationInput", "value"]) ?? ""
        }
      />

      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <UniversityInput
          data-plasmic-name={"universityInput"}
          data-plasmic-override={overrides.universityInput}
          className={classNames("__wab_instance", sty.universityInput)}
          onChange={async (...eventArgs) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["universityInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }).apply(null, eventArgs);
            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          value={
            generateStateValueProp($state, ["universityInput", "value"]) ?? ""
          }
        />

        <YearInput
          data-plasmic-name={"yearInput"}
          data-plasmic-override={overrides.yearInput}
          className={classNames("__wab_instance", sty.yearInput)}
          onChange={async (...eventArgs) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["yearInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }).apply(null, eventArgs);
            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          value={generateStateValueProp($state, ["yearInput", "value"]) ?? ""}
        />

        <CourseInput
          data-plasmic-name={"courseInput"}
          data-plasmic-override={overrides.courseInput}
          className={classNames("__wab_instance", sty.courseInput)}
          onChange={async (...eventArgs) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["courseInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }).apply(null, eventArgs);
            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          value={generateStateValueProp($state, ["courseInput", "value"]) ?? ""}
        />
      </section>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "upload",
    "button",
    "svg",
    "text",
    "graduationInput",
    "section",
    "universityInput",
    "yearInput",
    "courseInput"
  ],

  upload: ["upload", "button", "svg", "text"],
  button: ["button", "svg", "text"],
  svg: ["svg"],
  text: ["text"],
  graduationInput: ["graduationInput"],
  section: ["section", "universityInput", "yearInput", "courseInput"],
  universityInput: ["universityInput"],
  yearInput: ["yearInput"],
  courseInput: ["courseInput"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEducation__ArgProps,
          internalVariantPropNames: PlasmicEducation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEducation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEducation";
  } else {
    func.displayName = `PlasmicEducation.${nodeName}`;
  }
  return func;
}

export const PlasmicEducation = Object.assign(
  // Top-level PlasmicEducation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    upload: makeNodeComponent("upload"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    graduationInput: makeNodeComponent("graduationInput"),
    section: makeNodeComponent("section"),
    universityInput: makeNodeComponent("universityInput"),
    yearInput: makeNodeComponent("yearInput"),
    courseInput: makeNodeComponent("courseInput"),
    // Metadata about props expected for PlasmicEducation
    internalVariantProps: PlasmicEducation__VariantProps,
    internalArgProps: PlasmicEducation__ArgProps
  }
);

export default PlasmicEducation;
/* prettier-ignore-end */
