/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6Q26EfqfPNQuydumhAEs1S
// Component: e9w264K-yNEu
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicInvalidate } from "@plasmicapp/react-web/lib/data-sources";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import LoginButton from "../../LoginButton"; // plasmic-import: sda60oPQ2thQ/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import { Dialog } from "@plasmicpkgs/radix-ui";
import { DialogContent } from "@plasmicpkgs/radix-ui";
import { AntdRate } from "@plasmicpkgs/antd5/skinny/registerRate";
import { DialogClose } from "@plasmicpkgs/radix-ui";
import { useScreenVariants as useScreenVariantsnnPusS1DHa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nnPus_s1dHa_/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6Q26EfqfPNQuydumhAEs1S/projectcss
import sty from "./PlasmicAProfile.module.css"; // plasmic-import: e9w264K-yNEu/css
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: DSe5zJXs0px5/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: -tYB_tag2lQq/icon
import IlustrgatuSvgIcon from "./icons/PlasmicIcon__IlustrgatuSvg"; // plasmic-import: ogpmBO-sGuua/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: 1gNGvjCGU28n/icon
import ReportSvgrepoComSvgIcon from "./icons/PlasmicIcon__ReportSvgrepoComSvg"; // plasmic-import: a-8qUDv5D2bw/icon
import logoPng2S9Gcm9LGTbT6 from "./images/logoPng2.png"; // plasmic-import: s9GCM9lGTbT6/picture
import semTitulo2Jpg31LNEr9NkcLru from "./images/semTitulo2Jpg3.jpg"; // plasmic-import: 1lNEr9NkcLRU/picture
import icon04320X320Png44Ctc89HVbBq from "./images/icon04320X320Png.png"; // plasmic-import: 44CTC89hVbBQ/picture
import zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y from "./images/zqLeeVbDjv88IbcUnsplashJpg.jpg"; // plasmic-import: xtkCNXECXa1Y/picture

createPlasmicElementProxy;

export const PlasmicAProfile__VariantProps = new Array();

export const PlasmicAProfile__ArgProps = new Array();

const $$ = {};

function PlasmicAProfile__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "sliderCarousel2.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel2",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "dialogSkill.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialogGrid.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "rate.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialogGrid2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate3.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate4.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate5.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate6.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid4.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate7.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate8.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid5.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate9.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate10.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogSkill2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialogGrid6.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate11.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate12.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid7.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate13.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate14.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid8.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate15.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate16.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid9.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate17.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate18.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid10.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate19.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate20.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogSkill3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialogGrid11.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate21.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate22.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid12.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate23.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate24.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid13.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate25.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate26.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid14.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate27.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate28.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialogGrid15.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rate29.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate30.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnnPusS1DHa()
  });
  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"topBar"}
          data-plasmic-override={overrides.topBar}
          hasGap={true}
          className={classNames(projectcss.all, sty.topBar)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__msvNv)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___1JAb0)}
            >
              <NavigationBar
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                brand={
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__a5Ld4
                    )}
                    href={`/affiliate-homepage`}
                    onClick={async event => {
                      const $steps = {};
                      $steps["refreshData"] = true
                        ? (() => {
                            const actionArgs = {
                              queryInvalidation: ["plasmic_refresh_all"]
                            };
                            return (async ({ queryInvalidation }) => {
                              if (!queryInvalidation) {
                                return;
                              }
                              await plasmicInvalidate(queryInvalidation);
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["refreshData"] != null &&
                        typeof $steps["refreshData"] === "object" &&
                        typeof $steps["refreshData"].then === "function"
                      ) {
                        $steps["refreshData"] = await $steps["refreshData"];
                      }
                    }}
                    platform={"react"}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__r6Ebs)}
                      displayHeight={"30px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: logoPng2S9Gcm9LGTbT6,
                        fullWidth: 190,
                        fullHeight: 100,
                        aspectRatio: undefined
                      }}
                    />
                  </PlasmicLink__>
                }
                className={classNames("__wab_instance", sty.navigationBar)}
                closeButton={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__oua)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={"https://static1.plasmic.app/close.svg"}
                  />
                }
                itemsGap={8}
                menuItems={
                  <React.Fragment>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__tzGwy
                      )}
                      href={`/community-dashboard`}
                      platform={"react"}
                    >
                      {"Community Dashboard"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__nIwPb
                      )}
                      href={`/service-dashboard`}
                      platform={"react"}
                    >
                      {"Service\nDashboard"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__vPIH
                      )}
                      platform={"react"}
                    >
                      {"Market\nTrends"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__hjdth
                      )}
                      href={`/find-a-business`}
                      platform={"react"}
                    >
                      {"Find a \nbusiness"}
                    </PlasmicLink__>
                  </React.Fragment>
                }
                openButton={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__xdslC)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={``}
                    src={"https://static1.plasmic.app/menu.svg"}
                    width={``}
                  />
                }
                responsiveBreakpoint={768}
              />

              <AntdDropdown
                data-plasmic-name={"account"}
                data-plasmic-override={overrides.account}
                className={classNames("__wab_instance", sty.account)}
                dropdownMenuScopeClassName={sty["account__dropdownMenu"]}
                menuClassName={classNames({ [sty["pcls_6S-bnE9ONboc"]]: true })}
                menuItemClassName={classNames({
                  [sty["pcls_WuskJSc-eGap"]]: true
                })}
                menuItems={() => (
                  <React.Fragment>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem___3RoKr
                      )}
                      key={"menu-item-1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gdfav
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__ixY5P
                      )}
                      key={"menu-item-2"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pafpO
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                  </React.Fragment>
                )}
                menuItemsJson={(() => {
                  const __composite = [
                    { type: null, label: null, children: null },
                    {
                      type: null,
                      value: "action1",
                      label: null,
                      children: null
                    },
                    {
                      type: null,
                      value: "action2",
                      label: null,
                      onClick: null
                    }
                  ];

                  __composite["0"]["type"] = "group";
                  __composite["0"]["label"] = "User";
                  __composite["0"]["children"] = (() => {
                    const __composite = [
                      { type: "item", label: null, onClick: null },
                      { type: "item", label: null, onClick: null },
                      { type: null }
                    ];

                    __composite["0"]["label"] = "Profile";
                    __composite["0"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToALogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/a-login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToALogin"] != null &&
                        typeof $steps["goToALogin"] === "object" &&
                        typeof $steps["goToALogin"].then === "function"
                      ) {
                        $steps["goToALogin"] = await $steps["goToALogin"];
                      }
                    };
                    __composite["1"]["label"] = "Edit profile";
                    __composite["1"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToACreateAccount"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/a-create account`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToACreateAccount"] != null &&
                        typeof $steps["goToACreateAccount"] === "object" &&
                        typeof $steps["goToACreateAccount"].then === "function"
                      ) {
                        $steps["goToACreateAccount"] = await $steps[
                          "goToACreateAccount"
                        ];
                      }
                    };
                    __composite["2"]["type"] = "divider";
                    return __composite;
                  })();
                  __composite["1"]["type"] = "group";
                  __composite["1"]["label"] = "Account";
                  __composite["1"]["children"] = (() => {
                    const __composite = [
                      { type: "item", label: null, onClick: null },
                      { type: "item", label: null, onClick: null },
                      { type: null }
                    ];

                    __composite["0"]["label"] = "Settings & Privacy";
                    __composite["0"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToALogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/a-login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToALogin"] != null &&
                        typeof $steps["goToALogin"] === "object" &&
                        typeof $steps["goToALogin"].then === "function"
                      ) {
                        $steps["goToALogin"] = await $steps["goToALogin"];
                      }
                    };
                    __composite["1"]["label"] = "Help";
                    __composite["1"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToALogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/a-login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToALogin"] != null &&
                        typeof $steps["goToALogin"] === "object" &&
                        typeof $steps["goToALogin"].then === "function"
                      ) {
                        $steps["goToALogin"] = await $steps["goToALogin"];
                      }
                    };
                    __composite["2"]["type"] = "divider";
                    return __composite;
                  })();
                  __composite["2"]["type"] = "item";
                  __composite["2"]["label"] = "Sign out";
                  __composite["2"]["onClick"] = async info => {
                    const $steps = {};
                    $steps["goToALogin"] = true
                      ? (() => {
                          const actionArgs = { destination: `/a-login` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              location.assign(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToALogin"] != null &&
                      typeof $steps["goToALogin"] === "object" &&
                      typeof $steps["goToALogin"].then === "function"
                    ) {
                      $steps["goToALogin"] = await $steps["goToALogin"];
                    }
                  };
                  return __composite;
                })()}
                trigger={"hover"}
                useMenuItemsSlot={false}
              >
                <AntdButton
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  href={`/a-login`}
                  target={true}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___21K9U)}
                    displayHeight={"30px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"30px"}
                    loading={"lazy"}
                  />
                </AntdButton>
              </AntdDropdown>
            </Stack__>
          </Stack__>
        </Stack__>
        <div
          data-plasmic-name={"container1"}
          data-plasmic-override={overrides.container1}
          className={classNames(projectcss.all, sty.container1)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__olXhm)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dVv8Y
              )}
            >
              {"Bacharel"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__okud1
              )}
            >
              {"Gold"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__a4Ly7)}>
            <div className={classNames(projectcss.all, sty.freeBox__q820S)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__aIl4R)}
                displayHeight={"100px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100px"}
                loading={"lazy"}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__at8H)}
                displayHeight={"50px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"50px"}
                loading={"lazy"}
                src={{
                  src: semTitulo2Jpg31LNEr9NkcLru,
                  fullWidth: 1014,
                  fullHeight: 1014,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__y94O8)}>
              <div className={classNames(projectcss.all, sty.freeBox__tcKpl)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lbSzX
                  )}
                >
                  {"Name"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5QxE
                  )}
                >
                  {"Last Name"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__oes66)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1EeTp
                  )}
                >
                  {"28"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zzRrw
                  )}
                >
                  {"years"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ag5GA
                )}
              >
                {"New York"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zu10A)}>
              <LoginButton
                data-plasmic-name={"loginButton"}
                data-plasmic-override={overrides.loginButton}
                className={classNames("__wab_instance", sty.loginButton)}
                shape={"rounded"}
                size={"compact"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wbfAb
                  )}
                >
                  {"Button"}
                </div>
              </LoginButton>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___1GFv)}>
            <div className={classNames(projectcss.all, sty.freeBox___2Ti70)}>
              <Icon4Icon
                className={classNames(projectcss.all, sty.svg__f5Cdi)}
                role={"img"}
              />

              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__hHfxy
                )}
                href={"https://www.plasmic.app/"}
                platform={"react"}
              >
                {"LinkedIn"}
              </PlasmicLink__>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__bqQo7)}>
              <Icon6Icon
                className={classNames(projectcss.all, sty.svg__zCeQ8)}
                role={"img"}
              />

              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__idKl
                )}
                href={"https://www.plasmic.app/"}
                platform={"react"}
              >
                {"Instagram"}
              </PlasmicLink__>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__gyNqL)}>
              <IlustrgatuSvgIcon
                className={classNames(projectcss.all, sty.svg__dArbO)}
                role={"img"}
              />

              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__nkeXr
                )}
                href={"https://www.plasmic.app/"}
                platform={"react"}
              >
                {"X corporation"}
              </PlasmicLink__>
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"container3"}
          data-plasmic-override={overrides.container3}
          className={classNames(projectcss.all, sty.container3)}
        />

        <div
          data-plasmic-name={"container2"}
          data-plasmic-override={overrides.container2}
          className={classNames(projectcss.all, sty.container2)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nitX0
            )}
          >
            {"Education"}
          </div>
          {(() => {
            const child$Props = {
              beforeChange: async (...eventArgs) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel", "currentSlide"],
                  SliderWrapper_Helpers
                ).apply(null, eventArgs);
              },
              className: classNames("__wab_instance", sty.sliderCarousel),
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel",
                "currentSlide"
              ]),
              ref: ref => {
                $refs["sliderCarousel"] = ref;
              },
              sliderScopeClassName: sty["sliderCarousel__slider"],
              slidesPerRow: 4
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel.currentSlide"
                }
              ],

              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );
            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel"}
                data-plasmic-override={overrides.sliderCarousel}
                {...child$Props}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___6Mygo)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5I01A)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__euvI)}
                      displayHeight={"107px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"180px"}
                      loading={"lazy"}
                    />

                    <section
                      className={classNames(projectcss.all, sty.section__gl1Xu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6ZKuA
                        )}
                      >
                        {"University"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2Wq78
                        )}
                      >
                        {"Year"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1Djtv
                        )}
                      >
                        {"Course"}
                      </div>
                    </section>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aE5Px
                      )}
                    >
                      {"Graduation"}
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___85Wyw)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yIayt)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__q2BwC)}
                      displayHeight={"107px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"180px"}
                      loading={"lazy"}
                    />

                    <section
                      className={classNames(projectcss.all, sty.section__jMb3J)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__l7Sln
                        )}
                      >
                        {"University"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q7U4
                        )}
                      >
                        {"Year"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qrGnb
                        )}
                      >
                        {"Course"}
                      </div>
                    </section>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mc2U
                      )}
                    >
                      {"Graduation"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__wg4)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bkF0)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__rKoFd)}
                      displayHeight={"107px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"180px"}
                      loading={"lazy"}
                    />

                    <section
                      className={classNames(projectcss.all, sty.section__p9Zzl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4Purk
                        )}
                      >
                        {"University"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__p04Vu
                        )}
                      >
                        {"Year"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m1A1
                        )}
                      >
                        {"Course"}
                      </div>
                    </section>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yXsv
                      )}
                    >
                      {"Graduation"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__utw3G)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__izFTz)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___59EVk)}
                      displayHeight={"107px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"180px"}
                      loading={"lazy"}
                    />

                    <section
                      className={classNames(projectcss.all, sty.section__wpVrr)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hDwGo
                        )}
                      >
                        {"University"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rcoIx
                        )}
                      >
                        {"Year"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4XOi5
                        )}
                      >
                        {"Course"}
                      </div>
                    </section>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dybcV
                      )}
                    >
                      {"Graduation"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__llIFf)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__n5Vvs)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__dhqJg)}
                      displayHeight={"107px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"180px"}
                      loading={"lazy"}
                    />

                    <section
                      className={classNames(projectcss.all, sty.section__x7QgB)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cf0PG
                        )}
                      >
                        {"University"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4R3Ol
                        )}
                      >
                        {"Year"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oo9H2
                        )}
                      >
                        {"Course"}
                      </div>
                    </section>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9VbFu
                      )}
                    >
                      {"Graduation"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__vuaQ2)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wk37O)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__cdHcl)}
                      displayHeight={"107px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"180px"}
                      loading={"lazy"}
                    />

                    <section
                      className={classNames(projectcss.all, sty.section__wcZ51)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8E1Mb
                        )}
                      >
                        {"University"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ff4PE
                        )}
                      >
                        {"Year"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ooNp
                        )}
                      >
                        {"Course"}
                      </div>
                    </section>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__n6N9A
                      )}
                    >
                      {"Graduation"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__lOOjH)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hs3Qw)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__z1IpY)}
                      displayHeight={"107px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"180px"}
                      loading={"lazy"}
                    />

                    <section
                      className={classNames(projectcss.all, sty.section__wV9Ya)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__z2HzY
                        )}
                      >
                        {"University"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__esWd2
                        )}
                      >
                        {"Year"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8NWql
                        )}
                      >
                        {"Course"}
                      </div>
                    </section>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ovv4O
                      )}
                    >
                      {"Graduation"}
                    </div>
                  </div>
                </div>
              </SliderWrapper>
            );
          })()}
        </div>
        <div
          data-plasmic-name={"container4"}
          data-plasmic-override={overrides.container4}
          className={classNames(projectcss.all, sty.container4)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__n9Xop
            )}
          >
            {"Charge"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__gWfxP)}>
            <div className={classNames(projectcss.all, sty.freeBox__v1Wwt)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__wpYtn)}
                displayHeight={"150px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"150px"}
                loading={"lazy"}
                src={{
                  src: icon04320X320Png44Ctc89HVbBq,
                  fullWidth: 320,
                  fullHeight: 320,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__dKwDz)}>
              <div className={classNames(projectcss.all, sty.freeBox__zJVu7)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b4Oha
                  )}
                >
                  {"Office"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lQy7I
                  )}
                >
                  {"Office"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1FAc
                )}
              >
                {"Employment"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aeVlr
                )}
              >
                {
                  "Employers, position / titles, and dates. Use a separate line for each job, most recent first."
                }
              </div>
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"container5"}
          data-plasmic-override={overrides.container5}
          className={classNames(projectcss.all, sty.container5)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cPi9L
            )}
          >
            {"Impressive accomplishment"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__twLu2)}>
            <Icon10Icon
              className={classNames(projectcss.all, sty.svg__wyyQc)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gFzQn
              )}
            >
              {
                "For example, an academic or professional achievement, an award you've won, or something impressive you've built."
              }
            </div>
            <Icon10Icon
              className={classNames(projectcss.all, sty.svg__bPxJb)}
              role={"img"}
            />
          </div>
        </div>
        <div
          data-plasmic-name={"container6"}
          data-plasmic-override={overrides.container6}
          className={classNames(projectcss.all, sty.container6)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__siErp)}>
            {(() => {
              const child$Props = {
                beforeChange: async (...eventArgs) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "currentSlide",
                    ["sliderCarousel2", "currentSlide"],
                    SliderWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                className: classNames("__wab_instance", sty.sliderCarousel2),
                dots: true,
                initialSlide: generateStateValueProp($state, [
                  "sliderCarousel2",
                  "currentSlide"
                ]),
                ref: ref => {
                  $refs["sliderCarousel2"] = ref;
                },
                sliderScopeClassName: sty["sliderCarousel2__slider"],
                slidesPerRow: 5
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "currentSlide",
                    plasmicStateName: "sliderCarousel2.currentSlide"
                  }
                ],

                [],
                SliderWrapper_Helpers ?? {},
                child$Props
              );
              return (
                <SliderWrapper
                  data-plasmic-name={"sliderCarousel2"}
                  data-plasmic-override={overrides.sliderCarousel2}
                  {...child$Props}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vkZCh)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tKrsp)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__igjhS
                        )}
                      >
                        {"Bacharel"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tg4Wp
                        )}
                      >
                        {"Gold"}
                      </div>
                      <Dialog
                        data-plasmic-name={"dialogSkill"}
                        data-plasmic-override={overrides.dialogSkill}
                        className={classNames(
                          "__wab_instance",
                          sty.dialogSkill
                        )}
                        defaultOpen={false}
                        onOpenChange={async (...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "dialogSkill",
                            "open"
                          ]).apply(null, eventArgs);
                        }}
                        open={generateStateValueProp($state, [
                          "dialogSkill",
                          "open"
                        ])}
                        overlayClassName={classNames({
                          [sty["pcls_7M-ruAu-n0Zj"]]: true
                        })}
                        themeResetClass={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        triggerSlot={
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img___9Zca6)}
                            displayHeight={"150px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"150px"}
                            loading={"lazy"}
                            src={{
                              src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                              fullWidth: 3200,
                              fullHeight: 2133,
                              aspectRatio: undefined
                            }}
                          />
                        }
                      >
                        <DialogContent
                          className={classNames(
                            "__wab_instance",
                            sty.dialogContent___43Stb
                          )}
                          themeResetClass={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__obvAs
                            )}
                          >
                            <Dialog
                              data-plasmic-name={"dialogGrid"}
                              data-plasmic-override={overrides.dialogGrid}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__tr0EK)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent__cu5Qm
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost"}
                                  data-plasmic-override={
                                    overrides.containerPost
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide"}
                                    data-plasmic-override={
                                      overrides.commentsSide
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments"}
                                      data-plasmic-override={overrides.comments}
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer"}
                                        data-plasmic-override={
                                          overrides.commentContainer
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__p92TU)}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment"}
                                          data-plasmic-override={
                                            overrides.userAndComment
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__owrhZ
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__t99B4
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate2"}
                                              data-plasmic-override={
                                                overrides.rate2
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate2
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate2", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___440Rx
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__hVox6
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__nWw78
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__d1NXq
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___28JZn
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate2", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ofY5O
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate"}
                                      data-plasmic-override={overrides.rate}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___54Hos
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__dk2Be
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__dtgGz
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__e6Qs0
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ltNgq
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea"}
                                      data-plasmic-override={overrides.textarea}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__o2WY6)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide"}
                                    data-plasmic-override={overrides.userSide}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction"}
                                      data-plasmic-override={
                                        overrides.userAction
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__ds1Uc)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__fvPrJ
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___6YpRg
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__zQ5Fy
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__g7Bkf
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose__dA3Gs
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__zkl2E
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                            <Dialog
                              data-plasmic-name={"dialogGrid2"}
                              data-plasmic-override={overrides.dialogGrid2}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid2
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid2",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid2",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__tMaj1)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent__qtj4T
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost2"}
                                  data-plasmic-override={
                                    overrides.containerPost2
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost2
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide2"}
                                    data-plasmic-override={
                                      overrides.commentsSide2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide2
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments2"}
                                      data-plasmic-override={
                                        overrides.comments2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments2
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer2"}
                                        data-plasmic-override={
                                          overrides.commentContainer2
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer2
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__pyzWv)}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment2"}
                                          data-plasmic-override={
                                            overrides.userAndComment2
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment2
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__p1BQl
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link___6U96A
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate3"}
                                              data-plasmic-override={
                                                overrides.rate3
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate3
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate3", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__t3J27
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___0Wk5J
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__kXDkX
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__fPu3K
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__kMyCe
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate3", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__m7Tph
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate4"}
                                      data-plasmic-override={overrides.rate4}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate4
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate4",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__reNr2
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__q61Al
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__wDbi4
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__iizQc
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__koPPy
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate4",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea2"}
                                      data-plasmic-override={
                                        overrides.textarea2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea2
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea2",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea2"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea2",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__coWaC)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide2"}
                                    data-plasmic-override={overrides.userSide2}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide2
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction2"}
                                      data-plasmic-override={
                                        overrides.userAction2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction2
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__v6So3)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__b1SxW
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__waYp6
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link___8WIzY
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__tRQr6
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose__h10A8
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__cYQt7
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                            <Dialog
                              data-plasmic-name={"dialogGrid3"}
                              data-plasmic-override={overrides.dialogGrid3}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid3
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid3",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid3",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img___97Fyd)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent__m2YCw
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost3"}
                                  data-plasmic-override={
                                    overrides.containerPost3
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost3
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide3"}
                                    data-plasmic-override={
                                      overrides.commentsSide3
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide3
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments3"}
                                      data-plasmic-override={
                                        overrides.comments3
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments3
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer3"}
                                        data-plasmic-override={
                                          overrides.commentContainer3
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer3
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__nT81X)}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment3"}
                                          data-plasmic-override={
                                            overrides.userAndComment3
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment3
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__vv03E
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__uHar2
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate5"}
                                              data-plasmic-override={
                                                overrides.rate5
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate5
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate5", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___847S6
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___7Y2Yz
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__k7MMy
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__jSaMj
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__sfj4W
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate5", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___0Q1T
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate6"}
                                      data-plasmic-override={overrides.rate6}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate6
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate6",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___7N6A3
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__rdPeH
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__bIx06
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__v8VdK
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__lQfHt
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate6",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea3"}
                                      data-plasmic-override={
                                        overrides.textarea3
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea3
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea3",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea3"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea3",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__j8B29)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide3"}
                                    data-plasmic-override={overrides.userSide3}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide3
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction3"}
                                      data-plasmic-override={
                                        overrides.userAction3
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction3
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__g5Rgv)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__wcxOk
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__z6Tx
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__v2HR9
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__m6RFw
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose__d9YTk
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__akdPl
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                            <Dialog
                              data-plasmic-name={"dialogGrid4"}
                              data-plasmic-override={overrides.dialogGrid4}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid4
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid4",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid4",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__zYw75)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent__j6Cjn
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost4"}
                                  data-plasmic-override={
                                    overrides.containerPost4
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost4
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide4"}
                                    data-plasmic-override={
                                      overrides.commentsSide4
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide4
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments4"}
                                      data-plasmic-override={
                                        overrides.comments4
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments4
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer4"}
                                        data-plasmic-override={
                                          overrides.commentContainer4
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer4
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__ePpc6)}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment4"}
                                          data-plasmic-override={
                                            overrides.userAndComment4
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment4
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__itFHf
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__q4Po
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate7"}
                                              data-plasmic-override={
                                                overrides.rate7
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate7
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate7", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__stm5H
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__bcEvY
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___4GUp
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__a0Gpa
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__q6MWz
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate7", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__yeLpu
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate8"}
                                      data-plasmic-override={overrides.rate8}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate8
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate8",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__oOSdh
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__j9Zye
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__uvW8
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__qX7Z
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__si0Lv
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate8",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea4"}
                                      data-plasmic-override={
                                        overrides.textarea4
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea4
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea4",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea4"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea4",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__s3TlK)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide4"}
                                    data-plasmic-override={overrides.userSide4}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide4
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction4"}
                                      data-plasmic-override={
                                        overrides.userAction4
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction4
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img___8USsN)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__wn20A
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__leTiP
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link___22Buk
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__jxc2O
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose__aXfli
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gKuRa
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                            <Dialog
                              data-plasmic-name={"dialogGrid5"}
                              data-plasmic-override={overrides.dialogGrid5}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid5
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid5",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid5",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__gdDne)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent__eapo1
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost5"}
                                  data-plasmic-override={
                                    overrides.containerPost5
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost5
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide5"}
                                    data-plasmic-override={
                                      overrides.commentsSide5
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide5
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments5"}
                                      data-plasmic-override={
                                        overrides.comments5
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments5
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer5"}
                                        data-plasmic-override={
                                          overrides.commentContainer5
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer5
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img___78Fj)}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment5"}
                                          data-plasmic-override={
                                            overrides.userAndComment5
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment5
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__viJxB
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__foujo
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate9"}
                                              data-plasmic-override={
                                                overrides.rate9
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate9
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate9", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__o1Jdj
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__lck99
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__h5Du
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__knyFz
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___8F5U
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate9", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___4MKut
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate10"}
                                      data-plasmic-override={overrides.rate10}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate10
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate10",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__i3Lrs
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___9Jazv
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__jdMFh
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ozv3Q
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__z9Bu
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate10",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea5"}
                                      data-plasmic-override={
                                        overrides.textarea5
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea5
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea5",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea5"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea5",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__nbVrD)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide5"}
                                    data-plasmic-override={overrides.userSide5}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide5
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction5"}
                                      data-plasmic-override={
                                        overrides.userAction5
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction5
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__xXv6P)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link___5O8Uy
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___4GhG9
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__mf1BH
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___9GMd9
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose__ijyN2
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__zA1Gp
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                          </div>
                          <DialogClose
                            className={classNames(
                              "__wab_instance",
                              sty.dialogClose___2Toy
                            )}
                          />
                        </DialogContent>
                      </Dialog>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kdvLl
                        )}
                      >
                        {"Skill"}
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6NIi7)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__m8TlO)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wHb18
                        )}
                      >
                        {"Bacharel"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jsLj
                        )}
                      >
                        {"Gold"}
                      </div>
                      <Dialog
                        data-plasmic-name={"dialogSkill2"}
                        data-plasmic-override={overrides.dialogSkill2}
                        className={classNames(
                          "__wab_instance",
                          sty.dialogSkill2
                        )}
                        defaultOpen={false}
                        onOpenChange={async (...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "dialogSkill2",
                            "open"
                          ]).apply(null, eventArgs);
                        }}
                        open={generateStateValueProp($state, [
                          "dialogSkill2",
                          "open"
                        ])}
                        overlayClassName={classNames({
                          [sty["pcls_yjOqYOvUadb4"]]: true
                        })}
                        themeResetClass={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        triggerSlot={
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img___0N7XX)}
                            displayHeight={"150px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"150px"}
                            loading={"lazy"}
                            src={{
                              src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                              fullWidth: 3200,
                              fullHeight: 2133,
                              aspectRatio: undefined
                            }}
                          />
                        }
                      >
                        <DialogContent
                          className={classNames(
                            "__wab_instance",
                            sty.dialogContent__hbl0S
                          )}
                          themeResetClass={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uXEuO
                            )}
                          >
                            <Dialog
                              data-plasmic-name={"dialogGrid6"}
                              data-plasmic-override={overrides.dialogGrid6}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid6
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid6",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid6",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__poBuy)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent__mric4
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost6"}
                                  data-plasmic-override={
                                    overrides.containerPost6
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost6
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide6"}
                                    data-plasmic-override={
                                      overrides.commentsSide6
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide6
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments6"}
                                      data-plasmic-override={
                                        overrides.comments6
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments6
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer6"}
                                        data-plasmic-override={
                                          overrides.commentContainer6
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer6
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__kTkcc)}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment6"}
                                          data-plasmic-override={
                                            overrides.userAndComment6
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment6
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox___0UYd6
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__ta9Ke
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate11"}
                                              data-plasmic-override={
                                                overrides.rate11
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate11
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate11", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__evBs
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__gKd2R
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__kuEJs
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__n7Vys
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__kKtKt
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate11", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__izrX9
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate12"}
                                      data-plasmic-override={overrides.rate12}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate12
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate12",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__igSrO
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__lukKc
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__hmJlJ
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__e6OQh
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__fDl
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate12",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea6"}
                                      data-plasmic-override={
                                        overrides.textarea6
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea6
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea6",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea6"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea6",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img___1JVo7)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide6"}
                                    data-plasmic-override={overrides.userSide6}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide6
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction6"}
                                      data-plasmic-override={
                                        overrides.userAction6
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction6
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__u81Us)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__hDjjw
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__mt0Ro
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__tgydg
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__uuTXx
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose__prLk
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__wKrss
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                            <Dialog
                              data-plasmic-name={"dialogGrid7"}
                              data-plasmic-override={overrides.dialogGrid7}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid7
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid7",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid7",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__ysePi)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent__u34HA
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost7"}
                                  data-plasmic-override={
                                    overrides.containerPost7
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost7
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide7"}
                                    data-plasmic-override={
                                      overrides.commentsSide7
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide7
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments7"}
                                      data-plasmic-override={
                                        overrides.comments7
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments7
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer7"}
                                        data-plasmic-override={
                                          overrides.commentContainer7
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer7
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__ny9Gb)}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment7"}
                                          data-plasmic-override={
                                            overrides.userAndComment7
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment7
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__fP9Pv
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__hy1Cj
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate13"}
                                              data-plasmic-override={
                                                overrides.rate13
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate13
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate13", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__zniq4
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__inK7A
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___6SK0Q
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__jLfbh
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___5SU0C
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate13", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__yfMih
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate14"}
                                      data-plasmic-override={overrides.rate14}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate14
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate14",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__uzgCs
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___7V4Hl
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__qmjWx
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__frm18
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__dFn
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate14",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea7"}
                                      data-plasmic-override={
                                        overrides.textarea7
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea7
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea7",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea7"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea7",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__dFeU)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide7"}
                                    data-plasmic-override={overrides.userSide7}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide7
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction7"}
                                      data-plasmic-override={
                                        overrides.userAction7
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction7
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__zU5AW)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__et7Xw
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ri7KA
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__lDstU
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__hfl4
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose__yVd2V
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__vBh4X
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                            <Dialog
                              data-plasmic-name={"dialogGrid8"}
                              data-plasmic-override={overrides.dialogGrid8}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid8
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid8",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid8",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__dY3VN)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent__jffm
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost8"}
                                  data-plasmic-override={
                                    overrides.containerPost8
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost8
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide8"}
                                    data-plasmic-override={
                                      overrides.commentsSide8
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide8
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments8"}
                                      data-plasmic-override={
                                        overrides.comments8
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments8
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer8"}
                                        data-plasmic-override={
                                          overrides.commentContainer8
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer8
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__vp26H)}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment8"}
                                          data-plasmic-override={
                                            overrides.userAndComment8
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment8
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__uqhfb
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__uCj2E
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate15"}
                                              data-plasmic-override={
                                                overrides.rate15
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate15
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate15", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___7GgeB
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__c7Xtj
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__lrlo
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__cdGje
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__lhEeX
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate15", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__kwt7M
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate16"}
                                      data-plasmic-override={overrides.rate16}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate16
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate16",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__mld3B
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ct2Bu
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__auKVk
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___2F9Qz
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__wsgha
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate16",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea8"}
                                      data-plasmic-override={
                                        overrides.textarea8
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea8
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea8",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea8"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea8",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__t6KbK)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide8"}
                                    data-plasmic-override={overrides.userSide8}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide8
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction8"}
                                      data-plasmic-override={
                                        overrides.userAction8
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction8
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img___6Cijh)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__vxrUf
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___2T2ZG
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link___8IR5
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__dq3Zz
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose__hgfLv
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__pI8Y
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                            <Dialog
                              data-plasmic-name={"dialogGrid9"}
                              data-plasmic-override={overrides.dialogGrid9}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid9
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid9",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid9",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img___5XLk8)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent__xyJsV
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost9"}
                                  data-plasmic-override={
                                    overrides.containerPost9
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost9
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide9"}
                                    data-plasmic-override={
                                      overrides.commentsSide9
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide9
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments9"}
                                      data-plasmic-override={
                                        overrides.comments9
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments9
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer9"}
                                        data-plasmic-override={
                                          overrides.commentContainer9
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer9
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(
                                            sty.img___2WMEd
                                          )}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment9"}
                                          data-plasmic-override={
                                            overrides.userAndComment9
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment9
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__j6IKi
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__dYlgK
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate17"}
                                              data-plasmic-override={
                                                overrides.rate17
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate17
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate17", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__fMb0Z
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__wTmcE
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__ygp6K
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__aqYpM
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__fWiVd
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate17", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__kZyNa
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate18"}
                                      data-plasmic-override={overrides.rate18}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate18
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate18",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__c1E8M
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__njImf
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__xqhue
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__eMyCh
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__domE
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate18",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea9"}
                                      data-plasmic-override={
                                        overrides.textarea9
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea9
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea9",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea9"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea9",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__cb5Q)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide9"}
                                    data-plasmic-override={overrides.userSide9}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide9
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction9"}
                                      data-plasmic-override={
                                        overrides.userAction9
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction9
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__ff3Yz)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__zJlc
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__pKy
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__peOBf
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__h17Vd
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose__qvwto
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__xFay7
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                            <Dialog
                              data-plasmic-name={"dialogGrid10"}
                              data-plasmic-override={overrides.dialogGrid10}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid10
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid10",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid10",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__tGrVu)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent__vTqlq
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost10"}
                                  data-plasmic-override={
                                    overrides.containerPost10
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost10
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide10"}
                                    data-plasmic-override={
                                      overrides.commentsSide10
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide10
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments10"}
                                      data-plasmic-override={
                                        overrides.comments10
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments10
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer10"}
                                        data-plasmic-override={
                                          overrides.commentContainer10
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer10
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(
                                            sty.img___9YSpn
                                          )}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment10"}
                                          data-plasmic-override={
                                            overrides.userAndComment10
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment10
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__ipuxb
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__mBkAo
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate19"}
                                              data-plasmic-override={
                                                overrides.rate19
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate19
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate19", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__obkL9
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__cVymi
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__wWk6A
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__c4M1
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___7Zm9O
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate19", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___9AeA
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate20"}
                                      data-plasmic-override={overrides.rate20}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate20
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate20",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__rRxJg
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__rmIy
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___06MQr
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__giUyu
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__knBk1
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate20",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea10"}
                                      data-plasmic-override={
                                        overrides.textarea10
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea10
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea10",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea10"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea10",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__vtzKt)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide10"}
                                    data-plasmic-override={overrides.userSide10}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide10
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction10"}
                                      data-plasmic-override={
                                        overrides.userAction10
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction10
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__spHGz)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__uvezM
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__g9GG
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__fXHo
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__p6ENs
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose___3Tu7N
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__jux8I
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                          </div>
                          <DialogClose
                            className={classNames(
                              "__wab_instance",
                              sty.dialogClose__zJ1Sx
                            )}
                          />
                        </DialogContent>
                      </Dialog>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k0EjP
                        )}
                      >
                        {"Skill"}
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uhVla)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vUibj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xLjX8
                        )}
                      >
                        {"Bacharel"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___11BLz
                        )}
                      >
                        {"Gold"}
                      </div>
                      <Dialog
                        data-plasmic-name={"dialogSkill3"}
                        data-plasmic-override={overrides.dialogSkill3}
                        className={classNames(
                          "__wab_instance",
                          sty.dialogSkill3
                        )}
                        defaultOpen={false}
                        onOpenChange={async (...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "dialogSkill3",
                            "open"
                          ]).apply(null, eventArgs);
                        }}
                        open={generateStateValueProp($state, [
                          "dialogSkill3",
                          "open"
                        ])}
                        overlayClassName={classNames({
                          [sty["pcls_yCctsSxAfwjH"]]: true
                        })}
                        themeResetClass={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        triggerSlot={
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__xeEEy)}
                            displayHeight={"150px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"150px"}
                            loading={"lazy"}
                            src={{
                              src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                              fullWidth: 3200,
                              fullHeight: 2133,
                              aspectRatio: undefined
                            }}
                          />
                        }
                      >
                        <DialogContent
                          className={classNames(
                            "__wab_instance",
                            sty.dialogContent___0JYsF
                          )}
                          themeResetClass={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fz7Gg
                            )}
                          >
                            <Dialog
                              data-plasmic-name={"dialogGrid11"}
                              data-plasmic-override={overrides.dialogGrid11}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid11
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid11",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid11",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img___9VXc)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent__ztAu5
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost11"}
                                  data-plasmic-override={
                                    overrides.containerPost11
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost11
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide11"}
                                    data-plasmic-override={
                                      overrides.commentsSide11
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide11
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments11"}
                                      data-plasmic-override={
                                        overrides.comments11
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments11
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer11"}
                                        data-plasmic-override={
                                          overrides.commentContainer11
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer11
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__oduss)}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment11"}
                                          data-plasmic-override={
                                            overrides.userAndComment11
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment11
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__je5Le
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__tqOx8
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate21"}
                                              data-plasmic-override={
                                                overrides.rate21
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate21
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate21", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__uap4M
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___1Podm
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___2Z7Hp
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__rSvD
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___3Fg2W
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate21", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__g0K3
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate22"}
                                      data-plasmic-override={overrides.rate22}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate22
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate22",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ovX8P
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__js3H7
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__z0Wco
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__m8MAg
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__l2BrH
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate22",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea11"}
                                      data-plasmic-override={
                                        overrides.textarea11
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea11
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea11",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea11"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea11",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__rNCr4)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide11"}
                                    data-plasmic-override={overrides.userSide11}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide11
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction11"}
                                      data-plasmic-override={
                                        overrides.userAction11
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction11
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__ssDW)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__qiR0Z
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___6IPrL
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__mbWkd
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__yzHtt
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose___7Hf02
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__olxPb
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                            <Dialog
                              data-plasmic-name={"dialogGrid12"}
                              data-plasmic-override={overrides.dialogGrid12}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid12
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid12",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid12",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img___7ROn2)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent___9K803
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost12"}
                                  data-plasmic-override={
                                    overrides.containerPost12
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost12
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide12"}
                                    data-plasmic-override={
                                      overrides.commentsSide12
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide12
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments12"}
                                      data-plasmic-override={
                                        overrides.comments12
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments12
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer12"}
                                        data-plasmic-override={
                                          overrides.commentContainer12
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer12
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__hnVyg)}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment12"}
                                          data-plasmic-override={
                                            overrides.userAndComment12
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment12
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox___4Sz3A
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__e9JLj
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate23"}
                                              data-plasmic-override={
                                                overrides.rate23
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate23
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate23", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__xok5Q
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___45QMu
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__mjKJh
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___8EDeg
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__ae95Q
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate23", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ih68
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate24"}
                                      data-plasmic-override={overrides.rate24}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate24
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate24",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__fi76Y
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ellEt
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__rynL4
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__uu3Gr
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__j2ZS2
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate24",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea12"}
                                      data-plasmic-override={
                                        overrides.textarea12
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea12
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea12",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea12"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea12",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__yT2L)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide12"}
                                    data-plasmic-override={overrides.userSide12}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide12
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction12"}
                                      data-plasmic-override={
                                        overrides.userAction12
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction12
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__yqYb7)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__rw9Fv
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__rHZnc
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__ktfub
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__vc4Zw
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose__dfWmR
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__kJEI
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                            <Dialog
                              data-plasmic-name={"dialogGrid13"}
                              data-plasmic-override={overrides.dialogGrid13}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid13
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid13",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid13",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__zvEk2)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent___8DG56
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost13"}
                                  data-plasmic-override={
                                    overrides.containerPost13
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost13
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide13"}
                                    data-plasmic-override={
                                      overrides.commentsSide13
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide13
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments13"}
                                      data-plasmic-override={
                                        overrides.comments13
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments13
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer13"}
                                        data-plasmic-override={
                                          overrides.commentContainer13
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer13
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__jB0B)}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment13"}
                                          data-plasmic-override={
                                            overrides.userAndComment13
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment13
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__o97Dd
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__n4I6K
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate25"}
                                              data-plasmic-override={
                                                overrides.rate25
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate25
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate25", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__f96Bs
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__vdZx5
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__ejyzC
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__xepmY
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__pTygB
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate25", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__xNjae
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate26"}
                                      data-plasmic-override={overrides.rate26}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate26
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate26",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__mtmt
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__azwN
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___2BDld
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__kBk6B
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___40Lgx
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate26",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea13"}
                                      data-plasmic-override={
                                        overrides.textarea13
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea13
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea13",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea13"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea13",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__qtNf7)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide13"}
                                    data-plasmic-override={overrides.userSide13}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide13
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction13"}
                                      data-plasmic-override={
                                        overrides.userAction13
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction13
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__qqKqq)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__qqoFq
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__gGwhg
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link___3BfYt
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__s97Jq
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose__vzKf
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__dxthD
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                            <Dialog
                              data-plasmic-name={"dialogGrid14"}
                              data-plasmic-override={overrides.dialogGrid14}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid14
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid14",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid14",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__uabzi)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent__giD8Z
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost14"}
                                  data-plasmic-override={
                                    overrides.containerPost14
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost14
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide14"}
                                    data-plasmic-override={
                                      overrides.commentsSide14
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide14
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments14"}
                                      data-plasmic-override={
                                        overrides.comments14
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments14
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer14"}
                                        data-plasmic-override={
                                          overrides.commentContainer14
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer14
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img___6WrE)}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment14"}
                                          data-plasmic-override={
                                            overrides.userAndComment14
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment14
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__nKjCb
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link___9NzAt
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate27"}
                                              data-plasmic-override={
                                                overrides.rate27
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate27
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate27", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__fkGj
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__u6Z49
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__qalV
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__qqD
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___3MBav
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate27", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___69XfP
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate28"}
                                      data-plasmic-override={overrides.rate28}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate28
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate28",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__sbwDv
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__fQAps
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___6Wsd
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__mDeeF
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__xC90N
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate28",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea14"}
                                      data-plasmic-override={
                                        overrides.textarea14
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea14
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea14",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea14"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea14",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__ltBq)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide14"}
                                    data-plasmic-override={overrides.userSide14}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide14
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction14"}
                                      data-plasmic-override={
                                        overrides.userAction14
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction14
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__a5WUz)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__mgVpg
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__qhNam
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__jBV
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___6Nm75
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose__aljxo
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__mqqSg
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                            <Dialog
                              data-plasmic-name={"dialogGrid15"}
                              data-plasmic-override={overrides.dialogGrid15}
                              className={classNames(
                                "__wab_instance",
                                sty.dialogGrid15
                              )}
                              defaultOpen={false}
                              onOpenChange={async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "dialogGrid15",
                                  "open"
                                ]).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialogGrid15",
                                "open"
                              ])}
                              themeResetClass={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              triggerSlot={
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__ydxBa)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"197px"}
                                  displayMaxWidth={"266px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"266px"}
                                  loading={"lazy"}
                                  src={{
                                    src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                    fullWidth: 3200,
                                    fullHeight: 2133,
                                    aspectRatio: undefined
                                  }}
                                />
                              }
                            >
                              <DialogContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.dialogContent___4NoSa
                                )}
                                themeResetClass={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"containerPost15"}
                                  data-plasmic-override={
                                    overrides.containerPost15
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.containerPost15
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"commentsSide15"}
                                    data-plasmic-override={
                                      overrides.commentsSide15
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.commentsSide15
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"comments15"}
                                      data-plasmic-override={
                                        overrides.comments15
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.comments15
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"commentContainer15"}
                                        data-plasmic-override={
                                          overrides.commentContainer15
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.commentContainer15
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__cnook)}
                                          displayHeight={"30px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"30px"}
                                          loading={"lazy"}
                                        />

                                        <div
                                          data-plasmic-name={"userAndComment15"}
                                          data-plasmic-override={
                                            overrides.userAndComment15
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.userAndComment15
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__crTBd
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link___6PcJz
                                              )}
                                              href={`/affiliate-homepage`}
                                              platform={"react"}
                                            >
                                              {"Cool  User"}
                                            </PlasmicLink__>
                                            <AntdRate
                                              data-plasmic-name={"rate29"}
                                              data-plasmic-override={
                                                overrides.rate29
                                              }
                                              allowHalf={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.rate29
                                              )}
                                              disabled={true}
                                              onChange={async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["rate29", "value"]
                                                ).apply(null, eventArgs);
                                              }}
                                              symbols={
                                                <React.Fragment>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__mlwSf
                                                    )}
                                                  >
                                                    {"1"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__wm4XQ
                                                    )}
                                                  >
                                                    {"2"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__idQ5Q
                                                    )}
                                                  >
                                                    {"3"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__n9Oy7
                                                    )}
                                                  >
                                                    {"4"}
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__qUnD
                                                    )}
                                                  >
                                                    {"5"}
                                                  </div>
                                                </React.Fragment>
                                              }
                                              value={generateStateValueProp(
                                                $state,
                                                ["rate29", "value"]
                                              )}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___8Wdsp
                                            )}
                                          >
                                            {"Cool great comment"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <AntdRate
                                      data-plasmic-name={"rate30"}
                                      data-plasmic-override={overrides.rate30}
                                      allowHalf={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rate30
                                      )}
                                      onChange={async (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "rate30",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      symbols={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__pEa8U
                                            )}
                                          >
                                            {"1"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ishun
                                            )}
                                          >
                                            {"2"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__eTd7L
                                            )}
                                          >
                                            {"3"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__bsGVd
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__o3JTu
                                            )}
                                          >
                                            {"5"}
                                          </div>
                                        </React.Fragment>
                                      }
                                      value={generateStateValueProp($state, [
                                        "rate30",
                                        "value"
                                      ])}
                                    />

                                    <textarea
                                      data-plasmic-name={"textarea15"}
                                      data-plasmic-override={
                                        overrides.textarea15
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.textarea,
                                        sty.textarea15
                                      )}
                                      onChange={async (...eventArgs) => {
                                        (e => {
                                          generateStateOnChangeProp($state, [
                                            "textarea15",
                                            "value"
                                          ])(e.target.value);
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={"Add a comment..."}
                                      ref={ref => {
                                        $refs["textarea15"] = ref;
                                      }}
                                      value={
                                        generateStateValueProp($state, [
                                          "textarea15",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img___489It)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"400px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"539px"}
                                    loading={"lazy"}
                                    src={{
                                      src: zqLeeVbDjv88IbcUnsplashJpgXtkCnxecXa1Y,
                                      fullWidth: 3200,
                                      fullHeight: 2133,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    data-plasmic-name={"userSide15"}
                                    data-plasmic-override={overrides.userSide15}
                                    className={classNames(
                                      projectcss.all,
                                      sty.userSide15
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"userAction15"}
                                      data-plasmic-override={
                                        overrides.userAction15
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.userAction15
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__cQk5X)}
                                        displayHeight={"40px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"40px"}
                                        loading={"lazy"}
                                      />

                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__vEiEv
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"User new"}
                                      </PlasmicLink__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__m6Dg6
                                        )}
                                      >
                                        {"Commented about"}
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__rq5T6
                                        )}
                                        href={`/affiliate-homepage`}
                                        platform={"react"}
                                      >
                                        {"Community user"}
                                      </PlasmicLink__>
                                      <ReportSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__b55M
                                        )}
                                        onClick={async event => {
                                          const $steps = {};
                                          $steps[
                                            "updateSliderCarouselCurrentSlide"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "sliderCarousel",
                                                      "currentSlide"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] != null &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ] = await $steps[
                                              "updateSliderCarouselCurrentSlide"
                                            ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <DialogClose
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dialogClose__xsK6
                                        )}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__sB1Ci
                                      )}
                                    >
                                      {
                                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                      }
                                    </div>
                                  </div>
                                </Stack__>
                              </DialogContent>
                            </Dialog>
                          </div>
                          <DialogClose
                            className={classNames(
                              "__wab_instance",
                              sty.dialogClose__gcY7X
                            )}
                          />
                        </DialogContent>
                      </Dialog>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__szHb2
                        )}
                      >
                        {"Skill"}
                      </div>
                    </div>
                  </div>
                </SliderWrapper>
              );
            })()}
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "topBar",
    "navigationBar",
    "account",
    "button",
    "container1",
    "loginButton",
    "container3",
    "container2",
    "sliderCarousel",
    "container4",
    "container5",
    "container6",
    "sliderCarousel2",
    "dialogSkill",
    "dialogGrid",
    "containerPost",
    "commentsSide",
    "comments",
    "commentContainer",
    "userAndComment",
    "rate2",
    "rate",
    "textarea",
    "userSide",
    "userAction",
    "dialogGrid2",
    "containerPost2",
    "commentsSide2",
    "comments2",
    "commentContainer2",
    "userAndComment2",
    "rate3",
    "rate4",
    "textarea2",
    "userSide2",
    "userAction2",
    "dialogGrid3",
    "containerPost3",
    "commentsSide3",
    "comments3",
    "commentContainer3",
    "userAndComment3",
    "rate5",
    "rate6",
    "textarea3",
    "userSide3",
    "userAction3",
    "dialogGrid4",
    "containerPost4",
    "commentsSide4",
    "comments4",
    "commentContainer4",
    "userAndComment4",
    "rate7",
    "rate8",
    "textarea4",
    "userSide4",
    "userAction4",
    "dialogGrid5",
    "containerPost5",
    "commentsSide5",
    "comments5",
    "commentContainer5",
    "userAndComment5",
    "rate9",
    "rate10",
    "textarea5",
    "userSide5",
    "userAction5",
    "dialogSkill2",
    "dialogGrid6",
    "containerPost6",
    "commentsSide6",
    "comments6",
    "commentContainer6",
    "userAndComment6",
    "rate11",
    "rate12",
    "textarea6",
    "userSide6",
    "userAction6",
    "dialogGrid7",
    "containerPost7",
    "commentsSide7",
    "comments7",
    "commentContainer7",
    "userAndComment7",
    "rate13",
    "rate14",
    "textarea7",
    "userSide7",
    "userAction7",
    "dialogGrid8",
    "containerPost8",
    "commentsSide8",
    "comments8",
    "commentContainer8",
    "userAndComment8",
    "rate15",
    "rate16",
    "textarea8",
    "userSide8",
    "userAction8",
    "dialogGrid9",
    "containerPost9",
    "commentsSide9",
    "comments9",
    "commentContainer9",
    "userAndComment9",
    "rate17",
    "rate18",
    "textarea9",
    "userSide9",
    "userAction9",
    "dialogGrid10",
    "containerPost10",
    "commentsSide10",
    "comments10",
    "commentContainer10",
    "userAndComment10",
    "rate19",
    "rate20",
    "textarea10",
    "userSide10",
    "userAction10",
    "dialogSkill3",
    "dialogGrid11",
    "containerPost11",
    "commentsSide11",
    "comments11",
    "commentContainer11",
    "userAndComment11",
    "rate21",
    "rate22",
    "textarea11",
    "userSide11",
    "userAction11",
    "dialogGrid12",
    "containerPost12",
    "commentsSide12",
    "comments12",
    "commentContainer12",
    "userAndComment12",
    "rate23",
    "rate24",
    "textarea12",
    "userSide12",
    "userAction12",
    "dialogGrid13",
    "containerPost13",
    "commentsSide13",
    "comments13",
    "commentContainer13",
    "userAndComment13",
    "rate25",
    "rate26",
    "textarea13",
    "userSide13",
    "userAction13",
    "dialogGrid14",
    "containerPost14",
    "commentsSide14",
    "comments14",
    "commentContainer14",
    "userAndComment14",
    "rate27",
    "rate28",
    "textarea14",
    "userSide14",
    "userAction14",
    "dialogGrid15",
    "containerPost15",
    "commentsSide15",
    "comments15",
    "commentContainer15",
    "userAndComment15",
    "rate29",
    "rate30",
    "textarea15",
    "userSide15",
    "userAction15"
  ],

  topBar: ["topBar", "navigationBar", "account", "button"],
  navigationBar: ["navigationBar"],
  account: ["account", "button"],
  button: ["button"],
  container1: ["container1", "loginButton"],
  loginButton: ["loginButton"],
  container3: ["container3"],
  container2: ["container2", "sliderCarousel"],
  sliderCarousel: ["sliderCarousel"],
  container4: ["container4"],
  container5: ["container5"],
  container6: [
    "container6",
    "sliderCarousel2",
    "dialogSkill",
    "dialogGrid",
    "containerPost",
    "commentsSide",
    "comments",
    "commentContainer",
    "userAndComment",
    "rate2",
    "rate",
    "textarea",
    "userSide",
    "userAction",
    "dialogGrid2",
    "containerPost2",
    "commentsSide2",
    "comments2",
    "commentContainer2",
    "userAndComment2",
    "rate3",
    "rate4",
    "textarea2",
    "userSide2",
    "userAction2",
    "dialogGrid3",
    "containerPost3",
    "commentsSide3",
    "comments3",
    "commentContainer3",
    "userAndComment3",
    "rate5",
    "rate6",
    "textarea3",
    "userSide3",
    "userAction3",
    "dialogGrid4",
    "containerPost4",
    "commentsSide4",
    "comments4",
    "commentContainer4",
    "userAndComment4",
    "rate7",
    "rate8",
    "textarea4",
    "userSide4",
    "userAction4",
    "dialogGrid5",
    "containerPost5",
    "commentsSide5",
    "comments5",
    "commentContainer5",
    "userAndComment5",
    "rate9",
    "rate10",
    "textarea5",
    "userSide5",
    "userAction5",
    "dialogSkill2",
    "dialogGrid6",
    "containerPost6",
    "commentsSide6",
    "comments6",
    "commentContainer6",
    "userAndComment6",
    "rate11",
    "rate12",
    "textarea6",
    "userSide6",
    "userAction6",
    "dialogGrid7",
    "containerPost7",
    "commentsSide7",
    "comments7",
    "commentContainer7",
    "userAndComment7",
    "rate13",
    "rate14",
    "textarea7",
    "userSide7",
    "userAction7",
    "dialogGrid8",
    "containerPost8",
    "commentsSide8",
    "comments8",
    "commentContainer8",
    "userAndComment8",
    "rate15",
    "rate16",
    "textarea8",
    "userSide8",
    "userAction8",
    "dialogGrid9",
    "containerPost9",
    "commentsSide9",
    "comments9",
    "commentContainer9",
    "userAndComment9",
    "rate17",
    "rate18",
    "textarea9",
    "userSide9",
    "userAction9",
    "dialogGrid10",
    "containerPost10",
    "commentsSide10",
    "comments10",
    "commentContainer10",
    "userAndComment10",
    "rate19",
    "rate20",
    "textarea10",
    "userSide10",
    "userAction10",
    "dialogSkill3",
    "dialogGrid11",
    "containerPost11",
    "commentsSide11",
    "comments11",
    "commentContainer11",
    "userAndComment11",
    "rate21",
    "rate22",
    "textarea11",
    "userSide11",
    "userAction11",
    "dialogGrid12",
    "containerPost12",
    "commentsSide12",
    "comments12",
    "commentContainer12",
    "userAndComment12",
    "rate23",
    "rate24",
    "textarea12",
    "userSide12",
    "userAction12",
    "dialogGrid13",
    "containerPost13",
    "commentsSide13",
    "comments13",
    "commentContainer13",
    "userAndComment13",
    "rate25",
    "rate26",
    "textarea13",
    "userSide13",
    "userAction13",
    "dialogGrid14",
    "containerPost14",
    "commentsSide14",
    "comments14",
    "commentContainer14",
    "userAndComment14",
    "rate27",
    "rate28",
    "textarea14",
    "userSide14",
    "userAction14",
    "dialogGrid15",
    "containerPost15",
    "commentsSide15",
    "comments15",
    "commentContainer15",
    "userAndComment15",
    "rate29",
    "rate30",
    "textarea15",
    "userSide15",
    "userAction15"
  ],

  sliderCarousel2: [
    "sliderCarousel2",
    "dialogSkill",
    "dialogGrid",
    "containerPost",
    "commentsSide",
    "comments",
    "commentContainer",
    "userAndComment",
    "rate2",
    "rate",
    "textarea",
    "userSide",
    "userAction",
    "dialogGrid2",
    "containerPost2",
    "commentsSide2",
    "comments2",
    "commentContainer2",
    "userAndComment2",
    "rate3",
    "rate4",
    "textarea2",
    "userSide2",
    "userAction2",
    "dialogGrid3",
    "containerPost3",
    "commentsSide3",
    "comments3",
    "commentContainer3",
    "userAndComment3",
    "rate5",
    "rate6",
    "textarea3",
    "userSide3",
    "userAction3",
    "dialogGrid4",
    "containerPost4",
    "commentsSide4",
    "comments4",
    "commentContainer4",
    "userAndComment4",
    "rate7",
    "rate8",
    "textarea4",
    "userSide4",
    "userAction4",
    "dialogGrid5",
    "containerPost5",
    "commentsSide5",
    "comments5",
    "commentContainer5",
    "userAndComment5",
    "rate9",
    "rate10",
    "textarea5",
    "userSide5",
    "userAction5",
    "dialogSkill2",
    "dialogGrid6",
    "containerPost6",
    "commentsSide6",
    "comments6",
    "commentContainer6",
    "userAndComment6",
    "rate11",
    "rate12",
    "textarea6",
    "userSide6",
    "userAction6",
    "dialogGrid7",
    "containerPost7",
    "commentsSide7",
    "comments7",
    "commentContainer7",
    "userAndComment7",
    "rate13",
    "rate14",
    "textarea7",
    "userSide7",
    "userAction7",
    "dialogGrid8",
    "containerPost8",
    "commentsSide8",
    "comments8",
    "commentContainer8",
    "userAndComment8",
    "rate15",
    "rate16",
    "textarea8",
    "userSide8",
    "userAction8",
    "dialogGrid9",
    "containerPost9",
    "commentsSide9",
    "comments9",
    "commentContainer9",
    "userAndComment9",
    "rate17",
    "rate18",
    "textarea9",
    "userSide9",
    "userAction9",
    "dialogGrid10",
    "containerPost10",
    "commentsSide10",
    "comments10",
    "commentContainer10",
    "userAndComment10",
    "rate19",
    "rate20",
    "textarea10",
    "userSide10",
    "userAction10",
    "dialogSkill3",
    "dialogGrid11",
    "containerPost11",
    "commentsSide11",
    "comments11",
    "commentContainer11",
    "userAndComment11",
    "rate21",
    "rate22",
    "textarea11",
    "userSide11",
    "userAction11",
    "dialogGrid12",
    "containerPost12",
    "commentsSide12",
    "comments12",
    "commentContainer12",
    "userAndComment12",
    "rate23",
    "rate24",
    "textarea12",
    "userSide12",
    "userAction12",
    "dialogGrid13",
    "containerPost13",
    "commentsSide13",
    "comments13",
    "commentContainer13",
    "userAndComment13",
    "rate25",
    "rate26",
    "textarea13",
    "userSide13",
    "userAction13",
    "dialogGrid14",
    "containerPost14",
    "commentsSide14",
    "comments14",
    "commentContainer14",
    "userAndComment14",
    "rate27",
    "rate28",
    "textarea14",
    "userSide14",
    "userAction14",
    "dialogGrid15",
    "containerPost15",
    "commentsSide15",
    "comments15",
    "commentContainer15",
    "userAndComment15",
    "rate29",
    "rate30",
    "textarea15",
    "userSide15",
    "userAction15"
  ],

  dialogSkill: [
    "dialogSkill",
    "dialogGrid",
    "containerPost",
    "commentsSide",
    "comments",
    "commentContainer",
    "userAndComment",
    "rate2",
    "rate",
    "textarea",
    "userSide",
    "userAction",
    "dialogGrid2",
    "containerPost2",
    "commentsSide2",
    "comments2",
    "commentContainer2",
    "userAndComment2",
    "rate3",
    "rate4",
    "textarea2",
    "userSide2",
    "userAction2",
    "dialogGrid3",
    "containerPost3",
    "commentsSide3",
    "comments3",
    "commentContainer3",
    "userAndComment3",
    "rate5",
    "rate6",
    "textarea3",
    "userSide3",
    "userAction3",
    "dialogGrid4",
    "containerPost4",
    "commentsSide4",
    "comments4",
    "commentContainer4",
    "userAndComment4",
    "rate7",
    "rate8",
    "textarea4",
    "userSide4",
    "userAction4",
    "dialogGrid5",
    "containerPost5",
    "commentsSide5",
    "comments5",
    "commentContainer5",
    "userAndComment5",
    "rate9",
    "rate10",
    "textarea5",
    "userSide5",
    "userAction5"
  ],

  dialogGrid: [
    "dialogGrid",
    "containerPost",
    "commentsSide",
    "comments",
    "commentContainer",
    "userAndComment",
    "rate2",
    "rate",
    "textarea",
    "userSide",
    "userAction"
  ],

  containerPost: [
    "containerPost",
    "commentsSide",
    "comments",
    "commentContainer",
    "userAndComment",
    "rate2",
    "rate",
    "textarea",
    "userSide",
    "userAction"
  ],

  commentsSide: [
    "commentsSide",
    "comments",
    "commentContainer",
    "userAndComment",
    "rate2",
    "rate",
    "textarea"
  ],

  comments: ["comments", "commentContainer", "userAndComment", "rate2"],
  commentContainer: ["commentContainer", "userAndComment", "rate2"],
  userAndComment: ["userAndComment", "rate2"],
  rate2: ["rate2"],
  rate: ["rate"],
  textarea: ["textarea"],
  userSide: ["userSide", "userAction"],
  userAction: ["userAction"],
  dialogGrid2: [
    "dialogGrid2",
    "containerPost2",
    "commentsSide2",
    "comments2",
    "commentContainer2",
    "userAndComment2",
    "rate3",
    "rate4",
    "textarea2",
    "userSide2",
    "userAction2"
  ],

  containerPost2: [
    "containerPost2",
    "commentsSide2",
    "comments2",
    "commentContainer2",
    "userAndComment2",
    "rate3",
    "rate4",
    "textarea2",
    "userSide2",
    "userAction2"
  ],

  commentsSide2: [
    "commentsSide2",
    "comments2",
    "commentContainer2",
    "userAndComment2",
    "rate3",
    "rate4",
    "textarea2"
  ],

  comments2: ["comments2", "commentContainer2", "userAndComment2", "rate3"],
  commentContainer2: ["commentContainer2", "userAndComment2", "rate3"],
  userAndComment2: ["userAndComment2", "rate3"],
  rate3: ["rate3"],
  rate4: ["rate4"],
  textarea2: ["textarea2"],
  userSide2: ["userSide2", "userAction2"],
  userAction2: ["userAction2"],
  dialogGrid3: [
    "dialogGrid3",
    "containerPost3",
    "commentsSide3",
    "comments3",
    "commentContainer3",
    "userAndComment3",
    "rate5",
    "rate6",
    "textarea3",
    "userSide3",
    "userAction3"
  ],

  containerPost3: [
    "containerPost3",
    "commentsSide3",
    "comments3",
    "commentContainer3",
    "userAndComment3",
    "rate5",
    "rate6",
    "textarea3",
    "userSide3",
    "userAction3"
  ],

  commentsSide3: [
    "commentsSide3",
    "comments3",
    "commentContainer3",
    "userAndComment3",
    "rate5",
    "rate6",
    "textarea3"
  ],

  comments3: ["comments3", "commentContainer3", "userAndComment3", "rate5"],
  commentContainer3: ["commentContainer3", "userAndComment3", "rate5"],
  userAndComment3: ["userAndComment3", "rate5"],
  rate5: ["rate5"],
  rate6: ["rate6"],
  textarea3: ["textarea3"],
  userSide3: ["userSide3", "userAction3"],
  userAction3: ["userAction3"],
  dialogGrid4: [
    "dialogGrid4",
    "containerPost4",
    "commentsSide4",
    "comments4",
    "commentContainer4",
    "userAndComment4",
    "rate7",
    "rate8",
    "textarea4",
    "userSide4",
    "userAction4"
  ],

  containerPost4: [
    "containerPost4",
    "commentsSide4",
    "comments4",
    "commentContainer4",
    "userAndComment4",
    "rate7",
    "rate8",
    "textarea4",
    "userSide4",
    "userAction4"
  ],

  commentsSide4: [
    "commentsSide4",
    "comments4",
    "commentContainer4",
    "userAndComment4",
    "rate7",
    "rate8",
    "textarea4"
  ],

  comments4: ["comments4", "commentContainer4", "userAndComment4", "rate7"],
  commentContainer4: ["commentContainer4", "userAndComment4", "rate7"],
  userAndComment4: ["userAndComment4", "rate7"],
  rate7: ["rate7"],
  rate8: ["rate8"],
  textarea4: ["textarea4"],
  userSide4: ["userSide4", "userAction4"],
  userAction4: ["userAction4"],
  dialogGrid5: [
    "dialogGrid5",
    "containerPost5",
    "commentsSide5",
    "comments5",
    "commentContainer5",
    "userAndComment5",
    "rate9",
    "rate10",
    "textarea5",
    "userSide5",
    "userAction5"
  ],

  containerPost5: [
    "containerPost5",
    "commentsSide5",
    "comments5",
    "commentContainer5",
    "userAndComment5",
    "rate9",
    "rate10",
    "textarea5",
    "userSide5",
    "userAction5"
  ],

  commentsSide5: [
    "commentsSide5",
    "comments5",
    "commentContainer5",
    "userAndComment5",
    "rate9",
    "rate10",
    "textarea5"
  ],

  comments5: ["comments5", "commentContainer5", "userAndComment5", "rate9"],
  commentContainer5: ["commentContainer5", "userAndComment5", "rate9"],
  userAndComment5: ["userAndComment5", "rate9"],
  rate9: ["rate9"],
  rate10: ["rate10"],
  textarea5: ["textarea5"],
  userSide5: ["userSide5", "userAction5"],
  userAction5: ["userAction5"],
  dialogSkill2: [
    "dialogSkill2",
    "dialogGrid6",
    "containerPost6",
    "commentsSide6",
    "comments6",
    "commentContainer6",
    "userAndComment6",
    "rate11",
    "rate12",
    "textarea6",
    "userSide6",
    "userAction6",
    "dialogGrid7",
    "containerPost7",
    "commentsSide7",
    "comments7",
    "commentContainer7",
    "userAndComment7",
    "rate13",
    "rate14",
    "textarea7",
    "userSide7",
    "userAction7",
    "dialogGrid8",
    "containerPost8",
    "commentsSide8",
    "comments8",
    "commentContainer8",
    "userAndComment8",
    "rate15",
    "rate16",
    "textarea8",
    "userSide8",
    "userAction8",
    "dialogGrid9",
    "containerPost9",
    "commentsSide9",
    "comments9",
    "commentContainer9",
    "userAndComment9",
    "rate17",
    "rate18",
    "textarea9",
    "userSide9",
    "userAction9",
    "dialogGrid10",
    "containerPost10",
    "commentsSide10",
    "comments10",
    "commentContainer10",
    "userAndComment10",
    "rate19",
    "rate20",
    "textarea10",
    "userSide10",
    "userAction10"
  ],

  dialogGrid6: [
    "dialogGrid6",
    "containerPost6",
    "commentsSide6",
    "comments6",
    "commentContainer6",
    "userAndComment6",
    "rate11",
    "rate12",
    "textarea6",
    "userSide6",
    "userAction6"
  ],

  containerPost6: [
    "containerPost6",
    "commentsSide6",
    "comments6",
    "commentContainer6",
    "userAndComment6",
    "rate11",
    "rate12",
    "textarea6",
    "userSide6",
    "userAction6"
  ],

  commentsSide6: [
    "commentsSide6",
    "comments6",
    "commentContainer6",
    "userAndComment6",
    "rate11",
    "rate12",
    "textarea6"
  ],

  comments6: ["comments6", "commentContainer6", "userAndComment6", "rate11"],
  commentContainer6: ["commentContainer6", "userAndComment6", "rate11"],
  userAndComment6: ["userAndComment6", "rate11"],
  rate11: ["rate11"],
  rate12: ["rate12"],
  textarea6: ["textarea6"],
  userSide6: ["userSide6", "userAction6"],
  userAction6: ["userAction6"],
  dialogGrid7: [
    "dialogGrid7",
    "containerPost7",
    "commentsSide7",
    "comments7",
    "commentContainer7",
    "userAndComment7",
    "rate13",
    "rate14",
    "textarea7",
    "userSide7",
    "userAction7"
  ],

  containerPost7: [
    "containerPost7",
    "commentsSide7",
    "comments7",
    "commentContainer7",
    "userAndComment7",
    "rate13",
    "rate14",
    "textarea7",
    "userSide7",
    "userAction7"
  ],

  commentsSide7: [
    "commentsSide7",
    "comments7",
    "commentContainer7",
    "userAndComment7",
    "rate13",
    "rate14",
    "textarea7"
  ],

  comments7: ["comments7", "commentContainer7", "userAndComment7", "rate13"],
  commentContainer7: ["commentContainer7", "userAndComment7", "rate13"],
  userAndComment7: ["userAndComment7", "rate13"],
  rate13: ["rate13"],
  rate14: ["rate14"],
  textarea7: ["textarea7"],
  userSide7: ["userSide7", "userAction7"],
  userAction7: ["userAction7"],
  dialogGrid8: [
    "dialogGrid8",
    "containerPost8",
    "commentsSide8",
    "comments8",
    "commentContainer8",
    "userAndComment8",
    "rate15",
    "rate16",
    "textarea8",
    "userSide8",
    "userAction8"
  ],

  containerPost8: [
    "containerPost8",
    "commentsSide8",
    "comments8",
    "commentContainer8",
    "userAndComment8",
    "rate15",
    "rate16",
    "textarea8",
    "userSide8",
    "userAction8"
  ],

  commentsSide8: [
    "commentsSide8",
    "comments8",
    "commentContainer8",
    "userAndComment8",
    "rate15",
    "rate16",
    "textarea8"
  ],

  comments8: ["comments8", "commentContainer8", "userAndComment8", "rate15"],
  commentContainer8: ["commentContainer8", "userAndComment8", "rate15"],
  userAndComment8: ["userAndComment8", "rate15"],
  rate15: ["rate15"],
  rate16: ["rate16"],
  textarea8: ["textarea8"],
  userSide8: ["userSide8", "userAction8"],
  userAction8: ["userAction8"],
  dialogGrid9: [
    "dialogGrid9",
    "containerPost9",
    "commentsSide9",
    "comments9",
    "commentContainer9",
    "userAndComment9",
    "rate17",
    "rate18",
    "textarea9",
    "userSide9",
    "userAction9"
  ],

  containerPost9: [
    "containerPost9",
    "commentsSide9",
    "comments9",
    "commentContainer9",
    "userAndComment9",
    "rate17",
    "rate18",
    "textarea9",
    "userSide9",
    "userAction9"
  ],

  commentsSide9: [
    "commentsSide9",
    "comments9",
    "commentContainer9",
    "userAndComment9",
    "rate17",
    "rate18",
    "textarea9"
  ],

  comments9: ["comments9", "commentContainer9", "userAndComment9", "rate17"],
  commentContainer9: ["commentContainer9", "userAndComment9", "rate17"],
  userAndComment9: ["userAndComment9", "rate17"],
  rate17: ["rate17"],
  rate18: ["rate18"],
  textarea9: ["textarea9"],
  userSide9: ["userSide9", "userAction9"],
  userAction9: ["userAction9"],
  dialogGrid10: [
    "dialogGrid10",
    "containerPost10",
    "commentsSide10",
    "comments10",
    "commentContainer10",
    "userAndComment10",
    "rate19",
    "rate20",
    "textarea10",
    "userSide10",
    "userAction10"
  ],

  containerPost10: [
    "containerPost10",
    "commentsSide10",
    "comments10",
    "commentContainer10",
    "userAndComment10",
    "rate19",
    "rate20",
    "textarea10",
    "userSide10",
    "userAction10"
  ],

  commentsSide10: [
    "commentsSide10",
    "comments10",
    "commentContainer10",
    "userAndComment10",
    "rate19",
    "rate20",
    "textarea10"
  ],

  comments10: [
    "comments10",
    "commentContainer10",
    "userAndComment10",
    "rate19"
  ],

  commentContainer10: ["commentContainer10", "userAndComment10", "rate19"],
  userAndComment10: ["userAndComment10", "rate19"],
  rate19: ["rate19"],
  rate20: ["rate20"],
  textarea10: ["textarea10"],
  userSide10: ["userSide10", "userAction10"],
  userAction10: ["userAction10"],
  dialogSkill3: [
    "dialogSkill3",
    "dialogGrid11",
    "containerPost11",
    "commentsSide11",
    "comments11",
    "commentContainer11",
    "userAndComment11",
    "rate21",
    "rate22",
    "textarea11",
    "userSide11",
    "userAction11",
    "dialogGrid12",
    "containerPost12",
    "commentsSide12",
    "comments12",
    "commentContainer12",
    "userAndComment12",
    "rate23",
    "rate24",
    "textarea12",
    "userSide12",
    "userAction12",
    "dialogGrid13",
    "containerPost13",
    "commentsSide13",
    "comments13",
    "commentContainer13",
    "userAndComment13",
    "rate25",
    "rate26",
    "textarea13",
    "userSide13",
    "userAction13",
    "dialogGrid14",
    "containerPost14",
    "commentsSide14",
    "comments14",
    "commentContainer14",
    "userAndComment14",
    "rate27",
    "rate28",
    "textarea14",
    "userSide14",
    "userAction14",
    "dialogGrid15",
    "containerPost15",
    "commentsSide15",
    "comments15",
    "commentContainer15",
    "userAndComment15",
    "rate29",
    "rate30",
    "textarea15",
    "userSide15",
    "userAction15"
  ],

  dialogGrid11: [
    "dialogGrid11",
    "containerPost11",
    "commentsSide11",
    "comments11",
    "commentContainer11",
    "userAndComment11",
    "rate21",
    "rate22",
    "textarea11",
    "userSide11",
    "userAction11"
  ],

  containerPost11: [
    "containerPost11",
    "commentsSide11",
    "comments11",
    "commentContainer11",
    "userAndComment11",
    "rate21",
    "rate22",
    "textarea11",
    "userSide11",
    "userAction11"
  ],

  commentsSide11: [
    "commentsSide11",
    "comments11",
    "commentContainer11",
    "userAndComment11",
    "rate21",
    "rate22",
    "textarea11"
  ],

  comments11: [
    "comments11",
    "commentContainer11",
    "userAndComment11",
    "rate21"
  ],

  commentContainer11: ["commentContainer11", "userAndComment11", "rate21"],
  userAndComment11: ["userAndComment11", "rate21"],
  rate21: ["rate21"],
  rate22: ["rate22"],
  textarea11: ["textarea11"],
  userSide11: ["userSide11", "userAction11"],
  userAction11: ["userAction11"],
  dialogGrid12: [
    "dialogGrid12",
    "containerPost12",
    "commentsSide12",
    "comments12",
    "commentContainer12",
    "userAndComment12",
    "rate23",
    "rate24",
    "textarea12",
    "userSide12",
    "userAction12"
  ],

  containerPost12: [
    "containerPost12",
    "commentsSide12",
    "comments12",
    "commentContainer12",
    "userAndComment12",
    "rate23",
    "rate24",
    "textarea12",
    "userSide12",
    "userAction12"
  ],

  commentsSide12: [
    "commentsSide12",
    "comments12",
    "commentContainer12",
    "userAndComment12",
    "rate23",
    "rate24",
    "textarea12"
  ],

  comments12: [
    "comments12",
    "commentContainer12",
    "userAndComment12",
    "rate23"
  ],

  commentContainer12: ["commentContainer12", "userAndComment12", "rate23"],
  userAndComment12: ["userAndComment12", "rate23"],
  rate23: ["rate23"],
  rate24: ["rate24"],
  textarea12: ["textarea12"],
  userSide12: ["userSide12", "userAction12"],
  userAction12: ["userAction12"],
  dialogGrid13: [
    "dialogGrid13",
    "containerPost13",
    "commentsSide13",
    "comments13",
    "commentContainer13",
    "userAndComment13",
    "rate25",
    "rate26",
    "textarea13",
    "userSide13",
    "userAction13"
  ],

  containerPost13: [
    "containerPost13",
    "commentsSide13",
    "comments13",
    "commentContainer13",
    "userAndComment13",
    "rate25",
    "rate26",
    "textarea13",
    "userSide13",
    "userAction13"
  ],

  commentsSide13: [
    "commentsSide13",
    "comments13",
    "commentContainer13",
    "userAndComment13",
    "rate25",
    "rate26",
    "textarea13"
  ],

  comments13: [
    "comments13",
    "commentContainer13",
    "userAndComment13",
    "rate25"
  ],

  commentContainer13: ["commentContainer13", "userAndComment13", "rate25"],
  userAndComment13: ["userAndComment13", "rate25"],
  rate25: ["rate25"],
  rate26: ["rate26"],
  textarea13: ["textarea13"],
  userSide13: ["userSide13", "userAction13"],
  userAction13: ["userAction13"],
  dialogGrid14: [
    "dialogGrid14",
    "containerPost14",
    "commentsSide14",
    "comments14",
    "commentContainer14",
    "userAndComment14",
    "rate27",
    "rate28",
    "textarea14",
    "userSide14",
    "userAction14"
  ],

  containerPost14: [
    "containerPost14",
    "commentsSide14",
    "comments14",
    "commentContainer14",
    "userAndComment14",
    "rate27",
    "rate28",
    "textarea14",
    "userSide14",
    "userAction14"
  ],

  commentsSide14: [
    "commentsSide14",
    "comments14",
    "commentContainer14",
    "userAndComment14",
    "rate27",
    "rate28",
    "textarea14"
  ],

  comments14: [
    "comments14",
    "commentContainer14",
    "userAndComment14",
    "rate27"
  ],

  commentContainer14: ["commentContainer14", "userAndComment14", "rate27"],
  userAndComment14: ["userAndComment14", "rate27"],
  rate27: ["rate27"],
  rate28: ["rate28"],
  textarea14: ["textarea14"],
  userSide14: ["userSide14", "userAction14"],
  userAction14: ["userAction14"],
  dialogGrid15: [
    "dialogGrid15",
    "containerPost15",
    "commentsSide15",
    "comments15",
    "commentContainer15",
    "userAndComment15",
    "rate29",
    "rate30",
    "textarea15",
    "userSide15",
    "userAction15"
  ],

  containerPost15: [
    "containerPost15",
    "commentsSide15",
    "comments15",
    "commentContainer15",
    "userAndComment15",
    "rate29",
    "rate30",
    "textarea15",
    "userSide15",
    "userAction15"
  ],

  commentsSide15: [
    "commentsSide15",
    "comments15",
    "commentContainer15",
    "userAndComment15",
    "rate29",
    "rate30",
    "textarea15"
  ],

  comments15: [
    "comments15",
    "commentContainer15",
    "userAndComment15",
    "rate29"
  ],

  commentContainer15: ["commentContainer15", "userAndComment15", "rate29"],
  userAndComment15: ["userAndComment15", "rate29"],
  rate29: ["rate29"],
  rate30: ["rate30"],
  textarea15: ["textarea15"],
  userSide15: ["userSide15", "userAction15"],
  userAction15: ["userAction15"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAProfile__ArgProps,
          internalVariantPropNames: PlasmicAProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAProfile";
  } else {
    func.displayName = `PlasmicAProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicAProfile = Object.assign(
  // Top-level PlasmicAProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topBar: makeNodeComponent("topBar"),
    navigationBar: makeNodeComponent("navigationBar"),
    account: makeNodeComponent("account"),
    button: makeNodeComponent("button"),
    container1: makeNodeComponent("container1"),
    loginButton: makeNodeComponent("loginButton"),
    container3: makeNodeComponent("container3"),
    container2: makeNodeComponent("container2"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    container4: makeNodeComponent("container4"),
    container5: makeNodeComponent("container5"),
    container6: makeNodeComponent("container6"),
    sliderCarousel2: makeNodeComponent("sliderCarousel2"),
    dialogSkill: makeNodeComponent("dialogSkill"),
    dialogGrid: makeNodeComponent("dialogGrid"),
    containerPost: makeNodeComponent("containerPost"),
    commentsSide: makeNodeComponent("commentsSide"),
    comments: makeNodeComponent("comments"),
    commentContainer: makeNodeComponent("commentContainer"),
    userAndComment: makeNodeComponent("userAndComment"),
    rate2: makeNodeComponent("rate2"),
    rate: makeNodeComponent("rate"),
    textarea: makeNodeComponent("textarea"),
    userSide: makeNodeComponent("userSide"),
    userAction: makeNodeComponent("userAction"),
    dialogGrid2: makeNodeComponent("dialogGrid2"),
    containerPost2: makeNodeComponent("containerPost2"),
    commentsSide2: makeNodeComponent("commentsSide2"),
    comments2: makeNodeComponent("comments2"),
    commentContainer2: makeNodeComponent("commentContainer2"),
    userAndComment2: makeNodeComponent("userAndComment2"),
    rate3: makeNodeComponent("rate3"),
    rate4: makeNodeComponent("rate4"),
    textarea2: makeNodeComponent("textarea2"),
    userSide2: makeNodeComponent("userSide2"),
    userAction2: makeNodeComponent("userAction2"),
    dialogGrid3: makeNodeComponent("dialogGrid3"),
    containerPost3: makeNodeComponent("containerPost3"),
    commentsSide3: makeNodeComponent("commentsSide3"),
    comments3: makeNodeComponent("comments3"),
    commentContainer3: makeNodeComponent("commentContainer3"),
    userAndComment3: makeNodeComponent("userAndComment3"),
    rate5: makeNodeComponent("rate5"),
    rate6: makeNodeComponent("rate6"),
    textarea3: makeNodeComponent("textarea3"),
    userSide3: makeNodeComponent("userSide3"),
    userAction3: makeNodeComponent("userAction3"),
    dialogGrid4: makeNodeComponent("dialogGrid4"),
    containerPost4: makeNodeComponent("containerPost4"),
    commentsSide4: makeNodeComponent("commentsSide4"),
    comments4: makeNodeComponent("comments4"),
    commentContainer4: makeNodeComponent("commentContainer4"),
    userAndComment4: makeNodeComponent("userAndComment4"),
    rate7: makeNodeComponent("rate7"),
    rate8: makeNodeComponent("rate8"),
    textarea4: makeNodeComponent("textarea4"),
    userSide4: makeNodeComponent("userSide4"),
    userAction4: makeNodeComponent("userAction4"),
    dialogGrid5: makeNodeComponent("dialogGrid5"),
    containerPost5: makeNodeComponent("containerPost5"),
    commentsSide5: makeNodeComponent("commentsSide5"),
    comments5: makeNodeComponent("comments5"),
    commentContainer5: makeNodeComponent("commentContainer5"),
    userAndComment5: makeNodeComponent("userAndComment5"),
    rate9: makeNodeComponent("rate9"),
    rate10: makeNodeComponent("rate10"),
    textarea5: makeNodeComponent("textarea5"),
    userSide5: makeNodeComponent("userSide5"),
    userAction5: makeNodeComponent("userAction5"),
    dialogSkill2: makeNodeComponent("dialogSkill2"),
    dialogGrid6: makeNodeComponent("dialogGrid6"),
    containerPost6: makeNodeComponent("containerPost6"),
    commentsSide6: makeNodeComponent("commentsSide6"),
    comments6: makeNodeComponent("comments6"),
    commentContainer6: makeNodeComponent("commentContainer6"),
    userAndComment6: makeNodeComponent("userAndComment6"),
    rate11: makeNodeComponent("rate11"),
    rate12: makeNodeComponent("rate12"),
    textarea6: makeNodeComponent("textarea6"),
    userSide6: makeNodeComponent("userSide6"),
    userAction6: makeNodeComponent("userAction6"),
    dialogGrid7: makeNodeComponent("dialogGrid7"),
    containerPost7: makeNodeComponent("containerPost7"),
    commentsSide7: makeNodeComponent("commentsSide7"),
    comments7: makeNodeComponent("comments7"),
    commentContainer7: makeNodeComponent("commentContainer7"),
    userAndComment7: makeNodeComponent("userAndComment7"),
    rate13: makeNodeComponent("rate13"),
    rate14: makeNodeComponent("rate14"),
    textarea7: makeNodeComponent("textarea7"),
    userSide7: makeNodeComponent("userSide7"),
    userAction7: makeNodeComponent("userAction7"),
    dialogGrid8: makeNodeComponent("dialogGrid8"),
    containerPost8: makeNodeComponent("containerPost8"),
    commentsSide8: makeNodeComponent("commentsSide8"),
    comments8: makeNodeComponent("comments8"),
    commentContainer8: makeNodeComponent("commentContainer8"),
    userAndComment8: makeNodeComponent("userAndComment8"),
    rate15: makeNodeComponent("rate15"),
    rate16: makeNodeComponent("rate16"),
    textarea8: makeNodeComponent("textarea8"),
    userSide8: makeNodeComponent("userSide8"),
    userAction8: makeNodeComponent("userAction8"),
    dialogGrid9: makeNodeComponent("dialogGrid9"),
    containerPost9: makeNodeComponent("containerPost9"),
    commentsSide9: makeNodeComponent("commentsSide9"),
    comments9: makeNodeComponent("comments9"),
    commentContainer9: makeNodeComponent("commentContainer9"),
    userAndComment9: makeNodeComponent("userAndComment9"),
    rate17: makeNodeComponent("rate17"),
    rate18: makeNodeComponent("rate18"),
    textarea9: makeNodeComponent("textarea9"),
    userSide9: makeNodeComponent("userSide9"),
    userAction9: makeNodeComponent("userAction9"),
    dialogGrid10: makeNodeComponent("dialogGrid10"),
    containerPost10: makeNodeComponent("containerPost10"),
    commentsSide10: makeNodeComponent("commentsSide10"),
    comments10: makeNodeComponent("comments10"),
    commentContainer10: makeNodeComponent("commentContainer10"),
    userAndComment10: makeNodeComponent("userAndComment10"),
    rate19: makeNodeComponent("rate19"),
    rate20: makeNodeComponent("rate20"),
    textarea10: makeNodeComponent("textarea10"),
    userSide10: makeNodeComponent("userSide10"),
    userAction10: makeNodeComponent("userAction10"),
    dialogSkill3: makeNodeComponent("dialogSkill3"),
    dialogGrid11: makeNodeComponent("dialogGrid11"),
    containerPost11: makeNodeComponent("containerPost11"),
    commentsSide11: makeNodeComponent("commentsSide11"),
    comments11: makeNodeComponent("comments11"),
    commentContainer11: makeNodeComponent("commentContainer11"),
    userAndComment11: makeNodeComponent("userAndComment11"),
    rate21: makeNodeComponent("rate21"),
    rate22: makeNodeComponent("rate22"),
    textarea11: makeNodeComponent("textarea11"),
    userSide11: makeNodeComponent("userSide11"),
    userAction11: makeNodeComponent("userAction11"),
    dialogGrid12: makeNodeComponent("dialogGrid12"),
    containerPost12: makeNodeComponent("containerPost12"),
    commentsSide12: makeNodeComponent("commentsSide12"),
    comments12: makeNodeComponent("comments12"),
    commentContainer12: makeNodeComponent("commentContainer12"),
    userAndComment12: makeNodeComponent("userAndComment12"),
    rate23: makeNodeComponent("rate23"),
    rate24: makeNodeComponent("rate24"),
    textarea12: makeNodeComponent("textarea12"),
    userSide12: makeNodeComponent("userSide12"),
    userAction12: makeNodeComponent("userAction12"),
    dialogGrid13: makeNodeComponent("dialogGrid13"),
    containerPost13: makeNodeComponent("containerPost13"),
    commentsSide13: makeNodeComponent("commentsSide13"),
    comments13: makeNodeComponent("comments13"),
    commentContainer13: makeNodeComponent("commentContainer13"),
    userAndComment13: makeNodeComponent("userAndComment13"),
    rate25: makeNodeComponent("rate25"),
    rate26: makeNodeComponent("rate26"),
    textarea13: makeNodeComponent("textarea13"),
    userSide13: makeNodeComponent("userSide13"),
    userAction13: makeNodeComponent("userAction13"),
    dialogGrid14: makeNodeComponent("dialogGrid14"),
    containerPost14: makeNodeComponent("containerPost14"),
    commentsSide14: makeNodeComponent("commentsSide14"),
    comments14: makeNodeComponent("comments14"),
    commentContainer14: makeNodeComponent("commentContainer14"),
    userAndComment14: makeNodeComponent("userAndComment14"),
    rate27: makeNodeComponent("rate27"),
    rate28: makeNodeComponent("rate28"),
    textarea14: makeNodeComponent("textarea14"),
    userSide14: makeNodeComponent("userSide14"),
    userAction14: makeNodeComponent("userAction14"),
    dialogGrid15: makeNodeComponent("dialogGrid15"),
    containerPost15: makeNodeComponent("containerPost15"),
    commentsSide15: makeNodeComponent("commentsSide15"),
    comments15: makeNodeComponent("comments15"),
    commentContainer15: makeNodeComponent("commentContainer15"),
    userAndComment15: makeNodeComponent("userAndComment15"),
    rate29: makeNodeComponent("rate29"),
    rate30: makeNodeComponent("rate30"),
    textarea15: makeNodeComponent("textarea15"),
    userSide15: makeNodeComponent("userSide15"),
    userAction15: makeNodeComponent("userAction15"),
    // Metadata about props expected for PlasmicAProfile
    internalVariantProps: PlasmicAProfile__VariantProps,
    internalArgProps: PlasmicAProfile__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Profile",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAProfile;
/* prettier-ignore-end */
