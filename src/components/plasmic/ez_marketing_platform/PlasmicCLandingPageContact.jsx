/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6Q26EfqfPNQuydumhAEs1S
// Component: 6M53odGgQh7L
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import LoginButton from "../../LoginButton"; // plasmic-import: sda60oPQ2thQ/component
import FooterSection from "../../FooterSection"; // plasmic-import: V9WWasIOlC1n/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6Q26EfqfPNQuydumhAEs1S/projectcss
import sty from "./PlasmicCLandingPageContact.module.css"; // plasmic-import: 6M53odGgQh7L/css
import UserSvgIcon from "./icons/PlasmicIcon__UserSvg"; // plasmic-import: QfOtDDpLKgTV/icon
import BriefcaseSvgIcon from "./icons/PlasmicIcon__BriefcaseSvg"; // plasmic-import: d0F-IZ-vM-vd/icon
import _4654364831553230929SvgIcon from "./icons/PlasmicIcon___4654364831553230929Svg"; // plasmic-import: yJGoN8YKg8Eb/icon
import GlobeSvgIcon from "./icons/PlasmicIcon__GlobeSvg"; // plasmic-import: v4hV9DC1cDEX/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: SJBZrx1PCM9U/icon
import business2879499640JpgKfr0W4TJb4 from "./images/business2879499640Jpg.jpg"; // plasmic-import: kfr0w4T_JB4-/picture

createPlasmicElementProxy;

export const PlasmicCLandingPageContact__VariantProps = new Array();

export const PlasmicCLandingPageContact__ArgProps = new Array();

const $$ = {};

function PlasmicCLandingPageContact__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "tSBhJfs4LDomzTKjiMETbM",
        opId: "7713850a-8c2e-4220-a940-96dd730fd07d",
        userArgs: {},
        cacheKey: `plasmic.$.7713850a-8c2e-4220-a940-96dd730fd07d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"formulario1"}
            data-plasmic-override={overrides.formulario1}
            hasGap={true}
            className={classNames(projectcss.all, sty.formulario1)}
          >
            <div className={classNames(projectcss.all, sty.column__xzpXh)}>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: business2879499640JpgKfr0W4TJb4,
                  fullWidth: 640,
                  fullHeight: 423,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.column__tJm05)}>
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {"Secure Your Place on the Waiting List!"}
              </h2>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lxjlB
                )}
              >
                {
                  "Be one of the first companies to access this revolution in digital marketing.\r\n\nFill in your details below:"
                }
              </div>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form2),
                  extendedOnValuesChange: async (...eventArgs) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form2", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],

                  labelAlign: "right",
                  labelCol: (() => {
                    const __composite = { span: null, horizontalOnly: true };
                    __composite["span"] = 2;
                    return __composite;
                  })(),
                  layout: "horizontal",
                  mode: "advanced",
                  onIsSubmittingChange: async (...eventArgs) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form2", "isSubmitting"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  ref: ref => {
                    $refs["form2"] = ref;
                  },
                  submitSlot: null,
                  wrapperCol: (() => {
                    const __composite = { span: null, horizontalOnly: true };
                    __composite["span"] = 16;
                    return __composite;
                  })()
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form2.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form2.isSubmitting"
                    }
                  ],

                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );
                return (
                  <FormWrapper
                    data-plasmic-name={"form2"}
                    data-plasmic-override={overrides.form2}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__oIz0W
                      )}
                      initialValue={undefined}
                      label={
                        <UserSvgIcon
                          className={classNames(projectcss.all, sty.svg__tl14R)}
                          role={"img"}
                        />
                      }
                      name={"Name"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input5),
                          onChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input5", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "Name",
                          value: generateStateValueProp($state, [
                            "input5",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input5.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input5"}
                            data-plasmic-override={overrides.input5}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__kVknj
                      )}
                      initialValue={undefined}
                      label={
                        <BriefcaseSvgIcon
                          className={classNames(projectcss.all, sty.svg__lww3L)}
                          role={"img"}
                        />
                      }
                      name={"Company name"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input6),
                          onChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input6", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "Company",
                          value: generateStateValueProp($state, [
                            "input6",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input6.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input6"}
                            data-plasmic-override={overrides.input6}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__rnq42
                      )}
                      initialValue={undefined}
                      label={
                        <_4654364831553230929SvgIcon
                          className={classNames(projectcss.all, sty.svg__omIsQ)}
                          role={"img"}
                        />
                      }
                      name={"email"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input9),
                          onChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input9", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "email",
                          value: generateStateValueProp($state, [
                            "input9",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input9.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input9"}
                            data-plasmic-override={overrides.input9}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__u3ZGa
                      )}
                      initialValue={undefined}
                      label={
                        <GlobeSvgIcon
                          className={classNames(projectcss.all, sty.svg___1Ppc)}
                          role={"img"}
                        />
                      }
                      name={"site"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input10),
                          onChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input10", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "website",
                          value: generateStateValueProp($state, [
                            "input10",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input10.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input10"}
                            data-plasmic-override={overrides.input10}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___5SwbS
                      )}
                      initialValue={undefined}
                      label={
                        <SearchSvgIcon
                          className={classNames(projectcss.all, sty.svg__hjQnd)}
                          role={"img"}
                        />
                      }
                      name={"Other platforms"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input8),
                          onChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input8", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "What other platform do you use?",
                          value: generateStateValueProp($state, [
                            "input8",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input8.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input8"}
                            data-plasmic-override={overrides.input8}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <Embed
                      data-plasmic-name={"embedHtml"}
                      data-plasmic-override={overrides.embedHtml}
                      className={classNames("__wab_instance", sty.embedHtml)}
                      code={
                        '<div class="g-recaptcha" data-sitekey="6Le92EErAAAAAEdf26p5vxbul9TZ_xocV5iGsvVR"></div>\r\n<script src="https://www.google.com/recaptcha/api.js" async defer></script>\r\n'
                      }
                    />

                    <LoginButton
                      data-plasmic-name={"loginButton"}
                      data-plasmic-override={overrides.loginButton}
                      className={classNames("__wab_instance", sty.loginButton)}
                      shape={"rounded"}
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__usQg4
                        )}
                      >
                        {"Get in wait list"}
                      </div>
                    </LoginButton>
                  </FormWrapper>
                );
              })()}
            </div>
          </Stack__>
          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "formulario1",
    "img",
    "h2",
    "form2",
    "input5",
    "input6",
    "input9",
    "input10",
    "input8",
    "embedHtml",
    "loginButton",
    "footerSection"
  ],

  formulario1: [
    "formulario1",
    "img",
    "h2",
    "form2",
    "input5",
    "input6",
    "input9",
    "input10",
    "input8",
    "embedHtml",
    "loginButton"
  ],

  img: ["img"],
  h2: ["h2"],
  form2: [
    "form2",
    "input5",
    "input6",
    "input9",
    "input10",
    "input8",
    "embedHtml",
    "loginButton"
  ],

  input5: ["input5"],
  input6: ["input6"],
  input9: ["input9"],
  input10: ["input10"],
  input8: ["input8"],
  embedHtml: ["embedHtml"],
  loginButton: ["loginButton"],
  footerSection: ["footerSection"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCLandingPageContact__ArgProps,
          internalVariantPropNames: PlasmicCLandingPageContact__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCLandingPageContact__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCLandingPageContact";
  } else {
    func.displayName = `PlasmicCLandingPageContact.${nodeName}`;
  }
  return func;
}

export const PlasmicCLandingPageContact = Object.assign(
  // Top-level PlasmicCLandingPageContact renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    formulario1: makeNodeComponent("formulario1"),
    img: makeNodeComponent("img"),
    h2: makeNodeComponent("h2"),
    form2: makeNodeComponent("form2"),
    input5: makeNodeComponent("input5"),
    input6: makeNodeComponent("input6"),
    input9: makeNodeComponent("input9"),
    input10: makeNodeComponent("input10"),
    input8: makeNodeComponent("input8"),
    embedHtml: makeNodeComponent("embedHtml"),
    loginButton: makeNodeComponent("loginButton"),
    footerSection: makeNodeComponent("footerSection"),
    // Metadata about props expected for PlasmicCLandingPageContact
    internalVariantProps: PlasmicCLandingPageContact__VariantProps,
    internalArgProps: PlasmicCLandingPageContact__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCLandingPageContact;
/* prettier-ignore-end */
