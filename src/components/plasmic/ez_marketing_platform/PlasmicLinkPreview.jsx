/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6Q26EfqfPNQuydumhAEs1S
// Component: _qIMScZIkWBJ
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import { LinkPreview } from "@plasmicpkgs/plasmic-link-preview";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6Q26EfqfPNQuydumhAEs1S/projectcss
import sty from "./PlasmicLinkPreview.module.css"; // plasmic-import: _qIMScZIkWBJ/css

createPlasmicElementProxy;

export const PlasmicLinkPreview__VariantProps = new Array();

export const PlasmicLinkPreview__ArgProps = new Array("url");

const $$ = {};

function PlasmicLinkPreview__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          url: "https://plasmic.app"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <LinkPreview
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      loadingMessage={
        <DataCtxReader__>
          {$ctx => (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nd7Kx
              )}
            >
              {"loading preview..."}
            </div>
          )}
        </DataCtxReader__>
      }
      noPreviewMessage={
        <DataCtxReader__>
          {$ctx => (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qSa11
              )}
            >
              {"no preview..."}
            </div>
          )}
        </DataCtxReader__>
      }
      url={args.url}
    >
      <DataCtxReader__>
        {$ctx => (
          <div className={classNames(projectcss.all, sty.freeBox__dy2E3)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"200px"}
              loading={"lazy"}
              src={$ctx.metadata.image}
            />

            <div className={classNames(projectcss.all, sty.freeBox__bzLqS)}>
              <div className={classNames(projectcss.all, sty.freeBox___85ETz)}>
                <h5
                  data-plasmic-name={"h5"}
                  data-plasmic-override={overrides.h5}
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.metadata.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h5>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jnl9X
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.metadata.description;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <p
                data-plasmic-name={"p"}
                data-plasmic-override={overrides.p}
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.p
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.metadata.hostname;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </p>
            </div>
          </div>
        )}
      </DataCtxReader__>
    </LinkPreview>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "h5", "p"],
  img: ["img"],
  h5: ["h5"],
  p: ["p"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLinkPreview__ArgProps,
          internalVariantPropNames: PlasmicLinkPreview__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLinkPreview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLinkPreview";
  } else {
    func.displayName = `PlasmicLinkPreview.${nodeName}`;
  }
  return func;
}

export const PlasmicLinkPreview = Object.assign(
  // Top-level PlasmicLinkPreview renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h5: makeNodeComponent("h5"),
    p: makeNodeComponent("p"),
    // Metadata about props expected for PlasmicLinkPreview
    internalVariantProps: PlasmicLinkPreview__VariantProps,
    internalArgProps: PlasmicLinkPreview__ArgProps
  }
);

export default PlasmicLinkPreview;
/* prettier-ignore-end */
