/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6Q26EfqfPNQuydumhAEs1S
// Component: WzQwvRZxoGG9
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicInvalidate } from "@plasmicapp/react-web/lib/data-sources";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Alert from "../../Alert"; // plasmic-import: IT8Nwur5v0WR/component
import { Dialog } from "@plasmicpkgs/radix-ui";
import DialogoButton from "../../DialogoButton"; // plasmic-import: AwA9TQi9SmzV/component
import { DialogContent } from "@plasmicpkgs/radix-ui";
import { DialogDescription } from "@plasmicpkgs/radix-ui";
import { Quill } from "@plasmicpkgs/react-quill";
import { quillHelpers as Quill_Helpers } from "@plasmicpkgs/react-quill";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import Select from "../../Select"; // plasmic-import: iuUTkEsiQBLB/component
import LoginButton from "../../LoginButton"; // plasmic-import: sda60oPQ2thQ/component
import { DialogClose } from "@plasmicpkgs/radix-ui";
import PlusButton from "../../PlusButton"; // plasmic-import: acaccHtQ5A9k/component
import { AntdRate } from "@plasmicpkgs/antd5/skinny/registerRate";
import { useScreenVariants as useScreenVariantsnnPusS1DHa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nnPus_s1dHa_/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6Q26EfqfPNQuydumhAEs1S/projectcss
import sty from "./PlasmicCHomepage.module.css"; // plasmic-import: WzQwvRZxoGG9/css
import ImageSvgIcon from "./icons/PlasmicIcon__ImageSvg"; // plasmic-import: EyJPszCTNeMB/icon
import ChevronDownSvgIcon from "./icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: Bg6ckfv9Qt0z/icon
import ChevronUpSvgIcon from "./icons/PlasmicIcon__ChevronUpSvg"; // plasmic-import: PS8SwQug_PmV/icon
import logoPng2S9Gcm9LGTbT6 from "./images/logoPng2.png"; // plasmic-import: s9GCM9lGTbT6/picture
import imageHdnuUnemj05 from "./images/image.svg"; // plasmic-import: hdnuUNEMJ05-/picture

createPlasmicElementProxy;

export const PlasmicCHomepage__VariantProps = new Array();

export const PlasmicCHomepage__ArgProps = new Array();

const $$ = {};

function PlasmicCHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "dialogCore.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "richTextEditor.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", Quill_Helpers)
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "rate.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnnPusS1DHa()
  });
  return (
    <React.Fragment>
      <div
        data-plasmic-name={"testeDoCarlos"}
        data-plasmic-override={overrides.testeDoCarlos}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.testeDoCarlos
        )}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"topBar"}
          data-plasmic-override={overrides.topBar}
          hasGap={true}
          className={classNames(projectcss.all, sty.topBar)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__otw9E)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qrJXv)}
            >
              <NavigationBar
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                brand={
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___5Uvj
                    )}
                    href={`/corporative-page`}
                    onClick={async event => {
                      const $steps = {};
                      $steps["refreshData"] = true
                        ? (() => {
                            const actionArgs = {
                              queryInvalidation: ["plasmic_refresh_all"]
                            };
                            return (async ({ queryInvalidation }) => {
                              if (!queryInvalidation) {
                                return;
                              }
                              await plasmicInvalidate(queryInvalidation);
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["refreshData"] != null &&
                        typeof $steps["refreshData"] === "object" &&
                        typeof $steps["refreshData"].then === "function"
                      ) {
                        $steps["refreshData"] = await $steps["refreshData"];
                      }
                    }}
                    platform={"react"}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ddJPz)}
                      displayHeight={"30px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: logoPng2S9Gcm9LGTbT6,
                        fullWidth: 190,
                        fullHeight: 100,
                        aspectRatio: undefined
                      }}
                    />
                  </PlasmicLink__>
                }
                className={classNames("__wab_instance", sty.navigationBar)}
                closeButton={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__wtbjr)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={"https://static1.plasmic.app/close.svg"}
                  />
                }
                itemsGap={8}
                menuItems={
                  <React.Fragment>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__cKcA
                      )}
                      href={`/company-profile`}
                      platform={"react"}
                    >
                      {"Company\nprofile"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__nvAzR
                      )}
                      href={`/services-dashboard`}
                      platform={"react"}
                    >
                      {"Service\nDashboard"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__mb5Jk
                      )}
                      platform={"react"}
                    >
                      {"Market\nTrends"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__cqTnJ
                      )}
                      href={`/find-a-affiliate`}
                      platform={"react"}
                    >
                      {"Find a \naffiliate"}
                    </PlasmicLink__>
                  </React.Fragment>
                }
                openButton={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__iTpg3)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={``}
                    src={"https://static1.plasmic.app/menu.svg"}
                    width={``}
                  />
                }
                responsiveBreakpoint={768}
              />

              <AntdDropdown
                data-plasmic-name={"account"}
                data-plasmic-override={overrides.account}
                className={classNames("__wab_instance", sty.account)}
                dropdownMenuScopeClassName={sty["account__dropdownMenu"]}
                menuClassName={classNames({ [sty["pcls_kGKe1vof89kS"]]: true })}
                menuItemClassName={classNames({
                  [sty["pcls_Q_29hT6YlOrg"]]: true
                })}
                menuItems={() => (
                  <React.Fragment>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__uQcy8
                      )}
                      key={"menu-item-1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gf6TB
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__wUfxC
                      )}
                      key={"menu-item-2"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cphqi
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                  </React.Fragment>
                )}
                menuItemsJson={(() => {
                  const __composite = [
                    {
                      type: null,
                      value: "action1",
                      label: null,
                      children: null
                    },
                    {
                      type: null,
                      value: "action2",
                      label: null,
                      onClick: null
                    },
                    { type: "item" }
                  ];

                  __composite["0"]["type"] = "group";
                  __composite["0"]["label"] = "Account";
                  __composite["0"]["children"] = (() => {
                    const __composite = [
                      { type: "item", label: null, onClick: null },
                      { type: "item", label: null, onClick: null },
                      { type: null }
                    ];

                    __composite["0"]["label"] = "Settings & Privacy";
                    __composite["0"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToALogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/a-login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToALogin"] != null &&
                        typeof $steps["goToALogin"] === "object" &&
                        typeof $steps["goToALogin"].then === "function"
                      ) {
                        $steps["goToALogin"] = await $steps["goToALogin"];
                      }
                    };
                    __composite["1"]["label"] = "Help";
                    __composite["1"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToALogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/a-login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToALogin"] != null &&
                        typeof $steps["goToALogin"] === "object" &&
                        typeof $steps["goToALogin"].then === "function"
                      ) {
                        $steps["goToALogin"] = await $steps["goToALogin"];
                      }
                    };
                    __composite["2"]["type"] = "divider";
                    return __composite;
                  })();
                  __composite["1"]["type"] = "item";
                  __composite["1"]["label"] = "Sign out";
                  __composite["1"]["onClick"] = async info => {
                    const $steps = {};
                    $steps["goToALogin"] = true
                      ? (() => {
                          const actionArgs = { destination: `/a-login` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              location.assign(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToALogin"] != null &&
                      typeof $steps["goToALogin"] === "object" &&
                      typeof $steps["goToALogin"].then === "function"
                    ) {
                      $steps["goToALogin"] = await $steps["goToALogin"];
                    }
                  };
                  return __composite;
                })()}
                trigger={"hover"}
                useMenuItemsSlot={false}
              >
                <AntdButton
                  className={classNames("__wab_instance", sty.button__iCkFu)}
                  target={true}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__jMgJh)}
                    displayHeight={"30px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"30px"}
                    loading={"lazy"}
                  />
                </AntdButton>
              </AntdDropdown>
            </Stack__>
          </Stack__>
        </Stack__>
        <div
          data-plasmic-name={"container1"}
          data-plasmic-override={overrides.container1}
          className={classNames(projectcss.all, sty.container1)}
        >
          <PlasmicImg__
            data-plasmic-name={"userImg"}
            data-plasmic-override={overrides.userImg}
            alt={""}
            className={classNames(sty.userImg)}
            displayHeight={"80px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"80px"}
            loading={"lazy"}
            src={undefined}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wPvCn
            )}
          >
            {"Company"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__f5TN2
            )}
          >
            {"Waiting for confirmation"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__mTjpD)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ar3TW
              )}
            >
              {"5"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__k1PJg
              )}
            >
              {" / "}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__z3TOp
              )}
            >
              {"28"}
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xfUd
            )}
          >
            {"In progress"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__c3Xy)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qyl6I
              )}
            >
              {"5"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qs4D
              )}
            >
              {" / "}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__n28At
              )}
            >
              {"28"}
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mviP0
            )}
          >
            {"Waiting for customer"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__g1Col)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ev0An
              )}
            >
              {"5"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rSNlD
              )}
            >
              {" / "}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__v68K5
              )}
            >
              {"28"}
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"container3"}
          data-plasmic-override={overrides.container3}
          className={classNames(projectcss.all, sty.container3)}
        >
          <Alert
            data-plasmic-name={"alert"}
            data-plasmic-override={overrides.alert}
            body={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xDaiI
                )}
              >
                {"Here is the body text description for the alert!"}
              </div>
            }
            className={classNames("__wab_instance", sty.alert)}
            header={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aCjyN
                )}
              >
                {"Heads up!"}
              </div>
            }
          />
        </div>
        <div
          data-plasmic-name={"container2"}
          data-plasmic-override={overrides.container2}
          className={classNames(projectcss.all, sty.container2)}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__u3AlQ)}
            displayHeight={"40px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"40px"}
            loading={"lazy"}
          />

          <Dialog
            data-plasmic-name={"dialogCore"}
            data-plasmic-override={overrides.dialogCore}
            className={classNames("__wab_instance", sty.dialogCore)}
            onOpenChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["dialogCore", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["dialogCore", "open"])}
            overlayClassName={classNames({ [sty["pcls_w_PSt5NuY5-A"]]: true })}
            themeResetClass={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            triggerSlot={
              <DialogoButton
                className={classNames(
                  "__wab_instance",
                  sty.dialogoButton__jaAgh
                )}
                shape={"rounded"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kubI
                  )}
                >
                  {"Share your skills  "}
                </div>
              </DialogoButton>
            }
          >
            <DialogContent
              data-plasmic-name={"dialogContent"}
              data-plasmic-override={overrides.dialogContent}
              className={classNames("__wab_instance", sty.dialogContent)}
              themeResetClass={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hm9Tl)}
              >
                <DialogDescription
                  data-plasmic-name={"dialogDescription"}
                  data-plasmic-override={overrides.dialogDescription}
                  className={classNames(
                    "__wab_instance",
                    sty.dialogDescription
                  )}
                >
                  {(() => {
                    const child$Props = {
                      containerClassName: classNames(
                        "__wab_instance",
                        sty.richTextEditor
                      ),
                      onChange: async (...eventArgs) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["richTextEditor", "value"],
                          Quill_Helpers
                        ).apply(null, eventArgs);
                      },
                      preserveWhitespace: true,
                      readOnly: false,
                      toolbar: (() => {
                        const __composite = {
                          textStyle: [
                            "bold",
                            "italic",
                            "underline",
                            "strikethrough"
                          ],

                          colors: null,
                          script: null,
                          fontFamily: null,
                          heading: null,
                          fontSizes: null,
                          formatting: null,
                          inputTypes: null
                        };
                        __composite["colors"] = [];
                        __composite["script"] = false;
                        __composite["fontFamily"] = false;
                        __composite["heading"] = [];
                        __composite["fontSizes"] = [];
                        __composite["formatting"] = ["list", "indentation"];
                        __composite["inputTypes"] = ["link"];
                        return __composite;
                      })(),
                      value: generateStateValueProp($state, [
                        "richTextEditor",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "richTextEditor.value"
                        }
                      ],

                      [],
                      Quill_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <Quill
                        data-plasmic-name={"richTextEditor"}
                        data-plasmic-override={overrides.richTextEditor}
                        {...child$Props}
                      />
                    );
                  })()}
                  <UploadWrapper
                    data-plasmic-name={"upload"}
                    data-plasmic-override={overrides.upload}
                    accept={""}
                    className={classNames("__wab_instance", sty.upload)}
                    files={generateStateValueProp($state, ["upload", "files"])}
                    onFilesChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "upload",
                        "files"
                      ]).apply(null, eventArgs);
                    }}
                    showUploadList={true}
                  >
                    <DialogoButton
                      className={classNames(
                        "__wab_instance",
                        sty.dialogoButton__qiGbi
                      )}
                      shape={"rounded"}
                    >
                      <ImageSvgIcon
                        className={classNames(projectcss.all, sty.svg__ql1Xg)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4KB
                        )}
                      >
                        {"Upload"}
                      </div>
                    </DialogoButton>
                  </UploadWrapper>
                  <Select
                    data-plasmic-name={"select"}
                    data-plasmic-override={overrides.select}
                    className={classNames("__wab_instance", sty.select)}
                    onChange={async (...eventArgs) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["select", "value"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    options={[
                      { value: "option1", label: "Option 1" },
                      { value: "option2", label: "Option 2" }
                    ]}
                    placeholder={"Skill"}
                    value={generateStateValueProp($state, ["select", "value"])}
                  />

                  <LoginButton
                    data-plasmic-name={"loginButton"}
                    data-plasmic-override={overrides.loginButton}
                    className={classNames("__wab_instance", sty.loginButton)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aYttB
                      )}
                    >
                      {"Post"}
                    </div>
                  </LoginButton>
                </DialogDescription>
              </Stack__>
              <DialogClose
                data-plasmic-name={"dialogClose"}
                data-plasmic-override={overrides.dialogClose}
                className={classNames("__wab_instance", sty.dialogClose)}
              />
            </DialogContent>
          </Dialog>
        </div>
        <div
          data-plasmic-name={"containerPost"}
          data-plasmic-override={overrides.containerPost}
          className={classNames(projectcss.all, sty.containerPost)}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__p11Xf)}
            displayHeight={"auto"}
            displayMaxHeight={"400px"}
            displayMaxWidth={"539px"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: imageHdnuUnemj05,
              fullWidth: 262,
              fullHeight: 262,
              aspectRatio: 1
            }}
          />

          <div
            data-plasmic-name={"hoverInteractionEngajament"}
            data-plasmic-override={overrides.hoverInteractionEngajament}
            className={classNames(
              projectcss.all,
              sty.hoverInteractionEngajament
            )}
            onPointerMove={async event => {
              const $steps = {};
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yJn3J
              )}
            >
              {
                "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
              }
            </div>
            <AntdDropdown
              data-plasmic-name={"dropdown"}
              data-plasmic-override={overrides.dropdown}
              className={classNames("__wab_instance", sty.dropdown)}
              dropdownMenuScopeClassName={sty["dropdown__dropdownMenu"]}
              menuClassName={classNames({ [sty["pcls_Zha2PsLyTzvy"]]: true })}
              menuItemClassName={classNames({
                [sty["pcls_CFj0vItfdhSE"]]: true
              })}
              menuItems={() => (
                <React.Fragment>
                  <AntdMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__gj8Eb
                    )}
                    key={"menu-item-1"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ooxQw
                      )}
                    >
                      {"Menu item"}
                    </div>
                  </AntdMenuItem>
                  <AntdMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__lej6E
                    )}
                    key={"menu-item-2"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__otLx4
                      )}
                    >
                      {"Menu item"}
                    </div>
                  </AntdMenuItem>
                </React.Fragment>
              )}
              menuItemsJson={[
                { type: "item", value: "action1", label: "Action 1" },
                { type: "item", value: "action2", label: "Action 2" }
              ]}
            >
              <PlusButton
                data-plasmic-name={"plusButton"}
                data-plasmic-override={overrides.plusButton}
                className={classNames("__wab_instance", sty.plusButton)}
                color={"clear"}
              >
                <ChevronDownSvgIcon
                  className={classNames(projectcss.all, sty.svg__jZlzs)}
                  role={"img"}
                />
              </PlusButton>
            </AntdDropdown>
            <div
              data-plasmic-name={"commentsColun"}
              data-plasmic-override={overrides.commentsColun}
              className={classNames(projectcss.all, sty.commentsColun)}
            >
              <div
                data-plasmic-name={"commentContainer"}
                data-plasmic-override={overrides.commentContainer}
                className={classNames(projectcss.all, sty.commentContainer)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___9JEwp)}
                  displayHeight={"30px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"30px"}
                  loading={"lazy"}
                />

                <div
                  data-plasmic-name={"userAndComment"}
                  data-plasmic-override={overrides.userAndComment}
                  className={classNames(projectcss.all, sty.userAndComment)}
                >
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__ph2Wc
                    )}
                    href={`/profile`}
                    platform={"react"}
                  >
                    {"Cool User"}
                  </PlasmicLink__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2FNpk
                    )}
                  >
                    {
                      "Cool great comment, we need to get strong faster and smart, every day is a day to victory"
                    }
                  </div>
                </div>
              </div>
            </div>
            <AntdRate
              data-plasmic-name={"rate"}
              data-plasmic-override={overrides.rate}
              allowClear={true}
              allowHalf={true}
              autoFocus={true}
              character={null}
              className={classNames("__wab_instance", sty.rate)}
              multiCharacter={false}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["rate", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              symbols={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gsWsg
                    )}
                  >
                    {"1"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yzzJx
                    )}
                  >
                    {"2"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gKyXr
                    )}
                  >
                    {"3"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0Gx1J
                    )}
                  >
                    {"4"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xenqN
                    )}
                  >
                    {"5"}
                  </div>
                </React.Fragment>
              }
              value={generateStateValueProp($state, ["rate", "value"])}
            />

            <textarea
              data-plasmic-name={"textarea"}
              data-plasmic-override={overrides.textarea}
              className={classNames(
                projectcss.all,
                projectcss.textarea,
                sty.textarea,
                "carlos"
              )}
              cols={7}
              onChange={async (...eventArgs) => {
                (e => {
                  generateStateOnChangeProp($state, ["textarea", "value"])(
                    e.target.value
                  );
                }).apply(null, eventArgs);
              }}
              placeholder={"Add a comment..."}
              ref={ref => {
                $refs["textarea"] = ref;
              }}
              rows={6}
              tabIndex={5}
              title={"Enter a praise or feedback"}
              value={
                generateStateValueProp($state, ["textarea", "value"]) ?? ""
              }
            />
          </div>
          <div
            data-plasmic-name={"userActionDataOut"}
            data-plasmic-override={overrides.userActionDataOut}
            className={classNames(projectcss.all, sty.userActionDataOut)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__wYskm)}
              displayHeight={"40px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"40px"}
              loading={"lazy"}
            />

            <div
              data-plasmic-name={"entradaDeDadosUsuarioEAcao"}
              data-plasmic-override={overrides.entradaDeDadosUsuarioEAcao}
              className={classNames(
                projectcss.all,
                sty.entradaDeDadosUsuarioEAcao
              )}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__xaA5N
                )}
                href={"https://www.plasmic.app/"}
                platform={"react"}
              >
                {"User new"}
              </PlasmicLink__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wfOtm
                )}
              >
                {"commented about"}
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__yIfG
                )}
                href={"https://www.plasmic.app/"}
                platform={"react"}
              >
                {"Comunity User"}
              </PlasmicLink__>
            </div>
          </div>
        </div>
        <AntdDropdown
          data-plasmic-name={"messageBox"}
          data-plasmic-override={overrides.messageBox}
          className={classNames("__wab_instance", sty.messageBox)}
          dropdownMenuScopeClassName={sty["messageBox__dropdownMenu"]}
          menuClassName={classNames({ [sty["pcls_FuUYUS3M-Y9m"]]: true })}
          menuItemClassName={classNames({ [sty["pcls_4dwUwF8Hg-gG"]]: true })}
          menuItems={() => (
            <React.Fragment>
              <AntdMenuItem
                className={classNames("__wab_instance", sty.menuItem__qZtIi)}
                key={"menu-item-1"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bZjQ
                  )}
                >
                  {"Menu item"}
                </div>
              </AntdMenuItem>
              <AntdMenuItem
                className={classNames("__wab_instance", sty.menuItem__ySw87)}
                key={"menu-item-2"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fzXw9
                  )}
                >
                  {"Menu item"}
                </div>
              </AntdMenuItem>
            </React.Fragment>
          )}
          menuItemsJson={(() => {
            const __composite = [
              { type: null, value: "action1", label: null, children: null },
              { type: null, value: "action2", label: null, children: null },
              { type: null, label: null, children: null }
            ];

            __composite["0"]["type"] = "group";
            __composite["0"]["label"] = "Comunity";
            __composite["0"]["children"] = (() => {
              const __composite = [
                { type: "item", label: null, onClick: null },
                { type: "item", label: null },
                { type: "item", label: null },
                { type: null }
              ];

              __composite["0"]["label"] = "Member 1";
              __composite["0"]["onClick"] = async info => {
                const $steps = {};
              };
              __composite["1"]["label"] = "Member 2";
              __composite["2"]["label"] = "Member 3";
              __composite["3"]["type"] = "divider";
              return __composite;
            })();
            __composite["1"]["type"] = "group";
            __composite["1"]["label"] = "Company";
            __composite["1"]["children"] = (() => {
              const __composite = [
                { type: "item", label: null },
                { type: "item", label: null },
                { type: "item", label: null },
                { type: null }
              ];

              __composite["0"]["label"] = "Company 1";
              __composite["1"]["label"] = "Company 2";
              __composite["2"]["label"] = "Company 3";
              __composite["3"]["type"] = "divider";
              return __composite;
            })();
            __composite["2"]["type"] = "group";
            __composite["2"]["label"] = "Forum";
            __composite["2"]["children"] = (() => {
              const __composite = [
                { type: "item", label: null },
                { type: "item", label: null }
              ];

              __composite["0"]["label"] = "Instructor";
              __composite["1"]["label"] = "Student";
              return __composite;
            })();
            return __composite;
          })()}
          placement={"topLeft"}
        >
          <AntdButton
            className={classNames("__wab_instance", sty.button__ts30D)}
            ghost={false}
            loading={false}
            shape={"default"}
            size={"medium"}
            type={"default"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tj9M
              )}
            >
              {"Message box"}
            </div>
            <ChevronUpSvgIcon
              className={classNames(projectcss.all, sty.svg__daTKv)}
              role={"img"}
            />
          </AntdButton>
        </AntdDropdown>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  testeDoCarlos: [
    "testeDoCarlos",
    "topBar",
    "navigationBar",
    "account",
    "container1",
    "userImg",
    "container3",
    "alert",
    "container2",
    "dialogCore",
    "dialogContent",
    "dialogDescription",
    "richTextEditor",
    "upload",
    "select",
    "loginButton",
    "dialogClose",
    "containerPost",
    "hoverInteractionEngajament",
    "dropdown",
    "plusButton",
    "commentsColun",
    "commentContainer",
    "userAndComment",
    "rate",
    "textarea",
    "userActionDataOut",
    "entradaDeDadosUsuarioEAcao",
    "messageBox"
  ],

  topBar: ["topBar", "navigationBar", "account"],
  navigationBar: ["navigationBar"],
  account: ["account"],
  container1: ["container1", "userImg"],
  userImg: ["userImg"],
  container3: ["container3", "alert"],
  alert: ["alert"],
  container2: [
    "container2",
    "dialogCore",
    "dialogContent",
    "dialogDescription",
    "richTextEditor",
    "upload",
    "select",
    "loginButton",
    "dialogClose"
  ],

  dialogCore: [
    "dialogCore",
    "dialogContent",
    "dialogDescription",
    "richTextEditor",
    "upload",
    "select",
    "loginButton",
    "dialogClose"
  ],

  dialogContent: [
    "dialogContent",
    "dialogDescription",
    "richTextEditor",
    "upload",
    "select",
    "loginButton",
    "dialogClose"
  ],

  dialogDescription: [
    "dialogDescription",
    "richTextEditor",
    "upload",
    "select",
    "loginButton"
  ],

  richTextEditor: ["richTextEditor"],
  upload: ["upload"],
  select: ["select"],
  loginButton: ["loginButton"],
  dialogClose: ["dialogClose"],
  containerPost: [
    "containerPost",
    "hoverInteractionEngajament",
    "dropdown",
    "plusButton",
    "commentsColun",
    "commentContainer",
    "userAndComment",
    "rate",
    "textarea",
    "userActionDataOut",
    "entradaDeDadosUsuarioEAcao"
  ],

  hoverInteractionEngajament: [
    "hoverInteractionEngajament",
    "dropdown",
    "plusButton",
    "commentsColun",
    "commentContainer",
    "userAndComment",
    "rate",
    "textarea"
  ],

  dropdown: ["dropdown", "plusButton"],
  plusButton: ["plusButton"],
  commentsColun: ["commentsColun", "commentContainer", "userAndComment"],
  commentContainer: ["commentContainer", "userAndComment"],
  userAndComment: ["userAndComment"],
  rate: ["rate"],
  textarea: ["textarea"],
  userActionDataOut: ["userActionDataOut", "entradaDeDadosUsuarioEAcao"],
  entradaDeDadosUsuarioEAcao: ["entradaDeDadosUsuarioEAcao"],
  messageBox: ["messageBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCHomepage__ArgProps,
          internalVariantPropNames: PlasmicCHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "testeDoCarlos") {
    func.displayName = "PlasmicCHomepage";
  } else {
    func.displayName = `PlasmicCHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicCHomepage = Object.assign(
  // Top-level PlasmicCHomepage renders the root element
  makeNodeComponent("testeDoCarlos"),
  {
    // Helper components rendering sub-elements
    topBar: makeNodeComponent("topBar"),
    navigationBar: makeNodeComponent("navigationBar"),
    account: makeNodeComponent("account"),
    container1: makeNodeComponent("container1"),
    userImg: makeNodeComponent("userImg"),
    container3: makeNodeComponent("container3"),
    alert: makeNodeComponent("alert"),
    container2: makeNodeComponent("container2"),
    dialogCore: makeNodeComponent("dialogCore"),
    dialogContent: makeNodeComponent("dialogContent"),
    dialogDescription: makeNodeComponent("dialogDescription"),
    richTextEditor: makeNodeComponent("richTextEditor"),
    upload: makeNodeComponent("upload"),
    select: makeNodeComponent("select"),
    loginButton: makeNodeComponent("loginButton"),
    dialogClose: makeNodeComponent("dialogClose"),
    containerPost: makeNodeComponent("containerPost"),
    hoverInteractionEngajament: makeNodeComponent("hoverInteractionEngajament"),
    dropdown: makeNodeComponent("dropdown"),
    plusButton: makeNodeComponent("plusButton"),
    commentsColun: makeNodeComponent("commentsColun"),
    commentContainer: makeNodeComponent("commentContainer"),
    userAndComment: makeNodeComponent("userAndComment"),
    rate: makeNodeComponent("rate"),
    textarea: makeNodeComponent("textarea"),
    userActionDataOut: makeNodeComponent("userActionDataOut"),
    entradaDeDadosUsuarioEAcao: makeNodeComponent("entradaDeDadosUsuarioEAcao"),
    messageBox: makeNodeComponent("messageBox"),
    // Metadata about props expected for PlasmicCHomepage
    internalVariantProps: PlasmicCHomepage__VariantProps,
    internalArgProps: PlasmicCHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCHomepage;
/* prettier-ignore-end */
