/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6Q26EfqfPNQuydumhAEs1S
// Component: BBP3ZFvw5Kr2
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicInvalidate } from "@plasmicapp/react-web/lib/data-sources";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { useScreenVariants as useScreenVariantsnnPusS1DHa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nnPus_s1dHa_/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6Q26EfqfPNQuydumhAEs1S/projectcss
import sty from "./PlasmicHomepage2.module.css"; // plasmic-import: BBP3ZFvw5Kr2/css
import logoPng2S9Gcm9LGTbT6 from "./images/logoPng2.png"; // plasmic-import: s9GCM9lGTbT6/picture

createPlasmicElementProxy;

export const PlasmicHomepage2__VariantProps = new Array();

export const PlasmicHomepage2__ArgProps = new Array();

const $$ = {};

function PlasmicHomepage2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnnPusS1DHa()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"topBar"}
            data-plasmic-override={overrides.topBar}
            hasGap={true}
            className={classNames(projectcss.all, sty.topBar)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zrnCw)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jsCvH)}
              >
                <NavigationBar
                  data-plasmic-name={"navigationBar"}
                  data-plasmic-override={overrides.navigationBar}
                  brand={
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__gXdE
                      )}
                      href={`/affiliate-homepage`}
                      onClick={async event => {
                        const $steps = {};
                        $steps["refreshData"] = true
                          ? (() => {
                              const actionArgs = {
                                queryInvalidation: ["plasmic_refresh_all"]
                              };
                              return (async ({ queryInvalidation }) => {
                                if (!queryInvalidation) {
                                  return;
                                }
                                await plasmicInvalidate(queryInvalidation);
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["refreshData"] != null &&
                          typeof $steps["refreshData"] === "object" &&
                          typeof $steps["refreshData"].then === "function"
                        ) {
                          $steps["refreshData"] = await $steps["refreshData"];
                        }
                      }}
                      platform={"react"}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__vcuC7)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: logoPng2S9Gcm9LGTbT6,
                          fullWidth: 190,
                          fullHeight: 100,
                          aspectRatio: undefined
                        }}
                      />
                    </PlasmicLink__>
                  }
                  className={classNames("__wab_instance", sty.navigationBar)}
                  closeButton={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ajf4U)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={"https://static1.plasmic.app/close.svg"}
                    />
                  }
                  itemsGap={8}
                  menuItems={
                    <React.Fragment>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__zOyP9
                        )}
                        href={"/"}
                        platform={"react"}
                      >
                        {"Community Dashboard"}
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__oojM
                        )}
                        href={"/"}
                        platform={"react"}
                      >
                        {"Service\nDashboard"}
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__m6Vl1
                        )}
                        href={"/"}
                        platform={"react"}
                      >
                        {"Market\nTrends"}
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__o2Tt1
                        )}
                        href={`/find-a-business`}
                        platform={"react"}
                      >
                        {"Find a \nbusiness"}
                      </PlasmicLink__>
                    </React.Fragment>
                  }
                  openButton={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__bor0I)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      height={``}
                      src={"https://static1.plasmic.app/menu.svg"}
                      width={``}
                    />
                  }
                  responsiveBreakpoint={768}
                />

                <AntdDropdown
                  data-plasmic-name={"account"}
                  data-plasmic-override={overrides.account}
                  className={classNames("__wab_instance", sty.account)}
                  dropdownMenuScopeClassName={sty["account__dropdownMenu"]}
                  menuClassName={classNames({
                    [sty["pcls_1Cekj4U7ec2A"]]: true
                  })}
                  menuItemClassName={classNames({
                    [sty["pcls_wdkszti_1NCC"]]: true
                  })}
                  menuItems={() => (
                    <React.Fragment>
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem__njfb2
                        )}
                        key={"menu-item-1"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gc50S
                          )}
                        >
                          {"Menu item"}
                        </div>
                      </AntdMenuItem>
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem__y5XKo
                        )}
                        key={"menu-item-2"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cGull
                          )}
                        >
                          {"Menu item"}
                        </div>
                      </AntdMenuItem>
                    </React.Fragment>
                  )}
                  menuItemsJson={(() => {
                    const __composite = [
                      { type: null, label: null, children: null },
                      {
                        type: null,
                        value: "action1",
                        label: null,
                        children: null
                      },
                      {
                        type: null,
                        value: "action2",
                        label: null,
                        onClick: null
                      }
                    ];

                    __composite["0"]["type"] = "group";
                    __composite["0"]["label"] = "User";
                    __composite["0"]["children"] = (() => {
                      const __composite = [
                        { type: "item", label: null, onClick: null },
                        { type: "item", label: null, onClick: null },
                        { type: null }
                      ];

                      __composite["0"]["label"] = "Profile";
                      __composite["0"]["onClick"] = async info => {
                        const $steps = {};
                        $steps["goToALogin"] = true
                          ? (() => {
                              const actionArgs = { destination: `/a-login` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToALogin"] != null &&
                          typeof $steps["goToALogin"] === "object" &&
                          typeof $steps["goToALogin"].then === "function"
                        ) {
                          $steps["goToALogin"] = await $steps["goToALogin"];
                        }
                      };
                      __composite["1"]["label"] = "Edit profile";
                      __composite["1"]["onClick"] = async info => {
                        const $steps = {};
                        $steps["goToACreateAccount"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/a-create account`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToACreateAccount"] != null &&
                          typeof $steps["goToACreateAccount"] === "object" &&
                          typeof $steps["goToACreateAccount"].then ===
                            "function"
                        ) {
                          $steps["goToACreateAccount"] = await $steps[
                            "goToACreateAccount"
                          ];
                        }
                      };
                      __composite["2"]["type"] = "divider";
                      return __composite;
                    })();
                    __composite["1"]["type"] = "group";
                    __composite["1"]["label"] = "Account";
                    __composite["1"]["children"] = (() => {
                      const __composite = [
                        { type: "item", label: null, onClick: null },
                        { type: "item", label: null, onClick: null },
                        { type: null }
                      ];

                      __composite["0"]["label"] = "Settings & Privacy";
                      __composite["0"]["onClick"] = async info => {
                        const $steps = {};
                        $steps["goToALogin"] = true
                          ? (() => {
                              const actionArgs = { destination: `/a-login` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToALogin"] != null &&
                          typeof $steps["goToALogin"] === "object" &&
                          typeof $steps["goToALogin"].then === "function"
                        ) {
                          $steps["goToALogin"] = await $steps["goToALogin"];
                        }
                      };
                      __composite["1"]["label"] = "Help";
                      __composite["1"]["onClick"] = async info => {
                        const $steps = {};
                        $steps["goToALogin"] = true
                          ? (() => {
                              const actionArgs = { destination: `/a-login` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToALogin"] != null &&
                          typeof $steps["goToALogin"] === "object" &&
                          typeof $steps["goToALogin"].then === "function"
                        ) {
                          $steps["goToALogin"] = await $steps["goToALogin"];
                        }
                      };
                      __composite["2"]["type"] = "divider";
                      return __composite;
                    })();
                    __composite["2"]["type"] = "item";
                    __composite["2"]["label"] = "Sign out";
                    __composite["2"]["onClick"] = async info => {
                      const $steps = {};
                      $steps["goToALogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/a-login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToALogin"] != null &&
                        typeof $steps["goToALogin"] === "object" &&
                        typeof $steps["goToALogin"].then === "function"
                      ) {
                        $steps["goToALogin"] = await $steps["goToALogin"];
                      }
                    };
                    return __composite;
                  })()}
                  trigger={"hover"}
                  useMenuItemsSlot={false}
                >
                  <AntdButton
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    href={`/a-login`}
                    target={true}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__wjlA)}
                      displayHeight={"30px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"30px"}
                      loading={"lazy"}
                    />
                  </AntdButton>
                </AntdDropdown>
              </Stack__>
            </Stack__>
          </Stack__>
          <div
            data-plasmic-name={"container1"}
            data-plasmic-override={overrides.container1}
            className={classNames(projectcss.all, sty.container1)}
          />

          <div
            data-plasmic-name={"container3"}
            data-plasmic-override={overrides.container3}
            className={classNames(projectcss.all, sty.container3)}
          />

          <div
            data-plasmic-name={"container2"}
            data-plasmic-override={overrides.container2}
            className={classNames(projectcss.all, sty.container2)}
          />

          <div
            data-plasmic-name={"container4"}
            data-plasmic-override={overrides.container4}
            className={classNames(projectcss.all, sty.container4)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "topBar",
    "navigationBar",
    "account",
    "button",
    "container1",
    "container3",
    "container2",
    "container4"
  ],

  topBar: ["topBar", "navigationBar", "account", "button"],
  navigationBar: ["navigationBar"],
  account: ["account", "button"],
  button: ["button"],
  container1: ["container1"],
  container3: ["container3"],
  container2: ["container2"],
  container4: ["container4"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage2__ArgProps,
          internalVariantPropNames: PlasmicHomepage2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage2";
  } else {
    func.displayName = `PlasmicHomepage2.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage2 = Object.assign(
  // Top-level PlasmicHomepage2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topBar: makeNodeComponent("topBar"),
    navigationBar: makeNodeComponent("navigationBar"),
    account: makeNodeComponent("account"),
    button: makeNodeComponent("button"),
    container1: makeNodeComponent("container1"),
    container3: makeNodeComponent("container3"),
    container2: makeNodeComponent("container2"),
    container4: makeNodeComponent("container4"),
    // Metadata about props expected for PlasmicHomepage2
    internalVariantProps: PlasmicHomepage2__VariantProps,
    internalArgProps: PlasmicHomepage2__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage2;
/* prettier-ignore-end */
