// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6Q26EfqfPNQuydumhAEs1S
// Component: P_MZRcmccBhJ
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Varian from "../../Varian"; // plasmic-import: N6jiyqjMi6tf/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6Q26EfqfPNQuydumhAEs1S/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: P_MZRcmccBhJ/css
import UsersvgIcon from "./icons/PlasmicIcon__Usersvg"; // plasmic-import: QfOtDDpLKgTV/icon
import LocksvgIcon from "./icons/PlasmicIcon__Locksvg"; // plasmic-import: 0W062V06ICFz/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: W2ddCaRfBmfX/icon
import ezMarketingLogopngFt2WpZsjyVq from "./images/ezMarketingLogopng.png"; // plasmic-import: FT2WP-ZsjyVq/picture

createPlasmicElementProxy;

export const PlasmicLogin__VariantProps = new Array();

export const PlasmicLogin__ArgProps = new Array(
  "passwordInput2",
  "eMailInput2"
);

const $$ = {};

function PlasmicLogin__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"68px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"auto"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"502px"}
            loading={"lazy"}
            src={{
              src: ezMarketingLogopngFt2WpZsjyVq,
              fullWidth: 2891,
              fullHeight: 393,
              aspectRatio: undefined
            }}
          />

          <div className={classNames(projectcss.all, sty.freeBox__hPdR3)}>
            <UsersvgIcon
              className={classNames(projectcss.all, sty.svg__hS4)}
              role={"img"}
            />

            <LocksvgIcon
              className={classNames(projectcss.all, sty.svg___04EOe)}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__ijTjq)}>
              {renderPlasmicSlot({
                defaultContents: (
                  <Varian
                    className={classNames("__wab_instance", sty.varian__mvTgd)}
                    endIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__vTgu9)}
                        role={"img"}
                      />
                    }
                  />
                ),

                value: args.eMailInput2
              })}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___6Vnje)}>
              {renderPlasmicSlot({
                defaultContents: (
                  <Varian
                    className={classNames("__wab_instance", sty.varian__hdiCx)}
                    endIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg___3R7OL)}
                        role={"img"}
                      />
                    }
                  />
                ),

                value: args.passwordInput2
              })}
            </div>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h6
                    data-plasmic-name={"h6"}
                    data-plasmic-override={overrides.h6}
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6
                    )}
                  >
                    {"Login"}
                  </h6>
                }

                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "text", "h6"],
  img: ["img"],
  text: ["text", "h6"],
  h6: ["h6"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    h6: makeNodeComponent("h6"),
    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Login",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
